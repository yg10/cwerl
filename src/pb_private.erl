%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.1
-module(pb_private).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_ProtobufBroker.FundingType'/1, 'enum_value_by_symbol_ProtobufBroker.FundingType'/1]).
-export(['enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'/1, 'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'/1]).
-export(['enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'/1, 'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_private.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ProtobufBroker.FundingType'() :: 'Spot' | 'Margin'.
-type 'ProtobufBroker.PrivateOrder.Type'() :: 'Market' | 'Limit' | 'StopLoss' | 'StopLossLimit' | 'TakeProfit' | 'TakeProfitLimit' | 'StopLossTakeProfit' | 'StopLossTakeProfitLimit' | 'TrailingStopLoss' | 'TrailingStopLossLimit' | 'StopLossAndLimit' | 'FillOrKill' | 'SettlePosition'.
-type 'ProtobufBroker.PrivateOrder.PriceParamType'() :: 'AbsoluteValue' | 'OffsetValue' | 'PrecentageOffsetValue'.
-export_type(['ProtobufBroker.FundingType'/0, 'ProtobufBroker.PrivateOrder.Type'/0, 'ProtobufBroker.PrivateOrder.PriceParamType'/0]).

%% message types
-type 'ProtobufBroker.PrivateOrder.PriceParam'() :: #'ProtobufBroker.PrivateOrder.PriceParam'{}.

-type 'ProtobufBroker.PrivateOrder'() :: #'ProtobufBroker.PrivateOrder'{}.

-type 'ProtobufBroker.PrivateTrade'() :: #'ProtobufBroker.PrivateTrade'{}.

-type 'ProtobufBroker.PrivatePosition'() :: #'ProtobufBroker.PrivatePosition'{}.

-type 'ProtobufBroker.Balance'() :: #'ProtobufBroker.Balance'{}.

-type 'ProtobufBroker.Balances'() :: #'ProtobufBroker.Balances'{}.

-export_type(['ProtobufBroker.PrivateOrder.PriceParam'/0, 'ProtobufBroker.PrivateOrder'/0, 'ProtobufBroker.PrivateTrade'/0, 'ProtobufBroker.PrivatePosition'/0, 'ProtobufBroker.Balance'/0, 'ProtobufBroker.Balances'/0]).

-spec encode_msg(#'ProtobufBroker.PrivateOrder.PriceParam'{} | #'ProtobufBroker.PrivateOrder'{} | #'ProtobufBroker.PrivateTrade'{} | #'ProtobufBroker.PrivatePosition'{} | #'ProtobufBroker.Balance'{} | #'ProtobufBroker.Balances'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ProtobufBroker.PrivateOrder.PriceParam'{} | #'ProtobufBroker.PrivateOrder'{} | #'ProtobufBroker.PrivateTrade'{} | #'ProtobufBroker.PrivatePosition'{} | #'ProtobufBroker.Balance'{} | #'ProtobufBroker.Balances'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ProtobufBroker.PrivateOrder.PriceParam'{} | #'ProtobufBroker.PrivateOrder'{} | #'ProtobufBroker.PrivateTrade'{} | #'ProtobufBroker.PrivatePosition'{} | #'ProtobufBroker.Balance'{} | #'ProtobufBroker.Balances'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufBroker.PrivateOrder.PriceParam' ->
	  'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(id(Msg,
								 TrUserData),
							      TrUserData);
      'ProtobufBroker.PrivateOrder' ->
	  'encode_msg_ProtobufBroker.PrivateOrder'(id(Msg,
						      TrUserData),
						   TrUserData);
      'ProtobufBroker.PrivateTrade' ->
	  'encode_msg_ProtobufBroker.PrivateTrade'(id(Msg,
						      TrUserData),
						   TrUserData);
      'ProtobufBroker.PrivatePosition' ->
	  'encode_msg_ProtobufBroker.PrivatePosition'(id(Msg,
							 TrUserData),
						      TrUserData);
      'ProtobufBroker.Balance' ->
	  'encode_msg_ProtobufBroker.Balance'(id(Msg, TrUserData),
					      TrUserData);
      'ProtobufBroker.Balances' ->
	  'encode_msg_ProtobufBroker.Balances'(id(Msg,
						  TrUserData),
					       TrUserData)
    end.


'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
						    TrUserData) ->
    'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							<<>>, TrUserData).


'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(#'ProtobufBroker.PrivateOrder.PriceParam'{value
												  =
												  F1,
											      valueString
												  =
												  F2,
											      type
												  =
												  F3},
						    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0.0 -> Bin;
		     true ->
			 e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 'AbsoluteValue'; TrF3 =:= 0 -> B2;
		true ->
		    'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'(TrF3,
									<<B2/binary,
									  16>>,
									'MaybeTrUserData')
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
					 TrUserData) ->
    'encode_msg_ProtobufBroker.PrivateOrder'(Msg, <<>>,
					     TrUserData).


'encode_msg_ProtobufBroker.PrivateOrder'(#'ProtobufBroker.PrivateOrder'{id
									    =
									    F1,
									time =
									    F2,
									price =
									    F3,
									amount =
									    F4,
									side =
									    F5,
									type =
									    F6,
									fundingType
									    =
									    F7,
									priceParams
									    =
									    F8,
									amountParam
									    =
									    F9,
									amountParamString
									    =
									    F10,
									amountFilledString
									    =
									    F11,
									leverage
									    =
									    F12,
									currentStop
									    =
									    F13,
									initialStop
									    =
									    F14,
									currentStopString
									    =
									    F15,
									initialStopString
									    =
									    F16,
									startTime
									    =
									    F17,
									expireTime
									    =
									    F18,
									rate =
									    F19,
									hasClosingOrder
									    =
									    F20,
									closingOrderType
									    =
									    F21,
									closingOrderPriceParams
									    =
									    F22},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0.0 -> B2;
		     true ->
			 e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0.0 -> B3;
		     true ->
			 e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true ->
			 e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'Market'; TrF6 =:= 0 -> B5;
		     true ->
			 'e_enum_ProtobufBroker.PrivateOrder.Type'(TrF6,
								   <<B5/binary,
								     48>>,
								   'MaybeTrUserData')
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 'Spot'; TrF7 =:= 0 -> B6;
		     true ->
			 'e_enum_ProtobufBroker.FundingType'(TrF7,
							     <<B6/binary, 56>>,
							     'MaybeTrUserData')
		  end
		end
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true ->
		  'e_field_ProtobufBroker.PrivateOrder_priceParams'(TrF8,
								    B7,
								    TrUserData)
	   end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_float(TrF9, <<B8/binary, 77>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   case is_empty_string(TrF10) of
		     true -> B9;
		     false ->
			 e_type_string(TrF10, <<B9/binary, 130, 1>>, TrUserData)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   case is_empty_string(TrF11) of
		     true -> B10;
		     false ->
			 e_type_string(TrF11, <<B10/binary, 138, 1>>,
				       TrUserData)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   case is_empty_string(TrF12) of
		     true -> B11;
		     false ->
			 e_type_string(TrF12, <<B11/binary, 82>>, TrUserData)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0.0 -> B12;
		      true ->
			  e_type_float(TrF13, <<B12/binary, 93>>, TrUserData)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= 0.0 -> B13;
		      true ->
			  e_type_float(TrF14, <<B13/binary, 101>>, TrUserData)
		   end
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   case is_empty_string(TrF15) of
		     true -> B14;
		     false ->
			 e_type_string(TrF15, <<B14/binary, 146, 1>>,
				       TrUserData)
		   end
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   case is_empty_string(TrF16) of
		     true -> B15;
		     false ->
			 e_type_string(TrF16, <<B15/binary, 154, 1>>,
				       TrUserData)
		   end
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   if TrF17 =:= 0 -> B16;
		      true ->
			  e_type_int64(TrF17, <<B16/binary, 104>>, TrUserData)
		   end
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   if TrF18 =:= 0 -> B17;
		      true ->
			  e_type_int64(TrF18, <<B17/binary, 112>>, TrUserData)
		   end
		 end
	  end,
    B19 = if F19 == undefined -> B18;
	     true ->
		 begin
		   TrF19 = id(F19, TrUserData),
		   if TrF19 =:= 0.0 -> B18;
		      true ->
			  e_type_float(TrF19, <<B18/binary, 125>>, TrUserData)
		   end
		 end
	  end,
    B20 = if F20 == undefined -> B19;
	     true ->
		 begin
		   TrF20 = id(F20, TrUserData),
		   if TrF20 =:= false -> B19;
		      true ->
			  e_type_bool(TrF20, <<B19/binary, 160, 1>>, TrUserData)
		   end
		 end
	  end,
    B21 = if F21 == undefined -> B20;
	     true ->
		 begin
		   TrF21 = id(F21, TrUserData),
		   if TrF21 =:= 'Market'; TrF21 =:= 0 -> B20;
		      true ->
			  'e_enum_ProtobufBroker.PrivateOrder.Type'(TrF21,
								    <<B20/binary,
								      168, 1>>,
								    'MaybeTrUserData')
		   end
		 end
	  end,
    begin
      TrF22 = id(F22, TrUserData),
      if TrF22 == [] -> B21;
	 true ->
	     'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(TrF22,
									   B21,
									   TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.PrivateTrade'(Msg,
					 TrUserData) ->
    'encode_msg_ProtobufBroker.PrivateTrade'(Msg, <<>>,
					     TrUserData).


'encode_msg_ProtobufBroker.PrivateTrade'(#'ProtobufBroker.PrivateTrade'{externalId
									    =
									    F1,
									orderId
									    =
									    F2,
									time =
									    F3,
									timeMillis
									    =
									    F4,
									price =
									    F5,
									priceString
									    =
									    F6,
									amount =
									    F7,
									amountString
									    =
									    F8,
									side =
									    F9,
									id =
									    F10},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 48>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0.0 -> B4;
		     true ->
			 e_type_float(TrF5, <<B4/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case is_empty_string(TrF8) of
		    true -> B7;
		    false ->
			e_type_string(TrF8, <<B7/binary, 82>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true ->
			 e_type_int32(TrF9, <<B8/binary, 40>>, TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     if TrF10 =:= 0 -> B9;
		true ->
		    e_type_int64(TrF10, <<B9/binary, 8>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PrivatePosition'(Msg,
					    TrUserData) ->
    'encode_msg_ProtobufBroker.PrivatePosition'(Msg, <<>>,
						TrUserData).


'encode_msg_ProtobufBroker.PrivatePosition'(#'ProtobufBroker.PrivatePosition'{id
										  =
										  F1,
									      time
										  =
										  F2,
									      side
										  =
										  F3,
									      avgPrice
										  =
										  F4,
									      avgPriceString
										  =
										  F5,
									      amountOpen
										  =
										  F6,
									      amountClosed
										  =
										  F7,
									      amountOpenString
										  =
										  F8,
									      amountClosedString
										  =
										  F9,
									      orderIds
										  =
										  F10,
									      tradeIds
										  =
										  F11},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0.0 -> B3;
		     true ->
			 e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_float(TrF6, <<B5/binary, 45>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 53>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case is_empty_string(TrF8) of
		    true -> B7;
		    false ->
			e_type_string(TrF8, <<B7/binary, 82>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  case is_empty_string(TrF9) of
		    true -> B8;
		    false ->
			e_type_string(TrF9, <<B8/binary, 90>>, TrUserData)
		  end
		end
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    if TrF10 == [] -> B9;
	       true ->
		   'e_field_ProtobufBroker.PrivatePosition_orderIds'(TrF10,
								     B9,
								     TrUserData)
	    end
	  end,
    begin
      TrF11 = id(F11, TrUserData),
      if TrF11 == [] -> B10;
	 true ->
	     'e_field_ProtobufBroker.PrivatePosition_tradeIds'(TrF11,
							       B10, TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.Balance'(Msg, TrUserData) ->
    'encode_msg_ProtobufBroker.Balance'(Msg, <<>>,
					TrUserData).


'encode_msg_ProtobufBroker.Balance'(#'ProtobufBroker.Balance'{currency
								  = F1,
							      amount = F2,
							      amountString =
								  F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0.0 -> B1;
		     true ->
			 e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.Balances'(Msg, TrUserData) ->
    'encode_msg_ProtobufBroker.Balances'(Msg, <<>>,
					 TrUserData).


'encode_msg_ProtobufBroker.Balances'(#'ProtobufBroker.Balances'{fundingType
								    = F1,
								balances = F2},
				     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'Spot'; TrF1 =:= 0 -> Bin;
		     true ->
			 'e_enum_ProtobufBroker.FundingType'(TrF1,
							     <<Bin/binary, 8>>,
							     'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_ProtobufBroker.Balances_balances'(TrF2, B1,
							TrUserData)
      end
    end.

'e_mfield_ProtobufBroker.PrivateOrder_priceParams'(Msg,
						   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PrivateOrder_priceParams'([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 =
	'e_mfield_ProtobufBroker.PrivateOrder_priceParams'(id(Elem,
							      TrUserData),
							   Bin2, TrUserData),
    'e_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
						      Bin3, TrUserData);
'e_field_ProtobufBroker.PrivateOrder_priceParams'([],
						  Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'([Elem
							       | Rest],
							      Bin,
							      TrUserData) ->
    Bin2 = <<Bin/binary, 178, 1>>,
    Bin3 =
	'e_mfield_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(id(Elem,
									  TrUserData),
								       Bin2,
								       TrUserData),
    'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
								  Bin3,
								  TrUserData);
'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'([],
							      Bin,
							      _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PrivatePosition_orderIds'([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
						      Bin3, TrUserData);
'e_field_ProtobufBroker.PrivatePosition_orderIds'([],
						  Bin, _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PrivatePosition_tradeIds'([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
						      Bin3, TrUserData);
'e_field_ProtobufBroker.PrivatePosition_tradeIds'([],
						  Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.Balances_balances'(Msg, Bin,
					    TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.Balance'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.Balances_balances'([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufBroker.Balances_balances'(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    'e_field_ProtobufBroker.Balances_balances'(Rest, Bin3,
					       TrUserData);
'e_field_ProtobufBroker.Balances_balances'([], Bin,
					   _TrUserData) ->
    Bin.

'e_enum_ProtobufBroker.FundingType'('Spot', Bin,
				    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufBroker.FundingType'('Margin', Bin,
				    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufBroker.FundingType'(V, Bin,
				    _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ProtobufBroker.PrivateOrder.Type'('Market', Bin,
					  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('Limit', Bin,
					  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLoss',
					  Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfitLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfitLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLoss',
					  Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLossLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossAndLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('FillOrKill',
					  Bin, _TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('SettlePosition',
					  Bin, _TrUserData) ->
    <<Bin/binary, 12>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'(V, Bin,
					  _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'('AbsoluteValue',
						    Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'('OffsetValue',
						    Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'('PrecentageOffsetValue',
						    Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'(V,
						    Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ProtobufBroker.PrivateOrder.PriceParam',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
							   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivateOrder', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivateOrder'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivateTrade', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivateTrade'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivatePosition', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivatePosition'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.Balance', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.Balance'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.Balances', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.Balances'(Bin,
					    TrUserData),
       TrUserData).



'decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
								0, 0,
								id(0.0,
								   TrUserData),
								id([],
								   TrUserData),
								id('AbsoluteValue',
								   TrUserData),
								TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<13,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<26,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<16,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, _) ->
    #'ProtobufBroker.PrivateOrder.PriceParam'{value = F@_1,
					      valueString = F@_2, type = F@_3};
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Other,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
      26 ->
	  'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								    Key bsr 3,
								    0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<>>,
							   0, 0, F@_1, F@_2,
							   F@_3, _) ->
    #'ProtobufBroker.PrivateOrder.PriceParam'{value = F@_1,
					      valueString = F@_2, type = F@_3}.

'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<0:16,
							 128, 127,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id(infinity,
								   TrUserData),
								F@_2, F@_3,
								TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<0:16,
							 128, 255,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id('-infinity',
								   TrUserData),
								F@_2, F@_3,
								TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<_:16,
							 1:1, _:7, _:1, 127:7,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id(nan,
								   TrUserData),
								F@_2, F@_3,
								TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<Value:32/little-float,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id(Value,
								   TrUserData),
								F@_2, F@_3,
								TrUserData).

'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3,
								 TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, _,
							     F@_3,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(RestF,
								0, 0, F@_1,
								NewFValue, F@_3,
								TrUserData).

'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, _,
						      TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.PriceParamType'(begin
								  <<Res:32/signed-native>> =
								      <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
								  id(Res,
								     TrUserData)
								end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(RestF,
								0, 0, F@_1,
								F@_2, NewFValue,
								TrUserData).

'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3,
							       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3,
								   TrUserData);
'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest2,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_group_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
						    FNum, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								0, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_32_ProtobufBroker.PrivateOrder.PriceParam'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_64_ProtobufBroker.PrivateOrder.PriceParam'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'decode_msg_ProtobufBroker.PrivateOrder'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Bin, 0,
						     0, id([], TrUserData),
						     id(0, TrUserData),
						     id(0.0, TrUserData),
						     id(0.0, TrUserData),
						     id(0, TrUserData),
						     id('Market', TrUserData),
						     id('Spot', TrUserData),
						     id([], TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     id(0.0, TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     id(0, TrUserData),
						     id(0, TrUserData),
						     id(0.0, TrUserData),
						     id(false, TrUserData),
						     id('Market', TrUserData),
						     id([], TrUserData),
						     TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_id'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, F@_14, F@_15, F@_16,
					     F@_17, F@_18, F@_19, F@_20, F@_21,
					     F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<16,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_time'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<29,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_price'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<37,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amount'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<40,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_side'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<48,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_type'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<56,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_fundingType'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<66,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<77,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amountParam'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<130,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amountParamString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<138,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<82,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_leverage'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<93,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_currentStop'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<101,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_initialStop'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<146,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_currentStopString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<154,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_initialStopString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<104,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_startTime'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<112,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_expireTime'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<125,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_rate'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<160,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, F@_16, F@_17,
							  F@_18, F@_19, F@_20,
							  F@_21, F@_22,
							  TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<168,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, F@_16, F@_17,
							   F@_18, F@_19, F@_20,
							   F@_21, F@_22,
							   TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<178,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, R1, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21, R2,
						 TrUserData) ->
    #'ProtobufBroker.PrivateOrder'{id = F@_1, time = F@_2,
				   price = F@_3, amount = F@_4, side = F@_5,
				   type = F@_6, fundingType = F@_7,
				   priceParams = lists_reverse(R1, TrUserData),
				   amountParam = F@_9,
				   amountParamString = F@_10,
				   amountFilledString = F@_11, leverage = F@_12,
				   currentStop = F@_13, initialStop = F@_14,
				   currentStopString = F@_15,
				   initialStopString = F@_16, startTime = F@_17,
				   expireTime = F@_18, rate = F@_19,
				   hasClosingOrder = F@_20,
				   closingOrderType = F@_21,
				   closingOrderPriceParams =
				       lists_reverse(R2, TrUserData)};
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Other,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData).

'dg_read_field_def_ProtobufBroker.PrivateOrder'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, F@_16, F@_17,
						    F@_18, F@_19, F@_20, F@_21,
						    F@_22, TrUserData);
'dg_read_field_def_ProtobufBroker.PrivateOrder'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PrivateOrder_id'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivateOrder_time'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      29 ->
	  'd_field_ProtobufBroker.PrivateOrder_price'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
      37 ->
	  'd_field_ProtobufBroker.PrivateOrder_amount'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22,
						       TrUserData);
      40 ->
	  'd_field_ProtobufBroker.PrivateOrder_side'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      48 ->
	  'd_field_ProtobufBroker.PrivateOrder_type'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      56 ->
	  'd_field_ProtobufBroker.PrivateOrder_fundingType'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      66 ->
	  'd_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      77 ->
	  'd_field_ProtobufBroker.PrivateOrder_amountParam'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      130 ->
	  'd_field_ProtobufBroker.PrivateOrder_amountParamString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
      138 ->
	  'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10, F@_11,
								   F@_12, F@_13,
								   F@_14, F@_15,
								   F@_16, F@_17,
								   F@_18, F@_19,
								   F@_20, F@_21,
								   F@_22,
								   TrUserData);
      82 ->
	  'd_field_ProtobufBroker.PrivateOrder_leverage'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 TrUserData);
      93 ->
	  'd_field_ProtobufBroker.PrivateOrder_currentStop'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      101 ->
	  'd_field_ProtobufBroker.PrivateOrder_initialStop'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      146 ->
	  'd_field_ProtobufBroker.PrivateOrder_currentStopString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
      154 ->
	  'd_field_ProtobufBroker.PrivateOrder_initialStopString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
      104 ->
	  'd_field_ProtobufBroker.PrivateOrder_startTime'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, TrUserData);
      112 ->
	  'd_field_ProtobufBroker.PrivateOrder_expireTime'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, F@_16, F@_17,
							   F@_18, F@_19, F@_20,
							   F@_21, F@_22,
							   TrUserData);
      125 ->
	  'd_field_ProtobufBroker.PrivateOrder_rate'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      160 ->
	  'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								F@_12, F@_13,
								F@_14, F@_15,
								F@_16, F@_17,
								F@_18, F@_19,
								F@_20, F@_21,
								F@_22,
								TrUserData);
      168 ->
	  'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10, F@_11,
								 F@_12, F@_13,
								 F@_14, F@_15,
								 F@_16, F@_17,
								 F@_18, F@_19,
								 F@_20, F@_21,
								 F@_22,
								 TrUserData);
      178 ->
	  'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									F@_8,
									F@_9,
									F@_10,
									F@_11,
									F@_12,
									F@_13,
									F@_14,
									F@_15,
									F@_16,
									F@_17,
									F@_18,
									F@_19,
									F@_20,
									F@_21,
									F@_22,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivateOrder'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivateOrder'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivateOrder'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    F@_11,
								    F@_12,
								    F@_13,
								    F@_14,
								    F@_15,
								    F@_16,
								    F@_17,
								    F@_18,
								    F@_19,
								    F@_20,
								    F@_21,
								    F@_22,
								    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivateOrder'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3, F@_4, F@_5,
							 F@_6, F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, F@_14, F@_15,
							 F@_16, F@_17, F@_18,
							 F@_19, F@_20, F@_21,
							 F@_22, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivateOrder'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivateOrder'(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, R1, F@_9, F@_10,
						F@_11, F@_12, F@_13, F@_14,
						F@_15, F@_16, F@_17, F@_18,
						F@_19, F@_20, F@_21, R2,
						TrUserData) ->
    #'ProtobufBroker.PrivateOrder'{id = F@_1, time = F@_2,
				   price = F@_3, amount = F@_4, side = F@_5,
				   type = F@_6, fundingType = F@_7,
				   priceParams = lists_reverse(R1, TrUserData),
				   amountParam = F@_9,
				   amountParamString = F@_10,
				   amountFilledString = F@_11, leverage = F@_12,
				   currentStop = F@_13, initialStop = F@_14,
				   currentStopString = F@_15,
				   initialStopString = F@_16, startTime = F@_17,
				   expireTime = F@_18, rate = F@_19,
				   hasClosingOrder = F@_20,
				   closingOrderType = F@_21,
				   closingOrderPriceParams =
				       lists_reverse(R2, TrUserData)}.

'd_field_ProtobufBroker.PrivateOrder_id'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_id'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_id'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_time'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_time'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_time'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_price'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id(infinity, TrUserData),
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_price'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id('-infinity',
							TrUserData),
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_price'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id(nan, TrUserData), F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_price'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id(Value, TrUserData),
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amount'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id(infinity, TrUserData),
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amount'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id('-infinity',
							TrUserData),
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amount'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id(nan, TrUserData), F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amount'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id(Value, TrUserData),
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_side'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_side'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_side'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, NewFValue, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_type'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_type'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_type'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   _, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, NewFValue,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_fundingType'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_fundingType'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_fundingType'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, _, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.FundingType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     NewFValue, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_priceParams'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_priceParams'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, Prev,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     cons(NewFValue, Prev,
							  TrUserData),
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8,
						     id(infinity, TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8,
						     id('-infinity',
							TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, id(nan, TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8,
						     id(Value, TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amountParamString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_amountParamString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    F@_14, F@_15, F@_16,
							    F@_17, F@_18, F@_19,
							    F@_20, F@_21, F@_22,
							    TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParamString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, _,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, NewFValue,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, F@_14, F@_15,
							 F@_16, F@_17, F@_18,
							 F@_19, F@_20, F@_21,
							 F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, _, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     NewFValue, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_leverage'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_leverage'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, F@_16, F@_17, F@_18,
						   F@_19, F@_20, F@_21, F@_22,
						   TrUserData);
'd_field_ProtobufBroker.PrivateOrder_leverage'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, _, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     NewFValue, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12,
						     id(infinity, TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12,
						     id('-infinity',
							TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, id(nan, TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12,
						     id(Value, TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id(infinity, TrUserData),
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id('-infinity',
							TrUserData),
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id(nan, TrUserData), F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id(Value, TrUserData),
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_currentStopString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_currentStopString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    F@_14, F@_15, F@_16,
							    F@_17, F@_18, F@_19,
							    F@_20, F@_21, F@_22,
							    TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStopString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, _, F@_16, F@_17,
							F@_18, F@_19, F@_20,
							F@_21, F@_22,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14,
						     NewFValue, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_initialStopString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_initialStopString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    F@_14, F@_15, F@_16,
							    F@_17, F@_18, F@_19,
							    F@_20, F@_21, F@_22,
							    TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStopString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, _, F@_17,
							F@_18, F@_19, F@_20,
							F@_21, F@_22,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     NewFValue, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_startTime'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_startTime'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, F@_16, F@_17,
						    F@_18, F@_19, F@_20, F@_21,
						    F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_startTime'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, _, F@_18,
						F@_19, F@_20, F@_21, F@_22,
						TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, NewFValue, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_expireTime'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_expireTime'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_expireTime'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17, _,
						 F@_19, F@_20, F@_21, F@_22,
						 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, NewFValue,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_rate'(<<0:16, 128,
					     127, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id(infinity, TrUserData),
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_rate'(<<0:16, 128,
					     255, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id('-infinity',
							TrUserData),
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_rate'(<<_:16, 1:1,
					     _:7, _:1, 127:7, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id(nan, TrUserData), F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_rate'(<<Value:32/little-float,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id(Value, TrUserData),
						     F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, _, F@_21,
						      F@_22, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     NewFValue, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11, F@_12,
							   F@_13, F@_14, F@_15,
							   F@_16, F@_17, F@_18,
							   F@_19, F@_20, F@_21,
							   F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20, _,
						       F@_22, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, NewFValue, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15, F@_16,
							      F@_17, F@_18,
							      F@_19, F@_20,
							      F@_21, F@_22,
							      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  F@_5, F@_6,
								  F@_7, F@_8,
								  F@_9, F@_10,
								  F@_11, F@_12,
								  F@_13, F@_14,
								  F@_15, F@_16,
								  F@_17, F@_18,
								  F@_19, F@_20,
								  F@_21, F@_22,
								  TrUserData);
'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15, F@_16,
							      F@_17, F@_18,
							      F@_19, F@_20,
							      F@_21, Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21,
						     cons(NewFValue, Prev,
							  TrUserData),
						     TrUserData).

'skip_varint_ProtobufBroker.PrivateOrder'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, TrUserData) ->
    'skip_varint_ProtobufBroker.PrivateOrder'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, TrUserData);
'skip_varint_ProtobufBroker.PrivateOrder'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_length_delimited_ProtobufBroker.PrivateOrder'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivateOrder'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13, F@_14,
							F@_15, F@_16, F@_17,
							F@_18, F@_19, F@_20,
							F@_21, F@_22,
							TrUserData);
'skip_length_delimited_ProtobufBroker.PrivateOrder'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_group_ProtobufBroker.PrivateOrder'(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					 F@_13, F@_14, F@_15, F@_16, F@_17,
					 F@_18, F@_19, F@_20, F@_21, F@_22,
					 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_32_ProtobufBroker.PrivateOrder'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				      F@_18, F@_19, F@_20, F@_21, F@_22,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_64_ProtobufBroker.PrivateOrder'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				      F@_18, F@_19, F@_20, F@_21, F@_22,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'decode_msg_ProtobufBroker.PrivateTrade'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Bin, 0,
						     0, id([], TrUserData),
						     id([], TrUserData),
						     id(0, TrUserData),
						     id(0, TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id(0, TrUserData),
						     id(0, TrUserData),
						     TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<58,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_externalId'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<66,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_orderId'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<16,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_time'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<48,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_timeMillis'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<29,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_price'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<74,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_priceString'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<37,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_amount'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<82,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_amountString'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<40,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_side'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_id'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10,
					     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, _) ->
    #'ProtobufBroker.PrivateTrade'{externalId = F@_1,
				   orderId = F@_2, time = F@_3,
				   timeMillis = F@_4, price = F@_5,
				   priceString = F@_6, amount = F@_7,
				   amountString = F@_8, side = F@_9,
				   id = F@_10};
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Other,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivateTrade'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10,
						    TrUserData).

'dg_read_field_def_ProtobufBroker.PrivateTrade'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, TrUserData);
'dg_read_field_def_ProtobufBroker.PrivateTrade'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      58 ->
	  'd_field_ProtobufBroker.PrivateTrade_externalId'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData);
      66 ->
	  'd_field_ProtobufBroker.PrivateTrade_orderId'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivateTrade_time'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, TrUserData);
      48 ->
	  'd_field_ProtobufBroker.PrivateTrade_timeMillis'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData);
      29 ->
	  'd_field_ProtobufBroker.PrivateTrade_price'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, TrUserData);
      74 ->
	  'd_field_ProtobufBroker.PrivateTrade_priceString'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData);
      37 ->
	  'd_field_ProtobufBroker.PrivateTrade_amount'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, TrUserData);
      82 ->
	  'd_field_ProtobufBroker.PrivateTrade_amountString'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10,
							     TrUserData);
      40 ->
	  'd_field_ProtobufBroker.PrivateTrade_side'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, TrUserData);
      8 ->
	  'd_field_ProtobufBroker.PrivateTrade_id'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivateTrade'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivateTrade'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivateTrade'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivateTrade'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3, F@_4, F@_5,
							 F@_6, F@_7, F@_8, F@_9,
							 F@_10, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivateTrade'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivateTrade'(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, F@_8, F@_9, F@_10,
						_) ->
    #'ProtobufBroker.PrivateTrade'{externalId = F@_1,
				   orderId = F@_2, time = F@_3,
				   timeMillis = F@_4, price = F@_5,
				   priceString = F@_6, amount = F@_7,
				   amountString = F@_8, side = F@_9,
				   id = F@_10}.

'd_field_ProtobufBroker.PrivateTrade_externalId'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_externalId'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_externalId'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_orderId'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_orderId'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  TrUserData);
'd_field_ProtobufBroker.PrivateTrade_orderId'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_time'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10,
					   TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_time'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_time'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData).

'd_field_ProtobufBroker.PrivateTrade_timeMillis'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_timeMillis'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_timeMillis'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     NewFValue, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_price'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4,
						     id(infinity, TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_price'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4,
						     id('-infinity',
							TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_price'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, id(nan, TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_price'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4,
						     id(Value, TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData).

'd_field_ProtobufBroker.PrivateTrade_priceString'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_priceString'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_priceString'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, _, F@_7, F@_8,
						  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, NewFValue,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_amount'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id(infinity, TrUserData),
						     F@_8, F@_9, F@_10,
						     TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amount'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id('-infinity',
							TrUserData),
						     F@_8, F@_9, F@_10,
						     TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amount'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id(nan, TrUserData), F@_8,
						     F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amount'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id(Value, TrUserData),
						     F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_amountString'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_amountString'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amountString'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, _,
						   F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     NewFValue, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_side'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10,
					   TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_side'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_side'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, _, F@_10,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, NewFValue, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_id'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10,
					 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_id'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_id'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, _,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, NewFValue,
						     TrUserData).

'skip_varint_ProtobufBroker.PrivateTrade'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData) ->
    'skip_varint_ProtobufBroker.PrivateTrade'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      TrUserData);
'skip_varint_ProtobufBroker.PrivateTrade'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_length_delimited_ProtobufBroker.PrivateTrade'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivateTrade'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10,
							TrUserData);
'skip_length_delimited_ProtobufBroker.PrivateTrade'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_group_ProtobufBroker.PrivateTrade'(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_32_ProtobufBroker.PrivateTrade'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_64_ProtobufBroker.PrivateTrade'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'decode_msg_ProtobufBroker.PrivatePosition'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Bin,
							0, 0,
							id([], TrUserData),
							id(0, TrUserData),
							id(0, TrUserData),
							id(0.0, TrUserData),
							id([], TrUserData),
							id(0.0, TrUserData),
							id(0.0, TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_id'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<16,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_time'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<24,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_side'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<37,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_avgPrice'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<74,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<45,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountOpen'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<53,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountClosed'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<82,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11,
							      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<90,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<58,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<66,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, R1, R2,
						    TrUserData) ->
    #'ProtobufBroker.PrivatePosition'{id = F@_1,
				      time = F@_2, side = F@_3, avgPrice = F@_4,
				      avgPriceString = F@_5, amountOpen = F@_6,
				      amountClosed = F@_7,
				      amountOpenString = F@_8,
				      amountClosedString = F@_9,
				      orderIds = lists_reverse(R1, TrUserData),
				      tradeIds = lists_reverse(R2, TrUserData)};
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivatePosition'(Other,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       TrUserData).

'dg_read_field_def_ProtobufBroker.PrivatePosition'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       TrUserData);
'dg_read_field_def_ProtobufBroker.PrivatePosition'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PrivatePosition_id'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivatePosition_time'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
      24 ->
	  'd_field_ProtobufBroker.PrivatePosition_side'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
      37 ->
	  'd_field_ProtobufBroker.PrivatePosition_avgPrice'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
      74 ->
	  'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  TrUserData);
      45 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountOpen'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11,
							      TrUserData);
      53 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountClosed'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								TrUserData);
      82 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    F@_11,
								    TrUserData);
      90 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      F@_9,
								      F@_10,
								      F@_11,
								      TrUserData);
      58 ->
	  'd_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
      66 ->
	  'd_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivatePosition'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivatePosition'(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10, F@_11,
							 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivatePosition'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       F@_7,
								       F@_8,
								       F@_9,
								       F@_10,
								       F@_11,
								       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivatePosition'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivatePosition'(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10, F@_11,
							 TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivatePosition'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   R1, R2, TrUserData) ->
    #'ProtobufBroker.PrivatePosition'{id = F@_1,
				      time = F@_2, side = F@_3, avgPrice = F@_4,
				      avgPriceString = F@_5, amountOpen = F@_6,
				      amountClosed = F@_7,
				      amountOpenString = F@_8,
				      amountClosedString = F@_9,
				      orderIds = lists_reverse(R1, TrUserData),
				      tradeIds = lists_reverse(R2, TrUserData)}.

'd_field_ProtobufBroker.PrivatePosition_id'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_id'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_id'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, NewFValue, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_time'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_time'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_time'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, NewFValue,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_side'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_side'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_side'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2,
							NewFValue, F@_4, F@_5,
							F@_6, F@_7, F@_8, F@_9,
							F@_10, F@_11,
							TrUserData).

'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id(infinity,
							   TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id('-infinity',
							   TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id(nan, TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id(Value, TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData).

'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, _, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, NewFValue, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<0:16,
						      128, 127, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id(infinity,
							   TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<0:16,
						      128, 255, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id('-infinity',
							   TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<_:16,
						      1:1, _:7, _:1, 127:7,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id(nan, TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<Value:32/little-float,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id(Value, TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<0:16,
							128, 127, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id(infinity,
							   TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<0:16,
							128, 255, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id('-infinity',
							   TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<_:16,
							1:1, _:7, _:1, 127:7,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id(nan, TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<Value:32/little-float,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id(Value, TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, F@_8, F@_9,
							      F@_10, F@_11,
							      TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, _, F@_9,
							  F@_10, F@_11,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							NewFValue, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								F@_5, F@_6,
								F@_7, F@_8,
								F@_9, F@_10,
								F@_11,
								TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8, _,
							    F@_10, F@_11,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, NewFValue, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_orderIds'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
'd_field_ProtobufBroker.PrivatePosition_orderIds'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, Prev, F@_11,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9,
							cons(NewFValue, Prev,
							     TrUserData),
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_tradeIds'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
'd_field_ProtobufBroker.PrivatePosition_tradeIds'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, Prev,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							cons(NewFValue, Prev,
							     TrUserData),
							TrUserData).

'skip_varint_ProtobufBroker.PrivatePosition'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData) ->
    'skip_varint_ProtobufBroker.PrivatePosition'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, TrUserData);
'skip_varint_ProtobufBroker.PrivatePosition'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_length_delimited_ProtobufBroker.PrivatePosition'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivatePosition'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11,
							   TrUserData);
'skip_length_delimited_ProtobufBroker.PrivatePosition'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest2,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_group_ProtobufBroker.PrivatePosition'(Bin, FNum,
					    Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							0, Z2, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_32_ProtobufBroker.PrivatePosition'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_64_ProtobufBroker.PrivatePosition'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'decode_msg_ProtobufBroker.Balance'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Bin, 0, 0,
						id([], TrUserData),
						id(0.0, TrUserData),
						id([], TrUserData), TrUserData).

'dfp_read_field_def_ProtobufBroker.Balance'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufBroker.Balance_currency'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balance'(<<21,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufBroker.Balance_amount'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balance'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufBroker.Balance_amountString'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'dfp_read_field_def_ProtobufBroker.Balance'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'ProtobufBroker.Balance'{currency = F@_1,
			      amount = F@_2, amountString = F@_3};
'dfp_read_field_def_ProtobufBroker.Balance'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.Balance'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_ProtobufBroker.Balance'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.Balance'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_ProtobufBroker.Balance'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.Balance_currency'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      21 ->
	  'd_field_ProtobufBroker.Balance_amount'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      26 ->
	  'd_field_ProtobufBroker.Balance_amountString'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.Balance'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.Balance'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.Balance'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.Balance'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.Balance'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.Balance'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'ProtobufBroker.Balance'{currency = F@_1,
			      amount = F@_2, amountString = F@_3}.

'd_field_ProtobufBroker.Balance_currency'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balance_currency'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
'd_field_ProtobufBroker.Balance_currency'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.Balance'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_ProtobufBroker.Balance_amount'(<<0:16, 128,
					  127, Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1,
						id(infinity, TrUserData), F@_3,
						TrUserData);
'd_field_ProtobufBroker.Balance_amount'(<<0:16, 128,
					  255, Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1,
						id('-infinity', TrUserData),
						F@_3, TrUserData);
'd_field_ProtobufBroker.Balance_amount'(<<_:16, 1:1,
					  _:7, _:1, 127:7, Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, id(nan, TrUserData),
						F@_3, TrUserData);
'd_field_ProtobufBroker.Balance_amount'(<<Value:32/little-float,
					  Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, id(Value, TrUserData),
						F@_3, TrUserData).

'd_field_ProtobufBroker.Balance_amountString'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balance_amountString'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'd_field_ProtobufBroker.Balance_amountString'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.Balance'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_ProtobufBroker.Balance'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_ProtobufBroker.Balance'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_ProtobufBroker.Balance'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_ProtobufBroker.Balance'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.Balance'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_ProtobufBroker.Balance'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_ProtobufBroker.Balance'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_ProtobufBroker.Balance'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_ProtobufBroker.Balance'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'decode_msg_ProtobufBroker.Balances'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Bin, 0, 0,
						 id('Spot', TrUserData),
						 id([], TrUserData),
						 TrUserData).

'dfp_read_field_def_ProtobufBroker.Balances'(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_ProtobufBroker.Balances_fundingType'(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balances'(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_ProtobufBroker.Balances_balances'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balances'(<<>>, 0, 0,
					     F@_1, R1, TrUserData) ->
    #'ProtobufBroker.Balances'{fundingType = F@_1,
			       balances = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufBroker.Balances'(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.Balances'(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_ProtobufBroker.Balances'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.Balances'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'dg_read_field_def_ProtobufBroker.Balances'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufBroker.Balances_fundingType'(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      18 ->
	  'd_field_ProtobufBroker.Balances_balances'(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.Balances'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.Balances'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.Balances'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.Balances'(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.Balances'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.Balances'(<<>>, 0, 0,
					    F@_1, R1, TrUserData) ->
    #'ProtobufBroker.Balances'{fundingType = F@_1,
			       balances = lists_reverse(R1, TrUserData)}.

'd_field_ProtobufBroker.Balances_fundingType'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balances_fundingType'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
'd_field_ProtobufBroker.Balances_fundingType'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.FundingType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.Balances'(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

'd_field_ProtobufBroker.Balances_balances'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balances_balances'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'd_field_ProtobufBroker.Balances_balances'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.Balance'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.Balances'(RestF, 0,
						 0, F@_1,
						 cons(NewFValue, Prev,
						      TrUserData),
						 TrUserData).

'skip_varint_ProtobufBroker.Balances'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_ProtobufBroker.Balances'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
'skip_varint_ProtobufBroker.Balances'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_ProtobufBroker.Balances'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.Balances'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'skip_length_delimited_ProtobufBroker.Balances'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

'skip_group_ProtobufBroker.Balances'(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

'skip_32_ProtobufBroker.Balances'(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_64_ProtobufBroker.Balances'(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'd_enum_ProtobufBroker.FundingType'(0) -> 'Spot';
'd_enum_ProtobufBroker.FundingType'(1) -> 'Margin';
'd_enum_ProtobufBroker.FundingType'(V) -> V.

'd_enum_ProtobufBroker.PrivateOrder.Type'(0) ->
    'Market';
'd_enum_ProtobufBroker.PrivateOrder.Type'(1) -> 'Limit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(2) ->
    'StopLoss';
'd_enum_ProtobufBroker.PrivateOrder.Type'(3) ->
    'StopLossLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(4) ->
    'TakeProfit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(5) ->
    'TakeProfitLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(6) ->
    'StopLossTakeProfit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(7) ->
    'StopLossTakeProfitLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(8) ->
    'TrailingStopLoss';
'd_enum_ProtobufBroker.PrivateOrder.Type'(9) ->
    'TrailingStopLossLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(10) ->
    'StopLossAndLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(11) ->
    'FillOrKill';
'd_enum_ProtobufBroker.PrivateOrder.Type'(12) ->
    'SettlePosition';
'd_enum_ProtobufBroker.PrivateOrder.Type'(V) -> V.

'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(0) ->
    'AbsoluteValue';
'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(1) ->
    'OffsetValue';
'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(2) ->
    'PrecentageOffsetValue';
'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(V) ->
    V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufBroker.PrivateOrder.PriceParam' ->
	  'merge_msg_ProtobufBroker.PrivateOrder.PriceParam'(Prev,
							     New, TrUserData);
      'ProtobufBroker.PrivateOrder' ->
	  'merge_msg_ProtobufBroker.PrivateOrder'(Prev, New,
						  TrUserData);
      'ProtobufBroker.PrivateTrade' ->
	  'merge_msg_ProtobufBroker.PrivateTrade'(Prev, New,
						  TrUserData);
      'ProtobufBroker.PrivatePosition' ->
	  'merge_msg_ProtobufBroker.PrivatePosition'(Prev, New,
						     TrUserData);
      'ProtobufBroker.Balance' ->
	  'merge_msg_ProtobufBroker.Balance'(Prev, New,
					     TrUserData);
      'ProtobufBroker.Balances' ->
	  'merge_msg_ProtobufBroker.Balances'(Prev, New,
					      TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivateOrder.PriceParam'/3}).
'merge_msg_ProtobufBroker.PrivateOrder.PriceParam'(#'ProtobufBroker.PrivateOrder.PriceParam'{value
												 =
												 PFvalue,
											     valueString
												 =
												 PFvalueString,
											     type
												 =
												 PFtype},
						   #'ProtobufBroker.PrivateOrder.PriceParam'{value
												 =
												 NFvalue,
											     valueString
												 =
												 NFvalueString,
											     type
												 =
												 NFtype},
						   _) ->
    #'ProtobufBroker.PrivateOrder.PriceParam'{value =
						  if NFvalue =:= undefined ->
							 PFvalue;
						     true -> NFvalue
						  end,
					      valueString =
						  if NFvalueString =:=
						       undefined ->
							 PFvalueString;
						     true -> NFvalueString
						  end,
					      type =
						  if NFtype =:= undefined ->
							 PFtype;
						     true -> NFtype
						  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivateOrder'/3}).
'merge_msg_ProtobufBroker.PrivateOrder'(#'ProtobufBroker.PrivateOrder'{id
									   =
									   PFid,
								       time =
									   PFtime,
								       price =
									   PFprice,
								       amount =
									   PFamount,
								       side =
									   PFside,
								       type =
									   PFtype,
								       fundingType
									   =
									   PFfundingType,
								       priceParams
									   =
									   PFpriceParams,
								       amountParam
									   =
									   PFamountParam,
								       amountParamString
									   =
									   PFamountParamString,
								       amountFilledString
									   =
									   PFamountFilledString,
								       leverage
									   =
									   PFleverage,
								       currentStop
									   =
									   PFcurrentStop,
								       initialStop
									   =
									   PFinitialStop,
								       currentStopString
									   =
									   PFcurrentStopString,
								       initialStopString
									   =
									   PFinitialStopString,
								       startTime
									   =
									   PFstartTime,
								       expireTime
									   =
									   PFexpireTime,
								       rate =
									   PFrate,
								       hasClosingOrder
									   =
									   PFhasClosingOrder,
								       closingOrderType
									   =
									   PFclosingOrderType,
								       closingOrderPriceParams
									   =
									   PFclosingOrderPriceParams},
					#'ProtobufBroker.PrivateOrder'{id =
									   NFid,
								       time =
									   NFtime,
								       price =
									   NFprice,
								       amount =
									   NFamount,
								       side =
									   NFside,
								       type =
									   NFtype,
								       fundingType
									   =
									   NFfundingType,
								       priceParams
									   =
									   NFpriceParams,
								       amountParam
									   =
									   NFamountParam,
								       amountParamString
									   =
									   NFamountParamString,
								       amountFilledString
									   =
									   NFamountFilledString,
								       leverage
									   =
									   NFleverage,
								       currentStop
									   =
									   NFcurrentStop,
								       initialStop
									   =
									   NFinitialStop,
								       currentStopString
									   =
									   NFcurrentStopString,
								       initialStopString
									   =
									   NFinitialStopString,
								       startTime
									   =
									   NFstartTime,
								       expireTime
									   =
									   NFexpireTime,
								       rate =
									   NFrate,
								       hasClosingOrder
									   =
									   NFhasClosingOrder,
								       closingOrderType
									   =
									   NFclosingOrderType,
								       closingOrderPriceParams
									   =
									   NFclosingOrderPriceParams},
					TrUserData) ->
    #'ProtobufBroker.PrivateOrder'{id =
				       if NFid =:= undefined -> PFid;
					  true -> NFid
				       end,
				   time =
				       if NFtime =:= undefined -> PFtime;
					  true -> NFtime
				       end,
				   price =
				       if NFprice =:= undefined -> PFprice;
					  true -> NFprice
				       end,
				   amount =
				       if NFamount =:= undefined -> PFamount;
					  true -> NFamount
				       end,
				   side =
				       if NFside =:= undefined -> PFside;
					  true -> NFside
				       end,
				   type =
				       if NFtype =:= undefined -> PFtype;
					  true -> NFtype
				       end,
				   fundingType =
				       if NFfundingType =:= undefined ->
					      PFfundingType;
					  true -> NFfundingType
				       end,
				   priceParams =
				       if PFpriceParams /= undefined,
					  NFpriceParams /= undefined ->
					      'erlang_++'(PFpriceParams,
							  NFpriceParams,
							  TrUserData);
					  PFpriceParams == undefined ->
					      NFpriceParams;
					  NFpriceParams == undefined ->
					      PFpriceParams
				       end,
				   amountParam =
				       if NFamountParam =:= undefined ->
					      PFamountParam;
					  true -> NFamountParam
				       end,
				   amountParamString =
				       if NFamountParamString =:= undefined ->
					      PFamountParamString;
					  true -> NFamountParamString
				       end,
				   amountFilledString =
				       if NFamountFilledString =:= undefined ->
					      PFamountFilledString;
					  true -> NFamountFilledString
				       end,
				   leverage =
				       if NFleverage =:= undefined ->
					      PFleverage;
					  true -> NFleverage
				       end,
				   currentStop =
				       if NFcurrentStop =:= undefined ->
					      PFcurrentStop;
					  true -> NFcurrentStop
				       end,
				   initialStop =
				       if NFinitialStop =:= undefined ->
					      PFinitialStop;
					  true -> NFinitialStop
				       end,
				   currentStopString =
				       if NFcurrentStopString =:= undefined ->
					      PFcurrentStopString;
					  true -> NFcurrentStopString
				       end,
				   initialStopString =
				       if NFinitialStopString =:= undefined ->
					      PFinitialStopString;
					  true -> NFinitialStopString
				       end,
				   startTime =
				       if NFstartTime =:= undefined ->
					      PFstartTime;
					  true -> NFstartTime
				       end,
				   expireTime =
				       if NFexpireTime =:= undefined ->
					      PFexpireTime;
					  true -> NFexpireTime
				       end,
				   rate =
				       if NFrate =:= undefined -> PFrate;
					  true -> NFrate
				       end,
				   hasClosingOrder =
				       if NFhasClosingOrder =:= undefined ->
					      PFhasClosingOrder;
					  true -> NFhasClosingOrder
				       end,
				   closingOrderType =
				       if NFclosingOrderType =:= undefined ->
					      PFclosingOrderType;
					  true -> NFclosingOrderType
				       end,
				   closingOrderPriceParams =
				       if PFclosingOrderPriceParams /=
					    undefined,
					  NFclosingOrderPriceParams /=
					    undefined ->
					      'erlang_++'(PFclosingOrderPriceParams,
							  NFclosingOrderPriceParams,
							  TrUserData);
					  PFclosingOrderPriceParams ==
					    undefined ->
					      NFclosingOrderPriceParams;
					  NFclosingOrderPriceParams ==
					    undefined ->
					      PFclosingOrderPriceParams
				       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivateTrade'/3}).
'merge_msg_ProtobufBroker.PrivateTrade'(#'ProtobufBroker.PrivateTrade'{externalId
									   =
									   PFexternalId,
								       orderId =
									   PForderId,
								       time =
									   PFtime,
								       timeMillis
									   =
									   PFtimeMillis,
								       price =
									   PFprice,
								       priceString
									   =
									   PFpriceString,
								       amount =
									   PFamount,
								       amountString
									   =
									   PFamountString,
								       side =
									   PFside,
								       id =
									   PFid},
					#'ProtobufBroker.PrivateTrade'{externalId
									   =
									   NFexternalId,
								       orderId =
									   NForderId,
								       time =
									   NFtime,
								       timeMillis
									   =
									   NFtimeMillis,
								       price =
									   NFprice,
								       priceString
									   =
									   NFpriceString,
								       amount =
									   NFamount,
								       amountString
									   =
									   NFamountString,
								       side =
									   NFside,
								       id =
									   NFid},
					_) ->
    #'ProtobufBroker.PrivateTrade'{externalId =
				       if NFexternalId =:= undefined ->
					      PFexternalId;
					  true -> NFexternalId
				       end,
				   orderId =
				       if NForderId =:= undefined -> PForderId;
					  true -> NForderId
				       end,
				   time =
				       if NFtime =:= undefined -> PFtime;
					  true -> NFtime
				       end,
				   timeMillis =
				       if NFtimeMillis =:= undefined ->
					      PFtimeMillis;
					  true -> NFtimeMillis
				       end,
				   price =
				       if NFprice =:= undefined -> PFprice;
					  true -> NFprice
				       end,
				   priceString =
				       if NFpriceString =:= undefined ->
					      PFpriceString;
					  true -> NFpriceString
				       end,
				   amount =
				       if NFamount =:= undefined -> PFamount;
					  true -> NFamount
				       end,
				   amountString =
				       if NFamountString =:= undefined ->
					      PFamountString;
					  true -> NFamountString
				       end,
				   side =
				       if NFside =:= undefined -> PFside;
					  true -> NFside
				       end,
				   id =
				       if NFid =:= undefined -> PFid;
					  true -> NFid
				       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivatePosition'/3}).
'merge_msg_ProtobufBroker.PrivatePosition'(#'ProtobufBroker.PrivatePosition'{id
										 =
										 PFid,
									     time
										 =
										 PFtime,
									     side
										 =
										 PFside,
									     avgPrice
										 =
										 PFavgPrice,
									     avgPriceString
										 =
										 PFavgPriceString,
									     amountOpen
										 =
										 PFamountOpen,
									     amountClosed
										 =
										 PFamountClosed,
									     amountOpenString
										 =
										 PFamountOpenString,
									     amountClosedString
										 =
										 PFamountClosedString,
									     orderIds
										 =
										 PForderIds,
									     tradeIds
										 =
										 PFtradeIds},
					   #'ProtobufBroker.PrivatePosition'{id
										 =
										 NFid,
									     time
										 =
										 NFtime,
									     side
										 =
										 NFside,
									     avgPrice
										 =
										 NFavgPrice,
									     avgPriceString
										 =
										 NFavgPriceString,
									     amountOpen
										 =
										 NFamountOpen,
									     amountClosed
										 =
										 NFamountClosed,
									     amountOpenString
										 =
										 NFamountOpenString,
									     amountClosedString
										 =
										 NFamountClosedString,
									     orderIds
										 =
										 NForderIds,
									     tradeIds
										 =
										 NFtradeIds},
					   TrUserData) ->
    #'ProtobufBroker.PrivatePosition'{id =
					  if NFid =:= undefined -> PFid;
					     true -> NFid
					  end,
				      time =
					  if NFtime =:= undefined -> PFtime;
					     true -> NFtime
					  end,
				      side =
					  if NFside =:= undefined -> PFside;
					     true -> NFside
					  end,
				      avgPrice =
					  if NFavgPrice =:= undefined ->
						 PFavgPrice;
					     true -> NFavgPrice
					  end,
				      avgPriceString =
					  if NFavgPriceString =:= undefined ->
						 PFavgPriceString;
					     true -> NFavgPriceString
					  end,
				      amountOpen =
					  if NFamountOpen =:= undefined ->
						 PFamountOpen;
					     true -> NFamountOpen
					  end,
				      amountClosed =
					  if NFamountClosed =:= undefined ->
						 PFamountClosed;
					     true -> NFamountClosed
					  end,
				      amountOpenString =
					  if NFamountOpenString =:= undefined ->
						 PFamountOpenString;
					     true -> NFamountOpenString
					  end,
				      amountClosedString =
					  if NFamountClosedString =:=
					       undefined ->
						 PFamountClosedString;
					     true -> NFamountClosedString
					  end,
				      orderIds =
					  if PForderIds /= undefined,
					     NForderIds /= undefined ->
						 'erlang_++'(PForderIds,
							     NForderIds,
							     TrUserData);
					     PForderIds == undefined ->
						 NForderIds;
					     NForderIds == undefined ->
						 PForderIds
					  end,
				      tradeIds =
					  if PFtradeIds /= undefined,
					     NFtradeIds /= undefined ->
						 'erlang_++'(PFtradeIds,
							     NFtradeIds,
							     TrUserData);
					     PFtradeIds == undefined ->
						 NFtradeIds;
					     NFtradeIds == undefined ->
						 PFtradeIds
					  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.Balance'/3}).
'merge_msg_ProtobufBroker.Balance'(#'ProtobufBroker.Balance'{currency
								 = PFcurrency,
							     amount = PFamount,
							     amountString =
								 PFamountString},
				   #'ProtobufBroker.Balance'{currency =
								 NFcurrency,
							     amount = NFamount,
							     amountString =
								 NFamountString},
				   _) ->
    #'ProtobufBroker.Balance'{currency =
				  if NFcurrency =:= undefined -> PFcurrency;
				     true -> NFcurrency
				  end,
			      amount =
				  if NFamount =:= undefined -> PFamount;
				     true -> NFamount
				  end,
			      amountString =
				  if NFamountString =:= undefined ->
					 PFamountString;
				     true -> NFamountString
				  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.Balances'/3}).
'merge_msg_ProtobufBroker.Balances'(#'ProtobufBroker.Balances'{fundingType
								   =
								   PFfundingType,
							       balances =
								   PFbalances},
				    #'ProtobufBroker.Balances'{fundingType =
								   NFfundingType,
							       balances =
								   NFbalances},
				    TrUserData) ->
    #'ProtobufBroker.Balances'{fundingType =
				   if NFfundingType =:= undefined ->
					  PFfundingType;
				      true -> NFfundingType
				   end,
			       balances =
				   if PFbalances /= undefined,
				      NFbalances /= undefined ->
					  'erlang_++'(PFbalances, NFbalances,
						      TrUserData);
				      PFbalances == undefined -> NFbalances;
				      NFbalances == undefined -> PFbalances
				   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufBroker.PrivateOrder.PriceParam' ->
	  'v_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							 [MsgName], TrUserData);
      'ProtobufBroker.PrivateOrder' ->
	  'v_msg_ProtobufBroker.PrivateOrder'(Msg, [MsgName],
					      TrUserData);
      'ProtobufBroker.PrivateTrade' ->
	  'v_msg_ProtobufBroker.PrivateTrade'(Msg, [MsgName],
					      TrUserData);
      'ProtobufBroker.PrivatePosition' ->
	  'v_msg_ProtobufBroker.PrivatePosition'(Msg, [MsgName],
						 TrUserData);
      'ProtobufBroker.Balance' ->
	  'v_msg_ProtobufBroker.Balance'(Msg, [MsgName],
					 TrUserData);
      'ProtobufBroker.Balances' ->
	  'v_msg_ProtobufBroker.Balances'(Msg, [MsgName],
					  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivateOrder.PriceParam'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivateOrder.PriceParam'/3}).
'v_msg_ProtobufBroker.PrivateOrder.PriceParam'(#'ProtobufBroker.PrivateOrder.PriceParam'{value
											     =
											     F1,
											 valueString
											     =
											     F2,
											 type
											     =
											     F3},
					       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_float(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [valueString | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'(F3,
							       [type | Path],
							       TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PrivateOrder.PriceParam'(X, Path,
					       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivateOrder.PriceParam'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivateOrder'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivateOrder'/3}).
'v_msg_ProtobufBroker.PrivateOrder'(#'ProtobufBroker.PrivateOrder'{id
								       = F1,
								   time = F2,
								   price = F3,
								   amount = F4,
								   side = F5,
								   type = F6,
								   fundingType =
								       F7,
								   priceParams =
								       F8,
								   amountParam =
								       F9,
								   amountParamString
								       = F10,
								   amountFilledString
								       = F11,
								   leverage =
								       F12,
								   currentStop =
								       F13,
								   initialStop =
								       F14,
								   currentStopString
								       = F15,
								   initialStopString
								       = F16,
								   startTime =
								       F17,
								   expireTime =
								       F18,
								   rate = F19,
								   hasClosingOrder
								       = F20,
								   closingOrderType
								       = F21,
								   closingOrderPriceParams
								       = F22},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_float(F3, [price | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [amount | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [side | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.PrivateOrder.Type'(F6,
						     [type | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.FundingType'(F7,
					       [fundingType | Path], TrUserData)
    end,
    if is_list(F8) ->
	   _ =
	       ['v_msg_ProtobufBroker.PrivateOrder.PriceParam'(Elem,
							       [priceParams
								| Path],
							       TrUserData)
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivateOrder.PriceParam'}},
			 F8, [priceParams | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_float(F9, [amountParam | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_string(F10, [amountParamString | Path],
			 TrUserData)
    end,
    if F11 == undefined -> ok;
       true ->
	   v_type_string(F11, [amountFilledString | Path],
			 TrUserData)
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_string(F12, [leverage | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_float(F13, [currentStop | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true ->
	   v_type_float(F14, [initialStop | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true ->
	   v_type_string(F15, [currentStopString | Path],
			 TrUserData)
    end,
    if F16 == undefined -> ok;
       true ->
	   v_type_string(F16, [initialStopString | Path],
			 TrUserData)
    end,
    if F17 == undefined -> ok;
       true ->
	   v_type_int64(F17, [startTime | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true ->
	   v_type_int64(F18, [expireTime | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true -> v_type_float(F19, [rate | Path], TrUserData)
    end,
    if F20 == undefined -> ok;
       true ->
	   v_type_bool(F20, [hasClosingOrder | Path], TrUserData)
    end,
    if F21 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.PrivateOrder.Type'(F21,
						     [closingOrderType | Path],
						     TrUserData)
    end,
    if is_list(F22) ->
	   _ =
	       ['v_msg_ProtobufBroker.PrivateOrder.PriceParam'(Elem,
							       [closingOrderPriceParams
								| Path],
							       TrUserData)
		|| Elem <- F22],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivateOrder.PriceParam'}},
			 F22, [closingOrderPriceParams | Path])
    end,
    ok;
'v_msg_ProtobufBroker.PrivateOrder'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivateOrder'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivateTrade'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivateTrade'/3}).
'v_msg_ProtobufBroker.PrivateTrade'(#'ProtobufBroker.PrivateTrade'{externalId
								       = F1,
								   orderId = F2,
								   time = F3,
								   timeMillis =
								       F4,
								   price = F5,
								   priceString =
								       F6,
								   amount = F7,
								   amountString
								       = F8,
								   side = F9,
								   id = F10},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [externalId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [orderId | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [time | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [timeMillis | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_float(F5, [price | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [priceString | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [amount | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_string(F8, [amountString | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [side | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PrivateTrade'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivateTrade'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivatePosition'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivatePosition'/3}).
'v_msg_ProtobufBroker.PrivatePosition'(#'ProtobufBroker.PrivatePosition'{id
									     =
									     F1,
									 time =
									     F2,
									 side =
									     F3,
									 avgPrice
									     =
									     F4,
									 avgPriceString
									     =
									     F5,
									 amountOpen
									     =
									     F6,
									 amountClosed
									     =
									     F7,
									 amountOpenString
									     =
									     F8,
									 amountClosedString
									     =
									     F9,
									 orderIds
									     =
									     F10,
									 tradeIds
									     =
									     F11},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [side | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [avgPrice | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [avgPriceString | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_float(F6, [amountOpen | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_float(F7, [amountClosed | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_string(F8, [amountOpenString | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_string(F9, [amountClosedString | Path],
			 TrUserData)
    end,
    if is_list(F10) ->
	   _ = [v_type_string(Elem, [orderIds | Path], TrUserData)
		|| Elem <- F10],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F10,
			 [orderIds | Path])
    end,
    if is_list(F11) ->
	   _ = [v_type_string(Elem, [tradeIds | Path], TrUserData)
		|| Elem <- F11],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F11,
			 [tradeIds | Path])
    end,
    ok;
'v_msg_ProtobufBroker.PrivatePosition'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivatePosition'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.Balance'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.Balance'/3}).
'v_msg_ProtobufBroker.Balance'(#'ProtobufBroker.Balance'{currency
							     = F1,
							 amount = F2,
							 amountString = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [currency | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [amount | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [amountString | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.Balance'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufBroker.Balance'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.Balances'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.Balances'/3}).
'v_msg_ProtobufBroker.Balances'(#'ProtobufBroker.Balances'{fundingType
							       = F1,
							   balances = F2},
				Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.FundingType'(F1,
					       [fundingType | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufBroker.Balance'(Elem,
					       [balances | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.Balance'}},
			 F2, [balances | Path])
    end,
    ok;
'v_msg_ProtobufBroker.Balances'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufBroker.Balances'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufBroker.FundingType'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufBroker.FundingType'/3}).
'v_enum_ProtobufBroker.FundingType'('Spot', _Path,
				    _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.FundingType'('Margin', _Path,
				    _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.FundingType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufBroker.FundingType'(X, Path,
				    _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufBroker.FundingType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufBroker.PrivateOrder.Type'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufBroker.PrivateOrder.Type'/3}).
'v_enum_ProtobufBroker.PrivateOrder.Type'('Market',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('Limit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLoss',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfitLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfitLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLoss',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLossLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossAndLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('FillOrKill',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('SettlePosition',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'(V, Path,
					  TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufBroker.PrivateOrder.Type'(X, Path,
					  _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufBroker.PrivateOrder.Type'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'/3}).
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'('AbsoluteValue',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'('OffsetValue',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'('PrecentageOffsetValue',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'(V,
						    Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'(X,
						    Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufBroker.PrivateOrder.PriceParamType'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'ProtobufBroker.FundingType'},
      [{'Spot', 0}, {'Margin', 1}]},
     {{enum, 'ProtobufBroker.PrivateOrder.Type'},
      [{'Market', 0}, {'Limit', 1}, {'StopLoss', 2},
       {'StopLossLimit', 3}, {'TakeProfit', 4},
       {'TakeProfitLimit', 5}, {'StopLossTakeProfit', 6},
       {'StopLossTakeProfitLimit', 7}, {'TrailingStopLoss', 8},
       {'TrailingStopLossLimit', 9}, {'StopLossAndLimit', 10},
       {'FillOrKill', 11}, {'SettlePosition', 12}]},
     {{enum, 'ProtobufBroker.PrivateOrder.PriceParamType'},
      [{'AbsoluteValue', 0}, {'OffsetValue', 1},
       {'PrecentageOffsetValue', 2}]},
     {{msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
      [#field{name = value, fnum = 1, rnum = 2, type = float,
	      occurrence = optional, opts = []},
       #field{name = valueString, fnum = 3, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 4,
	      type =
		  {enum, 'ProtobufBroker.PrivateOrder.PriceParamType'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PrivateOrder'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 4, type = float,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 5, type = float,
	      occurrence = optional, opts = []},
       #field{name = side, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 6, rnum = 7,
	      type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	      occurrence = optional, opts = []},
       #field{name = fundingType, fnum = 7, rnum = 8,
	      type = {enum, 'ProtobufBroker.FundingType'},
	      occurrence = optional, opts = []},
       #field{name = priceParams, fnum = 8, rnum = 9,
	      type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	      occurrence = repeated, opts = []},
       #field{name = amountParam, fnum = 9, rnum = 10,
	      type = float, occurrence = optional, opts = []},
       #field{name = amountParamString, fnum = 16, rnum = 11,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountFilledString, fnum = 17, rnum = 12,
	      type = string, occurrence = optional, opts = []},
       #field{name = leverage, fnum = 10, rnum = 13,
	      type = string, occurrence = optional, opts = []},
       #field{name = currentStop, fnum = 11, rnum = 14,
	      type = float, occurrence = optional, opts = []},
       #field{name = initialStop, fnum = 12, rnum = 15,
	      type = float, occurrence = optional, opts = []},
       #field{name = currentStopString, fnum = 18, rnum = 16,
	      type = string, occurrence = optional, opts = []},
       #field{name = initialStopString, fnum = 19, rnum = 17,
	      type = string, occurrence = optional, opts = []},
       #field{name = startTime, fnum = 13, rnum = 18,
	      type = int64, occurrence = optional, opts = []},
       #field{name = expireTime, fnum = 14, rnum = 19,
	      type = int64, occurrence = optional, opts = []},
       #field{name = rate, fnum = 15, rnum = 20, type = float,
	      occurrence = optional, opts = []},
       #field{name = hasClosingOrder, fnum = 20, rnum = 21,
	      type = bool, occurrence = optional, opts = []},
       #field{name = closingOrderType, fnum = 21, rnum = 22,
	      type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	      occurrence = optional, opts = []},
       #field{name = closingOrderPriceParams, fnum = 22,
	      rnum = 23,
	      type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.PrivateTrade'},
      [#field{name = externalId, fnum = 7, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = orderId, fnum = 8, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 4, type = int64,
	      occurrence = optional, opts = []},
       #field{name = timeMillis, fnum = 6, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 6, type = float,
	      occurrence = optional, opts = []},
       #field{name = priceString, fnum = 9, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = amountString, fnum = 10, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = side, fnum = 5, rnum = 10, type = int32,
	      occurrence = optional, opts = []},
       #field{name = id, fnum = 1, rnum = 11, type = int64,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PrivatePosition'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = side, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = avgPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = optional, opts = []},
       #field{name = avgPriceString, fnum = 9, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountOpen, fnum = 5, rnum = 7,
	      type = float, occurrence = optional, opts = []},
       #field{name = amountClosed, fnum = 6, rnum = 8,
	      type = float, occurrence = optional, opts = []},
       #field{name = amountOpenString, fnum = 10, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountClosedString, fnum = 11, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = orderIds, fnum = 7, rnum = 11,
	      type = string, occurrence = repeated, opts = []},
       #field{name = tradeIds, fnum = 8, rnum = 12,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.Balance'},
      [#field{name = currency, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 2, rnum = 3, type = float,
	      occurrence = optional, opts = []},
       #field{name = amountString, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.Balances'},
      [#field{name = fundingType, fnum = 1, rnum = 2,
	      type = {enum, 'ProtobufBroker.FundingType'},
	      occurrence = optional, opts = []},
       #field{name = balances, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufBroker.Balance'},
	      occurrence = repeated, opts = []}]}].


get_msg_names() ->
    ['ProtobufBroker.PrivateOrder.PriceParam',
     'ProtobufBroker.PrivateOrder',
     'ProtobufBroker.PrivateTrade',
     'ProtobufBroker.PrivatePosition',
     'ProtobufBroker.Balance', 'ProtobufBroker.Balances'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ProtobufBroker.PrivateOrder.PriceParam',
     'ProtobufBroker.PrivateOrder',
     'ProtobufBroker.PrivateTrade',
     'ProtobufBroker.PrivatePosition',
     'ProtobufBroker.Balance', 'ProtobufBroker.Balances'].


get_enum_names() ->
    ['ProtobufBroker.FundingType',
     'ProtobufBroker.PrivateOrder.Type',
     'ProtobufBroker.PrivateOrder.PriceParamType'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ProtobufBroker.PrivateOrder.PriceParam') ->
    [#field{name = value, fnum = 1, rnum = 2, type = float,
	    occurrence = optional, opts = []},
     #field{name = valueString, fnum = 3, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 4,
	    type =
		{enum, 'ProtobufBroker.PrivateOrder.PriceParamType'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PrivateOrder') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 4, type = float,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 5, type = float,
	    occurrence = optional, opts = []},
     #field{name = side, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 6, rnum = 7,
	    type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	    occurrence = optional, opts = []},
     #field{name = fundingType, fnum = 7, rnum = 8,
	    type = {enum, 'ProtobufBroker.FundingType'},
	    occurrence = optional, opts = []},
     #field{name = priceParams, fnum = 8, rnum = 9,
	    type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	    occurrence = repeated, opts = []},
     #field{name = amountParam, fnum = 9, rnum = 10,
	    type = float, occurrence = optional, opts = []},
     #field{name = amountParamString, fnum = 16, rnum = 11,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountFilledString, fnum = 17, rnum = 12,
	    type = string, occurrence = optional, opts = []},
     #field{name = leverage, fnum = 10, rnum = 13,
	    type = string, occurrence = optional, opts = []},
     #field{name = currentStop, fnum = 11, rnum = 14,
	    type = float, occurrence = optional, opts = []},
     #field{name = initialStop, fnum = 12, rnum = 15,
	    type = float, occurrence = optional, opts = []},
     #field{name = currentStopString, fnum = 18, rnum = 16,
	    type = string, occurrence = optional, opts = []},
     #field{name = initialStopString, fnum = 19, rnum = 17,
	    type = string, occurrence = optional, opts = []},
     #field{name = startTime, fnum = 13, rnum = 18,
	    type = int64, occurrence = optional, opts = []},
     #field{name = expireTime, fnum = 14, rnum = 19,
	    type = int64, occurrence = optional, opts = []},
     #field{name = rate, fnum = 15, rnum = 20, type = float,
	    occurrence = optional, opts = []},
     #field{name = hasClosingOrder, fnum = 20, rnum = 21,
	    type = bool, occurrence = optional, opts = []},
     #field{name = closingOrderType, fnum = 21, rnum = 22,
	    type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	    occurrence = optional, opts = []},
     #field{name = closingOrderPriceParams, fnum = 22,
	    rnum = 23,
	    type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.PrivateTrade') ->
    [#field{name = externalId, fnum = 7, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = orderId, fnum = 8, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 4, type = int64,
	    occurrence = optional, opts = []},
     #field{name = timeMillis, fnum = 6, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 6, type = float,
	    occurrence = optional, opts = []},
     #field{name = priceString, fnum = 9, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = amountString, fnum = 10, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = side, fnum = 5, rnum = 10, type = int32,
	    occurrence = optional, opts = []},
     #field{name = id, fnum = 1, rnum = 11, type = int64,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PrivatePosition') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = side, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = avgPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = optional, opts = []},
     #field{name = avgPriceString, fnum = 9, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountOpen, fnum = 5, rnum = 7,
	    type = float, occurrence = optional, opts = []},
     #field{name = amountClosed, fnum = 6, rnum = 8,
	    type = float, occurrence = optional, opts = []},
     #field{name = amountOpenString, fnum = 10, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountClosedString, fnum = 11, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = orderIds, fnum = 7, rnum = 11,
	    type = string, occurrence = repeated, opts = []},
     #field{name = tradeIds, fnum = 8, rnum = 12,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.Balance') ->
    [#field{name = currency, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 2, rnum = 3, type = float,
	    occurrence = optional, opts = []},
     #field{name = amountString, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.Balances') ->
    [#field{name = fundingType, fnum = 1, rnum = 2,
	    type = {enum, 'ProtobufBroker.FundingType'},
	    occurrence = optional, opts = []},
     #field{name = balances, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufBroker.Balance'},
	    occurrence = repeated, opts = []}];
find_msg_def(_) -> error.


find_enum_def('ProtobufBroker.FundingType') ->
    [{'Spot', 0}, {'Margin', 1}];
find_enum_def('ProtobufBroker.PrivateOrder.Type') ->
    [{'Market', 0}, {'Limit', 1}, {'StopLoss', 2},
     {'StopLossLimit', 3}, {'TakeProfit', 4},
     {'TakeProfitLimit', 5}, {'StopLossTakeProfit', 6},
     {'StopLossTakeProfitLimit', 7}, {'TrailingStopLoss', 8},
     {'TrailingStopLossLimit', 9}, {'StopLossAndLimit', 10},
     {'FillOrKill', 11}, {'SettlePosition', 12}];
find_enum_def('ProtobufBroker.PrivateOrder.PriceParamType') ->
    [{'AbsoluteValue', 0}, {'OffsetValue', 1},
     {'PrecentageOffsetValue', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('ProtobufBroker.FundingType',
		     Value) ->
    'enum_symbol_by_value_ProtobufBroker.FundingType'(Value);
enum_symbol_by_value('ProtobufBroker.PrivateOrder.Type',
		     Value) ->
    'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(Value);
enum_symbol_by_value('ProtobufBroker.PrivateOrder.PriceParamType',
		     Value) ->
    'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(Value).


enum_value_by_symbol('ProtobufBroker.FundingType',
		     Sym) ->
    'enum_value_by_symbol_ProtobufBroker.FundingType'(Sym);
enum_value_by_symbol('ProtobufBroker.PrivateOrder.Type',
		     Sym) ->
    'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'(Sym);
enum_value_by_symbol('ProtobufBroker.PrivateOrder.PriceParamType',
		     Sym) ->
    'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'(Sym).


'enum_symbol_by_value_ProtobufBroker.FundingType'(0) ->
    'Spot';
'enum_symbol_by_value_ProtobufBroker.FundingType'(1) ->
    'Margin'.


'enum_value_by_symbol_ProtobufBroker.FundingType'('Spot') ->
    0;
'enum_value_by_symbol_ProtobufBroker.FundingType'('Margin') ->
    1.

'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(0) ->
    'Market';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(1) ->
    'Limit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(2) ->
    'StopLoss';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(3) ->
    'StopLossLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(4) ->
    'TakeProfit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(5) ->
    'TakeProfitLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(6) ->
    'StopLossTakeProfit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(7) ->
    'StopLossTakeProfitLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(8) ->
    'TrailingStopLoss';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(9) ->
    'TrailingStopLossLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(10) ->
    'StopLossAndLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(11) ->
    'FillOrKill';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(12) ->
    'SettlePosition'.


'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('Market') ->
    0;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('Limit') ->
    1;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLoss') ->
    2;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossLimit') ->
    3;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TakeProfit') ->
    4;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TakeProfitLimit') ->
    5;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfit') ->
    6;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfitLimit') ->
    7;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TrailingStopLoss') ->
    8;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TrailingStopLossLimit') ->
    9;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossAndLimit') ->
    10;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('FillOrKill') ->
    11;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('SettlePosition') ->
    12.

'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(0) ->
    'AbsoluteValue';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(1) ->
    'OffsetValue';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(2) ->
    'PrecentageOffsetValue'.


'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'('AbsoluteValue') ->
    0;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'('OffsetValue') ->
    1;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'('PrecentageOffsetValue') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ProtobufBroker.PrivateOrder.PriceParam">>) ->
    'ProtobufBroker.PrivateOrder.PriceParam';
fqbin_to_msg_name(<<"ProtobufBroker.PrivateOrder">>) ->
    'ProtobufBroker.PrivateOrder';
fqbin_to_msg_name(<<"ProtobufBroker.PrivateTrade">>) ->
    'ProtobufBroker.PrivateTrade';
fqbin_to_msg_name(<<"ProtobufBroker.PrivatePosition">>) ->
    'ProtobufBroker.PrivatePosition';
fqbin_to_msg_name(<<"ProtobufBroker.Balance">>) -> 'ProtobufBroker.Balance';
fqbin_to_msg_name(<<"ProtobufBroker.Balances">>) -> 'ProtobufBroker.Balances';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ProtobufBroker.PrivateOrder.PriceParam') ->
    <<"ProtobufBroker.PrivateOrder.PriceParam">>;
msg_name_to_fqbin('ProtobufBroker.PrivateOrder') ->
    <<"ProtobufBroker.PrivateOrder">>;
msg_name_to_fqbin('ProtobufBroker.PrivateTrade') ->
    <<"ProtobufBroker.PrivateTrade">>;
msg_name_to_fqbin('ProtobufBroker.PrivatePosition') ->
    <<"ProtobufBroker.PrivatePosition">>;
msg_name_to_fqbin('ProtobufBroker.Balance') -> <<"ProtobufBroker.Balance">>;
msg_name_to_fqbin('ProtobufBroker.Balances') -> <<"ProtobufBroker.Balances">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"ProtobufBroker.FundingType">>) ->
    'ProtobufBroker.FundingType';
fqbin_to_enum_name(<<"ProtobufBroker.PrivateOrder.Type">>) ->
    'ProtobufBroker.PrivateOrder.Type';
fqbin_to_enum_name(<<"ProtobufBroker.PrivateOrder.PriceParamType">>) ->
    'ProtobufBroker.PrivateOrder.PriceParamType';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('ProtobufBroker.FundingType') ->
    <<"ProtobufBroker.FundingType">>;
enum_name_to_fqbin('ProtobufBroker.PrivateOrder.Type') ->
    <<"ProtobufBroker.PrivateOrder.Type">>;
enum_name_to_fqbin('ProtobufBroker.PrivateOrder.PriceParamType') ->
    <<"ProtobufBroker.PrivateOrder.PriceParamType">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'ProtobufBroker'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "private.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["private.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["private"].


get_msg_containment("private") ->
    ['ProtobufBroker.Balance', 'ProtobufBroker.Balances',
     'ProtobufBroker.PrivateOrder',
     'ProtobufBroker.PrivateOrder.PriceParam',
     'ProtobufBroker.PrivatePosition',
     'ProtobufBroker.PrivateTrade'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("private") -> 'ProtobufBroker';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("private") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("private") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("private") ->
    ['ProtobufBroker.FundingType',
     'ProtobufBroker.PrivateOrder.PriceParamType',
     'ProtobufBroker.PrivateOrder.Type'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivateOrder">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.Balances">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivateTrade">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.Balance">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivateOrder.PriceParam">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivatePosition">>) -> "private";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"ProtobufBroker.PrivateOrder.Type">>) -> "private";
get_proto_by_enum_name_as_fqbin(<<"ProtobufBroker.PrivateOrder.PriceParamType">>) -> "private";
get_proto_by_enum_name_as_fqbin(<<"ProtobufBroker.FundingType">>) -> "private";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"ProtobufBroker">>) -> ["private"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.1".

gpb_version_as_list() ->
    [4,7,1].
