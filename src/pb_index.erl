%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.1
-module(pb_index).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_index.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'ProtobufMarkets.Index'() :: #'ProtobufMarkets.Index'{}.

-type 'ProtobufMarkets.IndexUpdateMessage'() :: #'ProtobufMarkets.IndexUpdateMessage'{}.

-type 'ProtobufMarkets.TickerUpdate'() :: #'ProtobufMarkets.TickerUpdate'{}.

-type 'ProtobufMarkets.Ticker'() :: #'ProtobufMarkets.Ticker'{}.

-type 'ProtobufMarkets.Market'() :: #'ProtobufMarkets.Market'{}.

-type 'ProtobufMarkets.Order'() :: #'ProtobufMarkets.Order'{}.

-type 'ProtobufMarkets.Trade'() :: #'ProtobufMarkets.Trade'{}.

-type 'ProtobufMarkets.MarketUpdateMessage'() :: #'ProtobufMarkets.MarketUpdateMessage'{}.

-type 'ProtobufMarkets.OrderBookUpdate'() :: #'ProtobufMarkets.OrderBookUpdate'{}.

-type 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'() :: #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{}.

-type 'ProtobufMarkets.OrderBookDeltaUpdate'() :: #'ProtobufMarkets.OrderBookDeltaUpdate'{}.

-type 'ProtobufMarkets.OrderBookSpreadUpdate'() :: #'ProtobufMarkets.OrderBookSpreadUpdate'{}.

-type 'ProtobufMarkets.TradesUpdate'() :: #'ProtobufMarkets.TradesUpdate'{}.

-type 'ProtobufMarkets.Interval.OHLC'() :: #'ProtobufMarkets.Interval.OHLC'{}.

-type 'ProtobufMarkets.Interval'() :: #'ProtobufMarkets.Interval'{}.

-type 'ProtobufMarkets.IntervalsUpdate'() :: #'ProtobufMarkets.IntervalsUpdate'{}.

-type 'ProtobufMarkets.SummaryUpdate'() :: #'ProtobufMarkets.SummaryUpdate'{}.

-type 'ProtobufMarkets.SparklineUpdate'() :: #'ProtobufMarkets.SparklineUpdate'{}.

-export_type(['ProtobufMarkets.Index'/0, 'ProtobufMarkets.IndexUpdateMessage'/0, 'ProtobufMarkets.TickerUpdate'/0, 'ProtobufMarkets.Ticker'/0, 'ProtobufMarkets.Market'/0, 'ProtobufMarkets.Order'/0, 'ProtobufMarkets.Trade'/0, 'ProtobufMarkets.MarketUpdateMessage'/0, 'ProtobufMarkets.OrderBookUpdate'/0, 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/0, 'ProtobufMarkets.OrderBookDeltaUpdate'/0, 'ProtobufMarkets.OrderBookSpreadUpdate'/0, 'ProtobufMarkets.TradesUpdate'/0, 'ProtobufMarkets.Interval.OHLC'/0, 'ProtobufMarkets.Interval'/0, 'ProtobufMarkets.IntervalsUpdate'/0, 'ProtobufMarkets.SummaryUpdate'/0, 'ProtobufMarkets.SparklineUpdate'/0]).

-spec encode_msg(#'ProtobufMarkets.Index'{} | #'ProtobufMarkets.IndexUpdateMessage'{} | #'ProtobufMarkets.TickerUpdate'{} | #'ProtobufMarkets.Ticker'{} | #'ProtobufMarkets.Market'{} | #'ProtobufMarkets.Order'{} | #'ProtobufMarkets.Trade'{} | #'ProtobufMarkets.MarketUpdateMessage'{} | #'ProtobufMarkets.OrderBookUpdate'{} | #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{} | #'ProtobufMarkets.OrderBookDeltaUpdate'{} | #'ProtobufMarkets.OrderBookSpreadUpdate'{} | #'ProtobufMarkets.TradesUpdate'{} | #'ProtobufMarkets.Interval.OHLC'{} | #'ProtobufMarkets.Interval'{} | #'ProtobufMarkets.IntervalsUpdate'{} | #'ProtobufMarkets.SummaryUpdate'{} | #'ProtobufMarkets.SparklineUpdate'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ProtobufMarkets.Index'{} | #'ProtobufMarkets.IndexUpdateMessage'{} | #'ProtobufMarkets.TickerUpdate'{} | #'ProtobufMarkets.Ticker'{} | #'ProtobufMarkets.Market'{} | #'ProtobufMarkets.Order'{} | #'ProtobufMarkets.Trade'{} | #'ProtobufMarkets.MarketUpdateMessage'{} | #'ProtobufMarkets.OrderBookUpdate'{} | #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{} | #'ProtobufMarkets.OrderBookDeltaUpdate'{} | #'ProtobufMarkets.OrderBookSpreadUpdate'{} | #'ProtobufMarkets.TradesUpdate'{} | #'ProtobufMarkets.Interval.OHLC'{} | #'ProtobufMarkets.Interval'{} | #'ProtobufMarkets.IntervalsUpdate'{} | #'ProtobufMarkets.SummaryUpdate'{} | #'ProtobufMarkets.SparklineUpdate'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ProtobufMarkets.Index'{} | #'ProtobufMarkets.IndexUpdateMessage'{} | #'ProtobufMarkets.TickerUpdate'{} | #'ProtobufMarkets.Ticker'{} | #'ProtobufMarkets.Market'{} | #'ProtobufMarkets.Order'{} | #'ProtobufMarkets.Trade'{} | #'ProtobufMarkets.MarketUpdateMessage'{} | #'ProtobufMarkets.OrderBookUpdate'{} | #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{} | #'ProtobufMarkets.OrderBookDeltaUpdate'{} | #'ProtobufMarkets.OrderBookSpreadUpdate'{} | #'ProtobufMarkets.TradesUpdate'{} | #'ProtobufMarkets.Interval.OHLC'{} | #'ProtobufMarkets.Interval'{} | #'ProtobufMarkets.IntervalsUpdate'{} | #'ProtobufMarkets.SummaryUpdate'{} | #'ProtobufMarkets.SparklineUpdate'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufMarkets.Index' ->
	  'encode_msg_ProtobufMarkets.Index'(id(Msg, TrUserData),
					     TrUserData);
      'ProtobufMarkets.IndexUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.IndexUpdateMessage'(id(Msg,
							     TrUserData),
							  TrUserData);
      'ProtobufMarkets.TickerUpdate' ->
	  'encode_msg_ProtobufMarkets.TickerUpdate'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufMarkets.Ticker' ->
	  'encode_msg_ProtobufMarkets.Ticker'(id(Msg, TrUserData),
					      TrUserData);
      'ProtobufMarkets.Market' ->
	  'encode_msg_ProtobufMarkets.Market'(id(Msg, TrUserData),
					      TrUserData);
      'ProtobufMarkets.Order' ->
	  'encode_msg_ProtobufMarkets.Order'(id(Msg, TrUserData),
					     TrUserData);
      'ProtobufMarkets.Trade' ->
	  'encode_msg_ProtobufMarkets.Trade'(id(Msg, TrUserData),
					     TrUserData);
      'ProtobufMarkets.MarketUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.MarketUpdateMessage'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufMarkets.OrderBookUpdate' ->
	  'encode_msg_ProtobufMarkets.OrderBookUpdate'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas' ->
	  'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(id(Msg,
									   TrUserData),
									TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate' ->
	  'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(id(Msg,
							       TrUserData),
							    TrUserData);
      'ProtobufMarkets.OrderBookSpreadUpdate' ->
	  'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(id(Msg,
								TrUserData),
							     TrUserData);
      'ProtobufMarkets.TradesUpdate' ->
	  'encode_msg_ProtobufMarkets.TradesUpdate'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufMarkets.Interval.OHLC' ->
	  'encode_msg_ProtobufMarkets.Interval.OHLC'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufMarkets.Interval' ->
	  'encode_msg_ProtobufMarkets.Interval'(id(Msg,
						   TrUserData),
						TrUserData);
      'ProtobufMarkets.IntervalsUpdate' ->
	  'encode_msg_ProtobufMarkets.IntervalsUpdate'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufMarkets.SummaryUpdate' ->
	  'encode_msg_ProtobufMarkets.SummaryUpdate'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufMarkets.SparklineUpdate' ->
	  'encode_msg_ProtobufMarkets.SparklineUpdate'(id(Msg,
							  TrUserData),
						       TrUserData)
    end.


'encode_msg_ProtobufMarkets.Index'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Index'(Msg, <<>>,
				       TrUserData).


'encode_msg_ProtobufMarkets.Index'(#'ProtobufMarkets.Index'{id
								= F1,
							    symbol = F2,
							    indexType = F3,
							    cwIndex = F4,
							    exchangeId = F5,
							    instrumentId = F6},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= 0 -> B5;
		true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
						TrUserData) ->
    'encode_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
						    <<>>, TrUserData).


'encode_msg_ProtobufMarkets.IndexUpdateMessage'(#'ProtobufMarkets.IndexUpdateMessage'{index
											  =
											  F1,
										      'Update'
											  =
											  F2},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufMarkets.IndexUpdateMessage_index'(TrF1,
									     <<Bin/binary,
									       10>>,
									     TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {tickerUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(TrTF2,
									      <<B1/binary,
										18>>,
									      TrUserData)
		 end;
	     {intervalsUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(TrTF2,
										 <<B1/binary,
										   26>>,
										 TrUserData)
		 end;
	     {summaryUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(TrTF2,
									       <<B1/binary,
										 34>>,
									       TrUserData)
		 end;
	     {sparklineUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(TrTF2,
										 <<B1/binary,
										   42>>,
										 TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.TickerUpdate'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufMarkets.TickerUpdate'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufMarkets.TickerUpdate'(#'ProtobufMarkets.TickerUpdate'{tickers
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufMarkets.TickerUpdate_tickers'(TrF1,
							    Bin, TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.Ticker'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Ticker'(Msg, <<>>,
					TrUserData).


'encode_msg_ProtobufMarkets.Ticker'(#'ProtobufMarkets.Ticker'{value
								  = F1,
							      timestamp = F2,
							      timestampNano =
								  F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true ->
		    e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Market'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Market'(Msg, <<>>,
					TrUserData).


'encode_msg_ProtobufMarkets.Market'(#'ProtobufMarkets.Market'{exchangeId
								  = F1,
							      currencyPairId =
								  F2,
							      marketId = F3,
							      exchange = F4,
							      currencyPair =
								  F5},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false ->
		   e_type_string(TrF5, <<B4/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Order'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
				       TrUserData).


'encode_msg_ProtobufMarkets.Order'(#'ProtobufMarkets.Order'{priceStr
								= F1,
							    amountStr = F2,
							    price = F3,
							    amount = F4},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0.0 -> B2;
		     true ->
			 e_type_float(TrF3, <<B2/binary, 13>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0.0 -> B3;
		true ->
		    e_type_float(TrF4, <<B3/binary, 21>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Trade'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Trade'(Msg, <<>>,
				       TrUserData).


'encode_msg_ProtobufMarkets.Trade'(#'ProtobufMarkets.Trade'{externalId
								= F1,
							    timestamp = F2,
							    timestampMillis =
								F3,
							    timestampNano = F4,
							    priceStr = F5,
							    amountStr = F6,
							    price = F7,
							    amount = F8,
							    priceDouble = F9,
							    amountDouble = F10,
							    id = F11},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 90>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 80>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0.0 -> B7;
		     true ->
			 e_type_float(TrF8, <<B7/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_double(TrF9, <<B8/binary, 49>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0.0 -> B9;
		      true ->
			  e_type_double(TrF10, <<B9/binary, 57>>, TrUserData)
		   end
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     if TrF11 =:= 0 -> B10;
		true ->
		    e_type_int64(TrF11, <<B10/binary, 8>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufMarkets.MarketUpdateMessage'(#'ProtobufMarkets.MarketUpdateMessage'{market
											    =
											    F1,
											'Update'
											    =
											    F2},
						 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufMarkets.MarketUpdateMessage_market'(TrF1,
									       <<Bin/binary,
										 74>>,
									       TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {orderBookUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(TrTF2,
										  <<B1/binary,
										    18>>,
										  TrUserData)
		 end;
	     {orderBookDeltaUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(TrTF2,
										       <<B1/binary,
											 26>>,
										       TrUserData)
		 end;
	     {orderBookSpreadUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(TrTF2,
											<<B1/binary,
											  90>>,
											TrUserData)
		 end;
	     {tradesUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(TrTF2,
									       <<B1/binary,
										 34>>,
									       TrUserData)
		 end;
	     {intervalsUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(TrTF2,
										  <<B1/binary,
										    42>>,
										  TrUserData)
		 end;
	     {summaryUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(TrTF2,
										<<B1/binary,
										  50>>,
										TrUserData)
		 end;
	     {sparklineUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(TrTF2,
										  <<B1/binary,
										    58>>,
										  TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.OrderBookUpdate'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookUpdate'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufMarkets.OrderBookUpdate'(#'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
										    =
										    F1,
										seqNum
										    =
										    F2,
										bids
										    =
										    F3,
										asks
										    =
										    F4,
										aggregationModulus
										    =
										    F5},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookUpdate_bids'(TrF3, B2,
								 TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookUpdate_asks'(TrF4, B3,
								 TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0.0 -> B4;
		true ->
		    e_type_float(TrF5, <<B4/binary, 29>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
							      TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								  <<>>,
								  TrUserData).


'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(#'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														      =
														      F1,
														  delta
														      =
														      F2,
														  remove
														      =
														      F3,
														  removeStr
														      =
														      F4},
							      Bin,
							      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(TrF1,
										 Bin,
										 TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(TrF2,
										   B1,
										   TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(TrF3,
										    B2,
										    TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(TrF4,
										  B3,
										  TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
						  TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
						      <<>>, TrUserData).


'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(#'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											      =
											      F1,
											  aggregationModulusStr
											      =
											      F2,
											  seqNum
											      =
											      F3,
											  bids
											      =
											      F4,
											  asks
											      =
											      F5},
						  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0.0 -> Bin;
		     true ->
			 e_type_float(TrF1, <<Bin/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_bids'(TrF4,
									      <<B3/binary,
										10>>,
									      TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= undefined -> B4;
		true ->
		    'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_asks'(TrF5,
									 <<B4/binary,
									   18>>,
									 TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
						   TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
						       <<>>, TrUserData).


'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(#'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
												=
												F1,
											    bid
												=
												F2,
											    ask
												=
												F3},
						   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_bid'(TrF2,
									      <<B1/binary,
										18>>,
									      TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_ask'(TrF3,
									 <<B2/binary,
									   26>>,
									 TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.TradesUpdate'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufMarkets.TradesUpdate'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufMarkets.TradesUpdate'(#'ProtobufMarkets.TradesUpdate'{trades
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufMarkets.TradesUpdate_trades'(TrF1, Bin,
							   TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.Interval.OHLC'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufMarkets.Interval.OHLC'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufMarkets.Interval.OHLC'(#'ProtobufMarkets.Interval.OHLC'{openStr
										=
										F1,
									    highStr
										=
										F2,
									    lowStr
										=
										F3,
									    closeStr
										=
										F4,
									    open
										=
										F5,
									    high
										=
										F6,
									    low
										=
										F7,
									    close
										=
										F8},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 50>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0.0 -> B4;
		     true ->
			 e_type_float(TrF5, <<B4/binary, 13>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_float(TrF6, <<B5/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 29>>, TrUserData)
		  end
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     if TrF8 =:= 0.0 -> B7;
		true ->
		    e_type_float(TrF8, <<B7/binary, 37>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Interval'(Msg,
				      TrUserData) ->
    'encode_msg_ProtobufMarkets.Interval'(Msg, <<>>,
					  TrUserData).


'encode_msg_ProtobufMarkets.Interval'(#'ProtobufMarkets.Interval'{closetime
								      = F1,
								  period = F2,
								  ohlc = F3,
								  volumeBaseStr
								      = F4,
								  volumeQuoteStr
								      = F5,
								  volumeBase =
								      F6,
								  volumeQuote =
								      F7},
				      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 'e_mfield_ProtobufMarkets.Interval_ohlc'(TrF3,
								  <<B2/binary,
								    18>>,
								  TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 50>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_float(TrF6, <<B5/binary, 29>>, TrUserData)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= 0.0 -> B6;
		true ->
		    e_type_float(TrF7, <<B6/binary, 45>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufMarkets.IntervalsUpdate'(#'ProtobufMarkets.IntervalsUpdate'{intervals
										    =
										    F1},
					     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufMarkets.IntervalsUpdate_intervals'(TrF1,
								 Bin,
								 TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufMarkets.SummaryUpdate'(#'ProtobufMarkets.SummaryUpdate'{lastStr
										=
										F1,
									    highStr
										=
										F2,
									    lowStr
										=
										F3,
									    volumeBaseStr
										=
										F4,
									    volumeQuoteStr
										=
										F5,
									    changeAbsoluteStr
										=
										F6,
									    changePercentStr
										=
										F7,
									    numTrades
										=
										F8,
									    last
										=
										F9,
									    high
										=
										F10,
									    low
										=
										F11,
									    volumeBase
										=
										F12,
									    volumeQuote
										=
										F13,
									    changeAbsolute
										=
										F14,
									    changePercent
										=
										F15},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 82>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 90>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 98>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 106>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 114>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 122>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  case is_empty_string(TrF7) of
		    true -> B6;
		    false ->
			e_type_string(TrF7, <<B6/binary, 130, 1>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true ->
			 e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_float(TrF9, <<B8/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0.0 -> B9;
		      true ->
			  e_type_float(TrF10, <<B9/binary, 29>>, TrUserData)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= 0.0 -> B10;
		      true ->
			  e_type_float(TrF11, <<B10/binary, 37>>, TrUserData)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= 0.0 -> B11;
		      true ->
			  e_type_float(TrF12, <<B11/binary, 45>>, TrUserData)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0.0 -> B12;
		      true ->
			  e_type_float(TrF13, <<B12/binary, 77>>, TrUserData)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= 0.0 -> B13;
		      true ->
			  e_type_float(TrF14, <<B13/binary, 53>>, TrUserData)
		   end
		 end
	  end,
    if F15 == undefined -> B14;
       true ->
	   begin
	     TrF15 = id(F15, TrUserData),
	     if TrF15 =:= 0.0 -> B14;
		true ->
		    e_type_float(TrF15, <<B14/binary, 61>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufMarkets.SparklineUpdate'(#'ProtobufMarkets.SparklineUpdate'{time
										    =
										    F1,
										price
										    =
										    F2,
										priceStr
										    =
										    F3},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0.0 -> B1;
		     true ->
			 e_type_float(TrF2, <<B1/binary, 29>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 34>>, TrUserData)
	     end
	   end
    end.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_index'(Msg,
						    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Index'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.TickerUpdate'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Msg,
							    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.TickerUpdate_tickers'(Msg,
						Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Ticker'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.TickerUpdate_tickers'([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.TickerUpdate_tickers'(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    'e_field_ProtobufMarkets.TickerUpdate_tickers'(Rest,
						   Bin3, TrUserData);
'e_field_ProtobufMarkets.TickerUpdate_tickers'([], Bin,
					       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_market'(Msg,
						      Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Market'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
							  <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Msg,
								     Bin,
								     TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
							   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Msg,
							    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.TradesUpdate'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Msg,
							     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookUpdate_bids'(Msg,
						Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookUpdate_bids'([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookUpdate_bids'(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    'e_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest,
						   Bin3, TrUserData);
'e_field_ProtobufMarkets.OrderBookUpdate_bids'([], Bin,
					       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookUpdate_asks'(Msg,
						Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookUpdate_asks'([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookUpdate_asks'(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    'e_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest,
						   Bin3, TrUserData);
'e_field_ProtobufMarkets.OrderBookUpdate_asks'([], Bin,
					       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Msg,
								Bin,
								TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'([Elem
								| Rest],
							       Bin,
							       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(id(Elem,
									   TrUserData),
									Bin2,
									TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
								   Bin3,
								   TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'([],
							       Bin,
							       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Msg,
								  Bin,
								  TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'([Elem
								  | Rest],
								 Bin,
								 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(id(Elem,
									     TrUserData),
									  Bin2,
									  TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
								     Bin3,
								     TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'([],
								 Bin,
								 _TrUserData) ->
    Bin.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'([Elem
								   | Rest],
								  Bin,
								  TrUserData) ->
    Bin2 = <<Bin/binary, 29>>,
    Bin3 = e_type_float(id(Elem, TrUserData), Bin2,
			TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								      Bin3,
								      TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'([],
								  Bin,
								  _TrUserData) ->
    Bin.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'([Elem
								      | Rest],
								     Bin,
								     TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									 Bin3,
									 TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'([],
								     Bin,
								     _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Msg,
						     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								      <<>>,
								      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Msg,
						     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								      <<>>,
								      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.TradesUpdate_trades'(Msg, Bin,
					       TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Trade'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.TradesUpdate_trades'([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.TradesUpdate_trades'(id(Elem,
							  TrUserData),
						       Bin2, TrUserData),
    'e_field_ProtobufMarkets.TradesUpdate_trades'(Rest,
						  Bin3, TrUserData);
'e_field_ProtobufMarkets.TradesUpdate_trades'([], Bin,
					      _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.Interval_ohlc'(Msg, Bin,
					 TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Interval.OHLC'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IntervalsUpdate_intervals'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Interval'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.IntervalsUpdate_intervals'([Elem
						     | Rest],
						    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.IntervalsUpdate_intervals'(id(Elem,
								TrUserData),
							     Bin2, TrUserData),
    'e_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							Bin3, TrUserData);
'e_field_ProtobufMarkets.IntervalsUpdate_intervals'([],
						    Bin, _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ProtobufMarkets.Index', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Index'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.IndexUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.IndexUpdateMessage'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.TickerUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.TickerUpdate'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Ticker', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Ticker'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Market', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Market'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Order', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Order'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Trade', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Trade'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.MarketUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.MarketUpdateMessage'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookUpdate'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
								     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookDeltaUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
							 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookSpreadUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
							  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.TradesUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.TradesUpdate'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Interval.OHLC', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Interval.OHLC'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Interval', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Interval'(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.IntervalsUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.IntervalsUpdate'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.SummaryUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.SummaryUpdate'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.SparklineUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.SparklineUpdate'(Bin,
						    TrUserData),
       TrUserData).



'decode_msg_ProtobufMarkets.Index'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Bin, 0, 0,
					       id(0, TrUserData),
					       id([], TrUserData),
					       id([], TrUserData),
					       id(false, TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Index'(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_id'(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_symbol'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_indexType'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_cwIndex'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<40,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_exchangeId'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<48,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_instrumentId'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   _) ->
    #'ProtobufMarkets.Index'{id = F@_1, symbol = F@_2,
			     indexType = F@_3, cwIndex = F@_4,
			     exchangeId = F@_5, instrumentId = F@_6};
'dfp_read_field_def_ProtobufMarkets.Index'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Index'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData).

'dg_read_field_def_ProtobufMarkets.Index'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Index'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
'dg_read_field_def_ProtobufMarkets.Index'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.Index_id'(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.Index_symbol'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.Index_indexType'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      32 ->
	  'd_field_ProtobufMarkets.Index_cwIndex'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.Index_exchangeId'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, TrUserData);
      48 ->
	  'd_field_ProtobufMarkets.Index_instrumentId'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Index'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Index'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Index'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Index'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Index'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Index'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  _) ->
    #'ProtobufMarkets.Index'{id = F@_1, symbol = F@_2,
			     indexType = F@_3, cwIndex = F@_4,
			     exchangeId = F@_5, instrumentId = F@_6}.

'd_field_ProtobufMarkets.Index_id'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_id'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_id'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_symbol'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_symbol'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_symbol'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_indexType'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_indexType'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_indexType'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_cwIndex'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_cwIndex'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_cwIndex'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
					TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_exchangeId'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_exchangeId'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_exchangeId'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					   F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       NewFValue, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_instrumentId'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_instrumentId'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
'd_field_ProtobufMarkets.Index_instrumentId'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.Index'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    'skip_varint_ProtobufMarkets.Index'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
'skip_varint_ProtobufMarkets.Index'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_length_delimited_ProtobufMarkets.Index'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Index'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
'skip_length_delimited_ProtobufMarkets.Index'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_group_ProtobufMarkets.Index'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_32_ProtobufMarkets.Index'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_64_ProtobufMarkets.Index'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'decode_msg_ProtobufMarkets.IndexUpdateMessage'(Bin,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Bin,
							    0, 0,
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<10,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_index'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<18,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<26,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<34,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<42,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.IndexUpdateMessage'{index = F@_1,
					  'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Other,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_index'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
      42 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.IndexUpdateMessage'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.IndexUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.IndexUpdateMessage'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.IndexUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<>>,
						       0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.IndexUpdateMessage'{index = F@_1,
					  'Update' = F@_2}.

'd_field_ProtobufMarkets.IndexUpdateMessage_index'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_index'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_index'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, F@_2,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Index'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_ProtobufMarkets.Index'(Prev,
												     NewFValue,
												     TrUserData)
							    end,
							    F@_2, TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.TickerUpdate'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({tickerUpdate,
								      NewFValue},
								     TrUserData);
							      {tickerUpdate,
							       MVPrev} ->
								  id({tickerUpdate,
								      'merge_msg_ProtobufMarkets.TickerUpdate'(MVPrev,
													       NewFValue,
													       TrUserData)},
								     TrUserData);
							      _ ->
								  id({tickerUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.IntervalsUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({intervalsUpdate,
								      NewFValue},
								     TrUserData);
							      {intervalsUpdate,
							       MVPrev} ->
								  id({intervalsUpdate,
								      'merge_msg_ProtobufMarkets.IntervalsUpdate'(MVPrev,
														  NewFValue,
														  TrUserData)},
								     TrUserData);
							      _ ->
								  id({intervalsUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, Prev,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SummaryUpdate'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({summaryUpdate,
								      NewFValue},
								     TrUserData);
							      {summaryUpdate,
							       MVPrev} ->
								  id({summaryUpdate,
								      'merge_msg_ProtobufMarkets.SummaryUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								     TrUserData);
							      _ ->
								  id({summaryUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SparklineUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({sparklineUpdate,
								      NewFValue},
								     TrUserData);
							      {sparklineUpdate,
							       MVPrev} ->
								  id({sparklineUpdate,
								      'merge_msg_ProtobufMarkets.SparklineUpdate'(MVPrev,
														  NewFValue,
														  TrUserData)},
								     TrUserData);
							      _ ->
								  id({sparklineUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'skip_varint_ProtobufMarkets.IndexUpdateMessage'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'skip_varint_ProtobufMarkets.IndexUpdateMessage'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'skip_varint_ProtobufMarkets.IndexUpdateMessage'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest2,
							    0, 0, F@_1, F@_2,
							    TrUserData).

'skip_group_ProtobufMarkets.IndexUpdateMessage'(Bin,
						FNum, Z2, F@_1, F@_2,
						TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    0, Z2, F@_1, F@_2,
							    TrUserData).

'skip_32_ProtobufMarkets.IndexUpdateMessage'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_64_ProtobufMarkets.IndexUpdateMessage'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'decode_msg_ProtobufMarkets.TickerUpdate'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Bin,
						      0, 0, id([], TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufMarkets.TickerUpdate_tickers'(Rest, Z1,
						   Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(<<>>,
						  0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TickerUpdate'{tickers =
					lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.TickerUpdate'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufMarkets.TickerUpdate'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_ProtobufMarkets.TickerUpdate'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.TickerUpdate_tickers'(Rest, 0,
							 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.TickerUpdate'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.TickerUpdate'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.TickerUpdate'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.TickerUpdate'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.TickerUpdate'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.TickerUpdate'(<<>>,
						 0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TickerUpdate'{tickers =
					lists_reverse(R1, TrUserData)}.

'd_field_ProtobufMarkets.TickerUpdate_tickers'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.TickerUpdate_tickers'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
'd_field_ProtobufMarkets.TickerUpdate_tickers'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Ticker'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(RestF,
						      0, 0,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

'skip_varint_ProtobufMarkets.TickerUpdate'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.TickerUpdate'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_ProtobufMarkets.TickerUpdate'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufMarkets.TickerUpdate'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.TickerUpdate'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_ProtobufMarkets.TickerUpdate'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_ProtobufMarkets.TickerUpdate'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_ProtobufMarkets.TickerUpdate'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufMarkets.TickerUpdate'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufMarkets.Ticker'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Bin, 0, 0,
						id([], TrUserData),
						id(0, TrUserData),
						id(0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Ticker'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufMarkets.Ticker_value'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Ticker'(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufMarkets.Ticker_timestamp'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Ticker'(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufMarkets.Ticker_timestampNano'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Ticker'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'ProtobufMarkets.Ticker'{value = F@_1,
			      timestamp = F@_2, timestampNano = F@_3};
'dfp_read_field_def_ProtobufMarkets.Ticker'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Ticker'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_ProtobufMarkets.Ticker'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Ticker'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_ProtobufMarkets.Ticker'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.Ticker_value'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.Ticker_timestamp'(Rest, 0, 0,
						     F@_1, F@_2, F@_3,
						     TrUserData);
      24 ->
	  'd_field_ProtobufMarkets.Ticker_timestampNano'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Ticker'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Ticker'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Ticker'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Ticker'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Ticker'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Ticker'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'ProtobufMarkets.Ticker'{value = F@_1,
			      timestamp = F@_2, timestampNano = F@_3}.

'd_field_ProtobufMarkets.Ticker_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Ticker_value'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_ProtobufMarkets.Ticker_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Ticker'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_ProtobufMarkets.Ticker_timestamp'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Ticker_timestamp'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'd_field_ProtobufMarkets.Ticker_timestamp'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Ticker'(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

'd_field_ProtobufMarkets.Ticker_timestampNano'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Ticker_timestampNano'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_ProtobufMarkets.Ticker_timestampNano'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Ticker'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_ProtobufMarkets.Ticker'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_ProtobufMarkets.Ticker'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_ProtobufMarkets.Ticker'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_ProtobufMarkets.Ticker'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Ticker'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_ProtobufMarkets.Ticker'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_ProtobufMarkets.Ticker'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_ProtobufMarkets.Ticker'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_ProtobufMarkets.Ticker'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'decode_msg_ProtobufMarkets.Market'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Bin, 0, 0,
						id(0, TrUserData),
						id(0, TrUserData),
						id(0, TrUserData),
						id([], TrUserData),
						id([], TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Market'(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_exchangeId'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_currencyPairId'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<40,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_marketId'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_exchange'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_currencyPair'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ProtobufMarkets.Market'{exchangeId = F@_1,
			      currencyPairId = F@_2, marketId = F@_3,
			      exchange = F@_4, currencyPair = F@_5};
'dfp_read_field_def_ProtobufMarkets.Market'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Market'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

'dg_read_field_def_ProtobufMarkets.Market'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Market'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
'dg_read_field_def_ProtobufMarkets.Market'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      24 ->
	  'd_field_ProtobufMarkets.Market_exchangeId'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      32 ->
	  'd_field_ProtobufMarkets.Market_currencyPairId'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.Market_marketId'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      10 ->
	  'd_field_ProtobufMarkets.Market_exchange'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.Market_currencyPair'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Market'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Market'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Market'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Market'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Market'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Market'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ProtobufMarkets.Market'{exchangeId = F@_1,
			      currencyPairId = F@_2, marketId = F@_3,
			      exchange = F@_4, currencyPair = F@_5}.

'd_field_ProtobufMarkets.Market_exchangeId'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_exchangeId'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
'd_field_ProtobufMarkets.Market_exchangeId'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						NewFValue, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_currencyPairId'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_currencyPairId'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
'd_field_ProtobufMarkets.Market_currencyPairId'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, NewFValue, F@_3, F@_4,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_marketId'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_marketId'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
'd_field_ProtobufMarkets.Market_marketId'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, F@_2, NewFValue, F@_4,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_exchange'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_exchange'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
'd_field_ProtobufMarkets.Market_exchange'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, F@_2, F@_3, NewFValue,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_currencyPair'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_currencyPair'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
'd_field_ProtobufMarkets.Market_currencyPair'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, F@_2, F@_3, F@_4,
						NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.Market'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    'skip_varint_ProtobufMarkets.Market'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_ProtobufMarkets.Market'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'skip_length_delimited_ProtobufMarkets.Market'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Market'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
'skip_length_delimited_ProtobufMarkets.Market'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

'skip_group_ProtobufMarkets.Market'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

'skip_32_ProtobufMarkets.Market'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'skip_64_ProtobufMarkets.Market'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'decode_msg_ProtobufMarkets.Order'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Bin, 0, 0,
					       id([], TrUserData),
					       id([], TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Order'(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_priceStr'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<34,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_amountStr'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<13,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_price'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<21,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_amount'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, _) ->
    #'ProtobufMarkets.Order'{priceStr = F@_1,
			     amountStr = F@_2, price = F@_3, amount = F@_4};
'dfp_read_field_def_ProtobufMarkets.Order'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Order'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

'dg_read_field_def_ProtobufMarkets.Order'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Order'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
'dg_read_field_def_ProtobufMarkets.Order'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      26 ->
	  'd_field_ProtobufMarkets.Order_priceStr'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.Order_amountStr'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    TrUserData);
      13 ->
	  'd_field_ProtobufMarkets.Order_price'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      21 ->
	  'd_field_ProtobufMarkets.Order_amount'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Order'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Order'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Order'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Order'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Order'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Order'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, _) ->
    #'ProtobufMarkets.Order'{priceStr = F@_1,
			     amountStr = F@_2, price = F@_3, amount = F@_4}.

'd_field_ProtobufMarkets.Order_priceStr'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Order_priceStr'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_priceStr'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Order'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       TrUserData).

'd_field_ProtobufMarkets.Order_amountStr'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Order_amountStr'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_amountStr'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Order'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       TrUserData).

'd_field_ProtobufMarkets.Order_price'(<<0:16, 128, 127,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id(infinity, TrUserData), F@_4,
					       TrUserData);
'd_field_ProtobufMarkets.Order_price'(<<0:16, 128, 255,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id('-infinity', TrUserData),
					       F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_price'(<<_:16, 1:1, _:7,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, id(nan, TrUserData),
					       F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_price'(<<Value:32/little-float,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id(Value, TrUserData), F@_4,
					       TrUserData).

'd_field_ProtobufMarkets.Order_amount'(<<0:16, 128, 127,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id(infinity, TrUserData),
					       TrUserData);
'd_field_ProtobufMarkets.Order_amount'(<<0:16, 128, 255,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id('-infinity', TrUserData),
					       TrUserData);
'd_field_ProtobufMarkets.Order_amount'(<<_:16, 1:1, _:7,
					 _:1, 127:7, Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id(nan, TrUserData), TrUserData);
'd_field_ProtobufMarkets.Order_amount'(<<Value:32/little-float,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id(Value, TrUserData),
					       TrUserData).

'skip_varint_ProtobufMarkets.Order'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    'skip_varint_ProtobufMarkets.Order'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
'skip_varint_ProtobufMarkets.Order'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_length_delimited_ProtobufMarkets.Order'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Order'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_ProtobufMarkets.Order'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_group_ProtobufMarkets.Order'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_32_ProtobufMarkets.Order'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_64_ProtobufMarkets.Order'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'decode_msg_ProtobufMarkets.Trade'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Bin, 0, 0,
					       id([], TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData),
					       id([], TrUserData),
					       id([], TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Trade'(<<90,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_externalId'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<16,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_timestamp'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<40,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_timestampMillis'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<80,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_timestampNano'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<66,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_priceStr'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<74,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_amountStr'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<29,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_price'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<37,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_amount'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<49,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_priceDouble'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<57,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_amountDouble'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_id'(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'ProtobufMarkets.Trade'{externalId = F@_1,
			     timestamp = F@_2, timestampMillis = F@_3,
			     timestampNano = F@_4, priceStr = F@_5,
			     amountStr = F@_6, price = F@_7, amount = F@_8,
			     priceDouble = F@_9, amountDouble = F@_10,
			     id = F@_11};
'dfp_read_field_def_ProtobufMarkets.Trade'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Trade'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData).

'dg_read_field_def_ProtobufMarkets.Trade'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Trade'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_ProtobufMarkets.Trade'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      90 ->
	  'd_field_ProtobufMarkets.Trade_externalId'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11,
						     TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.Trade_timestamp'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.Trade_timestampMillis'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11,
							  TrUserData);
      80 ->
	  'd_field_ProtobufMarkets.Trade_timestampNano'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
      66 ->
	  'd_field_ProtobufMarkets.Trade_priceStr'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, TrUserData);
      74 ->
	  'd_field_ProtobufMarkets.Trade_amountStr'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.Trade_price'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						TrUserData);
      37 ->
	  'd_field_ProtobufMarkets.Trade_amount'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10, F@_11,
						 TrUserData);
      49 ->
	  'd_field_ProtobufMarkets.Trade_priceDouble'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
      57 ->
	  'd_field_ProtobufMarkets.Trade_amountDouble'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       TrUserData);
      8 ->
	  'd_field_ProtobufMarkets.Trade_id'(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Trade'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Trade'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						F@_8, F@_9, F@_10, F@_11,
						TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Trade'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11,
							      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Trade'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Trade'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						F@_8, F@_9, F@_10, F@_11,
						TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Trade'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'ProtobufMarkets.Trade'{externalId = F@_1,
			     timestamp = F@_2, timestampMillis = F@_3,
			     timestampNano = F@_4, priceStr = F@_5,
			     amountStr = F@_6, price = F@_7, amount = F@_8,
			     priceDouble = F@_9, amountDouble = F@_10,
			     id = F@_11}.

'd_field_ProtobufMarkets.Trade_externalId'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_externalId'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_externalId'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_timestamp'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_timestamp'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_timestamp'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_timestampMillis'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_timestampMillis'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_timestampMillis'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, _, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_timestampNano'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_timestampNano'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_timestampNano'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_priceStr'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_priceStr'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceStr'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       NewFValue, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_amountStr'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_amountStr'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amountStr'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  _, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       NewFValue, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_price'(<<0:16, 128, 127,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, id(infinity, TrUserData),
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_price'(<<0:16, 128, 255,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6,
					       id('-infinity', TrUserData),
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_price'(<<_:16, 1:1, _:7,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, id(nan, TrUserData), F@_8,
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_price'(<<Value:32/little-float,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, id(Value, TrUserData),
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData).

'd_field_ProtobufMarkets.Trade_amount'(<<0:16, 128, 127,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7,
					       id(infinity, TrUserData), F@_9,
					       F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amount'(<<0:16, 128, 255,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7,
					       id('-infinity', TrUserData),
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amount'(<<_:16, 1:1, _:7,
					 _:1, 127:7, Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, id(nan, TrUserData),
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amount'(<<Value:32/little-float,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7,
					       id(Value, TrUserData), F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_priceDouble'(<<0:48, 240,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id(infinity, TrUserData), F@_10,
					       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceDouble'(<<0:48, 240,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id('-infinity', TrUserData),
					       F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceDouble'(<<_:48,
					      15:4, _:4, _:1, 127:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id(nan, TrUserData), F@_10,
					       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceDouble'(<<Value:64/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id(Value, TrUserData), F@_10,
					       F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_amountDouble'(<<0:48,
					       240, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id(infinity, TrUserData), F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_amountDouble'(<<0:48,
					       240, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id('-infinity', TrUserData),
					       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amountDouble'(<<_:48,
					       15:4, _:4, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id(nan, TrUserData), F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_amountDouble'(<<Value:64/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id(Value, TrUserData), F@_11,
					       TrUserData).

'd_field_ProtobufMarkets.Trade_id'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_id'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_id'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.Trade'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    'skip_varint_ProtobufMarkets.Trade'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_ProtobufMarkets.Trade'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_length_delimited_ProtobufMarkets.Trade'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Trade'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'skip_length_delimited_ProtobufMarkets.Trade'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_group_ProtobufMarkets.Trade'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_32_ProtobufMarkets.Trade'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_64_ProtobufMarkets.Trade'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'decode_msg_ProtobufMarkets.MarketUpdateMessage'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Bin,
							     0, 0,
							     id(undefined,
								TrUserData),
							     id(undefined,
								TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<74,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_market'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<26,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<90,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Rest,
									Z1, Z2,
									F@_1,
									F@_2,
									TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<34,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<42,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<50,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<58,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<>>,
							 0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.MarketUpdateMessage'{market = F@_1,
					   'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Other,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Other,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      74 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_market'(Rest,
							       0, 0, F@_1, F@_2,
							       TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
      90 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
      42 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      50 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      58 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.MarketUpdateMessage'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.MarketUpdateMessage'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.MarketUpdateMessage'(Rest,
								 Key bsr 3, 0,
								 F@_1, F@_2,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.MarketUpdateMessage'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.MarketUpdateMessage'{market = F@_1,
					   'Update' = F@_2}.

'd_field_ProtobufMarkets.MarketUpdateMessage_market'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_market'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_market'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, Prev, F@_2,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Market'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0,
							     if Prev ==
								  undefined ->
								    NewFValue;
								true ->
								    'merge_msg_ProtobufMarkets.Market'(Prev,
												       NewFValue,
												       TrUserData)
							     end,
							     F@_2, TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({orderBookUpdate,
								       NewFValue},
								      TrUserData);
							       {orderBookUpdate,
								MVPrev} ->
								   id({orderBookUpdate,
								       'merge_msg_ProtobufMarkets.OrderBookUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								      TrUserData);
							       _ ->
								   id({orderBookUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Bs,
										 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({orderBookDeltaUpdate,
								       NewFValue},
								      TrUserData);
							       {orderBookDeltaUpdate,
								MVPrev} ->
								   id({orderBookDeltaUpdate,
								       'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(MVPrev,
															NewFValue,
															TrUserData)},
								      TrUserData);
							       _ ->
								   id({orderBookDeltaUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, Prev,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Bs,
										  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({orderBookSpreadUpdate,
								       NewFValue},
								      TrUserData);
							       {orderBookSpreadUpdate,
								MVPrev} ->
								   id({orderBookSpreadUpdate,
								       'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(MVPrev,
															 NewFValue,
															 TrUserData)},
								      TrUserData);
							       _ ->
								   id({orderBookSpreadUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, Prev,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.TradesUpdate'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({tradesUpdate,
								       NewFValue},
								      TrUserData);
							       {tradesUpdate,
								MVPrev} ->
								   id({tradesUpdate,
								       'merge_msg_ProtobufMarkets.TradesUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								      TrUserData);
							       _ ->
								   id({tradesUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.IntervalsUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({intervalsUpdate,
								       NewFValue},
								      TrUserData);
							       {intervalsUpdate,
								MVPrev} ->
								   id({intervalsUpdate,
								       'merge_msg_ProtobufMarkets.IntervalsUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								      TrUserData);
							       _ ->
								   id({intervalsUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SummaryUpdate'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({summaryUpdate,
								       NewFValue},
								      TrUserData);
							       {summaryUpdate,
								MVPrev} ->
								   id({summaryUpdate,
								       'merge_msg_ProtobufMarkets.SummaryUpdate'(MVPrev,
														 NewFValue,
														 TrUserData)},
								      TrUserData);
							       _ ->
								   id({summaryUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SparklineUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({sparklineUpdate,
								       NewFValue},
								      TrUserData);
							       {sparklineUpdate,
								MVPrev} ->
								   id({sparklineUpdate,
								       'merge_msg_ProtobufMarkets.SparklineUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								      TrUserData);
							       _ ->
								   id({sparklineUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'skip_varint_ProtobufMarkets.MarketUpdateMessage'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'skip_varint_ProtobufMarkets.MarketUpdateMessage'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'skip_varint_ProtobufMarkets.MarketUpdateMessage'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest2,
							     0, 0, F@_1, F@_2,
							     TrUserData).

'skip_group_ProtobufMarkets.MarketUpdateMessage'(Bin,
						 FNum, Z2, F@_1, F@_2,
						 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     0, Z2, F@_1, F@_2,
							     TrUserData).

'skip_32_ProtobufMarkets.MarketUpdateMessage'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'skip_64_ProtobufMarkets.MarketUpdateMessage'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'decode_msg_ProtobufMarkets.OrderBookUpdate'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Bin,
							 0, 0,
							 id([], TrUserData),
							 id(0, TrUserData),
							 id([], TrUserData),
							 id([], TrUserData),
							 id(0.0, TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<34,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<40,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<29,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<>>,
						     0, 0, F@_1, F@_2, R1, R2,
						     F@_5, TrUserData) ->
    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
					   = F@_1,
				       seqNum = F@_2,
				       bids = lists_reverse(R1, TrUserData),
				       asks = lists_reverse(R2, TrUserData),
				       aggregationModulus = F@_5};
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      34 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   TrUserData);
      10 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookUpdate'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3, F@_4,
							     F@_5, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<>>,
						    0, 0, F@_1, F@_2, R1, R2,
						    F@_5, TrUserData) ->
    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
					   = F@_1,
				       seqNum = F@_2,
				       bids = lists_reverse(R1, TrUserData),
				       asks = lists_reverse(R2, TrUserData),
				       aggregationModulus = F@_5}.

'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, _, F@_2,
								F@_3, F@_4,
								F@_5,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3, F@_4,
						 F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, F@_1, NewFValue,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_bids'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_bids'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, Prev, F@_4,
					       F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, F@_1, F@_2,
							 cons(NewFValue, Prev,
							      TrUserData),
							 F@_4, F@_5,
							 TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_asks'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_asks'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, Prev,
					       F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, F@_1, F@_2, F@_3,
							 cons(NewFValue, Prev,
							      TrUserData),
							 F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<0:16,
							       128, 127,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id(infinity,
							    TrUserData),
							 TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<0:16,
							       128, 255,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id('-infinity',
							    TrUserData),
							 TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<_:16,
							       1:1, _:7, _:1,
							       127:7,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id(nan, TrUserData),
							 TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<Value:32/little-float,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id(Value, TrUserData),
							 TrUserData).

'skip_varint_ProtobufMarkets.OrderBookUpdate'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookUpdate'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
'skip_varint_ProtobufMarkets.OrderBookUpdate'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData).

'skip_group_ProtobufMarkets.OrderBookUpdate'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'skip_32_ProtobufMarkets.OrderBookUpdate'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'skip_64_ProtobufMarkets.OrderBookUpdate'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
							      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
									  0, 0,
									  id([],
									     TrUserData),
									  id([],
									     TrUserData),
									  id([],
									     TrUserData),
									  id([],
									     TrUserData),
									  TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<10,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<18,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<26,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<29,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<34,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<>>,
								      0, 0, R1,
								      R2, R3,
								      R4,
								      TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
							    =
							    lists_reverse(R1,
									  TrUserData),
							delta =
							    lists_reverse(R2,
									  TrUserData),
							remove =
							    lists_reverse(R3,
									  TrUserData),
							removeStr =
							    lists_reverse(R4,
									  TrUserData)};
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Other,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Other,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
      26 ->
	  'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 F@_4,
											 TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									      Key
										bsr
										3,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<>>,
								     0, 0, R1,
								     R2, R3, R4,
								     TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
							    =
							    lists_reverse(R1,
									  TrUserData),
							delta =
							    lists_reverse(R2,
									  TrUserData),
							remove =
							    lists_reverse(R3,
									  TrUserData),
							removeStr =
							    lists_reverse(R4,
									  TrUserData)}.

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, Prev,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(RestF,
									  0, 0,
									  cons(NewFValue,
									       Prev,
									       TrUserData),
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 Prev, F@_3,
								 F@_4,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(RestF,
									  0, 0,
									  F@_1,
									  cons(NewFValue,
									       Prev,
									       TrUserData),
									  F@_3,
									  F@_4,
									  TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
								    128, 127,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id(infinity,
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
								    128, 255,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id('-infinity',
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<_:16,
								    1:1, _:7,
								    _:1, 127:7,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id(nan,
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<Value:32/little-float,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id(Value,
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData).

'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData)
    when N < 57 ->
    'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, E,
								   F@_4,
								   TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(PackedBytes,
										 0,
										 0,
										 E,
										 TrUserData),
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest2,
									  0, 0,
									  F@_1,
									  F@_2,
									  NewSeq,
									  F@_4,
									  TrUserData).

'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
									   128,
									   127,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id(infinity,
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
									   128,
									   255,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id('-infinity',
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<_:16,
									   1:1,
									   _:7,
									   _:1,
									   127:7,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id(nan,
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<Value:32/little-float,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id(Value,
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<>>,
									 _, _,
									 AccSeq,
									 _) ->
    AccSeq.

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(RestF,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  cons(NewFValue,
									       Prev,
									       TrUserData),
									  TrUserData).

'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<1:1,
								 _:7,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<0:1,
								 _:7,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<1:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									     N +
									       7,
									     X
									       bsl
									       N
									       +
									       Acc,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<0:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest2,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_group_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
							      FNum, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  0, Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_32_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<_:32,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_64_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<_:64,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'decode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
							      0, 0,
							      id(0.0,
								 TrUserData),
							      id([],
								 TrUserData),
							      id(0, TrUserData),
							      id(undefined,
								 TrUserData),
							      id(undefined,
								 TrUserData),
							      TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<29,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<34,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<40,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<10,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<18,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<>>,
							  0, 0, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  _) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
						= F@_1,
					    aggregationModulusStr = F@_2,
					    seqNum = F@_3, bids = F@_4,
					    asks = F@_5};
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Other,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5,
							     TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      29 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       F@_5,
									       TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData);
      10 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookDeltaUpdate'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
								  Key bsr 3, 0,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  F@_5,
								  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookDeltaUpdate'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<>>,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, _) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
						= F@_1,
					    aggregationModulusStr = F@_2,
					    seqNum = F@_3, bids = F@_4,
					    asks = F@_5}.

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<0:16,
								    128, 127,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id(infinity,
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<0:16,
								    128, 255,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id('-infinity',
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<_:16,
								    1:1, _:7,
								    _:1, 127:7,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id(nan,
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<Value:32/little-float,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id(Value,
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, _,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1,
							      NewFValue, F@_3,
							      F@_4, F@_5,
							      TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, _,
						      F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1, F@_2,
							      NewFValue, F@_4,
							      F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bs,
											     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1, F@_2,
							      F@_3,
							      if Prev ==
								   undefined ->
								     NewFValue;
								 true ->
								     'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Prev,
																  NewFValue,
																  TrUserData)
							      end,
							      F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bs,
											     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4,
							      if Prev ==
								   undefined ->
								     NewFValue;
								 true ->
								     'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Prev,
																  NewFValue,
																  TrUserData)
							      end,
							      TrUserData).

'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(<<1:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, TrUserData);
'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(<<0:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 F@_5,
								 TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest2,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData).

'skip_group_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
						  FNum, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      0, Z2, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData).

'skip_32_ProtobufMarkets.OrderBookDeltaUpdate'(<<_:32,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'skip_64_ProtobufMarkets.OrderBookDeltaUpdate'(<<_:64,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'decode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
						   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
							       0, 0,
							       id(0,
								  TrUserData),
							       id(undefined,
								  TrUserData),
							       id(undefined,
								  TrUserData),
							       TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<8,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3,
							      TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<18,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<26,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<>>,
							   0, 0, F@_1, F@_2,
							   F@_3, _) ->
    #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp =
						 F@_1,
					     bid = F@_2, ask = F@_3};
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Other,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Other,
							      Z1, Z2, F@_1,
							      F@_2, F@_3,
							      TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookSpreadUpdate'(Rest, 0,
								0, F@_1, F@_2,
								F@_3,
								TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
								   Key bsr 3, 0,
								   F@_1, F@_2,
								   F@_3,
								   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookSpreadUpdate'(Rest, 0,
								0, F@_1, F@_2,
								F@_3,
								TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<>>,
							  0, 0, F@_1, F@_2,
							  F@_3, _) ->
    #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp =
						 F@_1,
					     bid = F@_2, ask = F@_3}.

'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      TrUserData);
'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, _, F@_2, F@_3,
							  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(RestF,
							       0, 0, NewFValue,
							       F@_2, F@_3,
							       TrUserData).

'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, Prev, F@_3,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(RestF,
							       0, 0, F@_1,
							       if Prev ==
								    undefined ->
								      NewFValue;
								  true ->
								      'merge_msg_ProtobufMarkets.Order'(Prev,
													NewFValue,
													TrUserData)
							       end,
							       F@_3,
							       TrUserData).

'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, Prev,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(RestF,
							       0, 0, F@_1, F@_2,
							       if Prev ==
								    undefined ->
								      NewFValue;
								  true ->
								      'merge_msg_ProtobufMarkets.Order'(Prev,
													NewFValue,
													TrUserData)
							       end,
							       TrUserData).

'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(<<1:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(<<0:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3,
								  TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest2,
							       0, 0, F@_1, F@_2,
							       F@_3,
							       TrUserData).

'skip_group_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
						   FNum, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       0, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'skip_32_ProtobufMarkets.OrderBookSpreadUpdate'(<<_:32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'skip_64_ProtobufMarkets.OrderBookSpreadUpdate'(<<_:64,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'decode_msg_ProtobufMarkets.TradesUpdate'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Bin,
						      0, 0, id([], TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufMarkets.TradesUpdate_trades'(Rest, Z1,
						  Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(<<>>,
						  0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TradesUpdate'{trades =
					lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.TradesUpdate'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufMarkets.TradesUpdate'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_ProtobufMarkets.TradesUpdate'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.TradesUpdate_trades'(Rest, 0,
							0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.TradesUpdate'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.TradesUpdate'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.TradesUpdate'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.TradesUpdate'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.TradesUpdate'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.TradesUpdate'(<<>>,
						 0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TradesUpdate'{trades =
					lists_reverse(R1, TrUserData)}.

'd_field_ProtobufMarkets.TradesUpdate_trades'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.TradesUpdate_trades'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
'd_field_ProtobufMarkets.TradesUpdate_trades'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Trade'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(RestF,
						      0, 0,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

'skip_varint_ProtobufMarkets.TradesUpdate'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.TradesUpdate'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_ProtobufMarkets.TradesUpdate'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufMarkets.TradesUpdate'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.TradesUpdate'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_ProtobufMarkets.TradesUpdate'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_ProtobufMarkets.TradesUpdate'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_ProtobufMarkets.TradesUpdate'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufMarkets.TradesUpdate'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufMarkets.Interval.OHLC'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<42,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_openStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<50,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_highStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<58,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<66,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<13,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_open'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<21,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_high'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<29,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_low'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<37,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_close'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8,
						  TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, _) ->
    #'ProtobufMarkets.Interval.OHLC'{openStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     closeStr = F@_4, open = F@_5, high = F@_6,
				     low = F@_7, close = F@_8};
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData).

'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      TrUserData);
'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      42 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_openStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
      50 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_highStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
      58 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, TrUserData);
      66 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   TrUserData);
      13 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_open'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
      21 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_high'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_low'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      TrUserData);
      37 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_close'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Interval.OHLC'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5, F@_6,
							    F@_7, F@_8,
							    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Interval.OHLC'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Interval.OHLC'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3, F@_4,
							   F@_5, F@_6, F@_7,
							   F@_8, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Interval.OHLC'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(<<>>,
						  0, 0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, _) ->
    #'ProtobufMarkets.Interval.OHLC'{openStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     closeStr = F@_4, open = F@_5, high = F@_6,
				     low = F@_7, close = F@_8}.

'd_field_ProtobufMarkets.Interval.OHLC_openStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_openStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8,
						    TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_openStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, _, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_highStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_highStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8,
						    TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_highStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8,
					       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _, F@_4,
					       F@_5, F@_6, F@_7, F@_8,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, F@_1, F@_2,
						       NewFValue, F@_4, F@_5,
						       F@_6, F@_7, F@_8,
						       TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8,
						     TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       NewFValue, F@_5, F@_6,
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_open'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id(infinity, TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_open'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id('-infinity',
							  TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_open'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id(nan, TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_open'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id(Value, TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_high'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id(infinity, TrUserData),
						       F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_high'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id('-infinity',
							  TrUserData),
						       F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_high'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id(nan, TrUserData),
						       F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_high'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id(Value, TrUserData),
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_low'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id(infinity, TrUserData),
						       F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_low'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id('-infinity',
							  TrUserData),
						       F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_low'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id(nan, TrUserData),
						       F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_low'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id(Value, TrUserData),
						       F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_close'(<<0:16,
						128, 127, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id(infinity, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_close'(<<0:16,
						128, 255, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id('-infinity',
							  TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_close'(<<_:16,
						1:1, _:7, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id(nan, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_close'(<<Value:32/little-float,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id(Value, TrUserData),
						       TrUserData).

'skip_varint_ProtobufMarkets.Interval.OHLC'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8,
					    TrUserData) ->
    'skip_varint_ProtobufMarkets.Interval.OHLC'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData);
'skip_varint_ProtobufMarkets.Interval.OHLC'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_group_ProtobufMarkets.Interval.OHLC'(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_32_ProtobufMarkets.Interval.OHLC'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_64_ProtobufMarkets.Interval.OHLC'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'decode_msg_ProtobufMarkets.Interval'(Bin,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Bin, 0, 0,
						  id(0, TrUserData),
						  id(0, TrUserData),
						  id(undefined, TrUserData),
						  id([], TrUserData),
						  id([], TrUserData),
						  id(0.0, TrUserData),
						  id(0.0, TrUserData),
						  TrUserData).

'dfp_read_field_def_ProtobufMarkets.Interval'(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_closetime'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_period'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<18,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_ohlc'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<50,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeBaseStr'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<58,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<29,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeBase'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<45,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeQuote'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, _) ->
    #'ProtobufMarkets.Interval'{closetime = F@_1,
				period = F@_2, ohlc = F@_3,
				volumeBaseStr = F@_4, volumeQuoteStr = F@_5,
				volumeBase = F@_6, volumeQuote = F@_7};
'dfp_read_field_def_ProtobufMarkets.Interval'(Other, Z1,
					      Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Interval'(Other, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_ProtobufMarkets.Interval'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Interval'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, TrUserData);
'dg_read_field_def_ProtobufMarkets.Interval'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.Interval_closetime'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7,
						       TrUserData);
      32 ->
	  'd_field_ProtobufMarkets.Interval_period'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7,
						    TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.Interval_ohlc'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, TrUserData);
      50 ->
	  'd_field_ProtobufMarkets.Interval_volumeBaseStr'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7,
							   TrUserData);
      58 ->
	  'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.Interval_volumeBase'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData);
      45 ->
	  'd_field_ProtobufMarkets.Interval_volumeQuote'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Interval'(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       F@_6, F@_7, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Interval'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Interval'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Interval'(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7,
						      TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Interval'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Interval'(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, _) ->
    #'ProtobufMarkets.Interval'{closetime = F@_1,
				period = F@_2, ohlc = F@_3,
				volumeBaseStr = F@_4, volumeQuoteStr = F@_5,
				volumeBase = F@_6, volumeQuote = F@_7}.

'd_field_ProtobufMarkets.Interval_closetime'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_closetime'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_closetime'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					     F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_period'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_period'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
'd_field_ProtobufMarkets.Interval_period'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_ohlc'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_ohlc'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_ohlc'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Interval.OHLC'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, F@_2,
						  if Prev == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_ProtobufMarkets.Interval.OHLC'(Prev,
												   NewFValue,
												   TrUserData)
						  end,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_volumeBaseStr'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_volumeBaseStr'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBaseStr'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 F@_5, F@_6, F@_7,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, F@_2, F@_3,
						  NewFValue, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7,
						      TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, _, F@_6, F@_7,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  NewFValue, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_volumeBase'(<<0:16,
						128, 127, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5,
						  id(infinity, TrUserData),
						  F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBase'(<<0:16,
						128, 255, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5,
						  id('-infinity', TrUserData),
						  F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBase'(<<_:16,
						1:1, _:7, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, id(nan, TrUserData),
						  F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBase'(<<Value:32/little-float,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, id(Value, TrUserData),
						  F@_7, TrUserData).

'd_field_ProtobufMarkets.Interval_volumeQuote'(<<0:16,
						 128, 127, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id(infinity, TrUserData),
						  TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuote'(<<0:16,
						 128, 255, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id('-infinity', TrUserData),
						  TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuote'(<<_:16,
						 1:1, _:7, _:1, 127:7,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id(nan, TrUserData),
						  TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuote'(<<Value:32/little-float,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id(Value, TrUserData),
						  TrUserData).

'skip_varint_ProtobufMarkets.Interval'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData) ->
    'skip_varint_ProtobufMarkets.Interval'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, TrUserData);
'skip_varint_ProtobufMarkets.Interval'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_ProtobufMarkets.Interval'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Interval'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, TrUserData);
'skip_length_delimited_ProtobufMarkets.Interval'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest2, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_group_ProtobufMarkets.Interval'(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, 0,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_32_ProtobufMarkets.Interval'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_64_ProtobufMarkets.Interval'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'decode_msg_ProtobufMarkets.IntervalsUpdate'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Bin,
							 0, 0,
							 id([], TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1,
						     TrUserData) ->
    'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							Z1, Z2, F@_1,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<>>,
						     0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.IntervalsUpdate'{intervals =
					   lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Other,
						     Z1, Z2, F@_1,
						     TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(Other,
							Z1, Z2, F@_1,
							TrUserData).

'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							      0, 0, F@_1,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.IntervalsUpdate'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.IntervalsUpdate'(Rest, 0, 0,
							  F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(Rest,
									0, 0,
									F@_1,
									TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.IntervalsUpdate'(Rest,
							     Key bsr 3, 0, F@_1,
							     TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.IntervalsUpdate'(Rest, 0, 0,
							  F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<>>,
						    0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.IntervalsUpdate'{intervals =
					   lists_reverse(R1, TrUserData)}.

'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Interval'(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(RestF,
							 0, 0,
							 cons(NewFValue, Prev,
							      TrUserData),
							 TrUserData).

'skip_varint_ProtobufMarkets.IntervalsUpdate'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.IntervalsUpdate'(Rest, Z1,
						  Z2, F@_1, TrUserData);
'skip_varint_ProtobufMarkets.IntervalsUpdate'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData).

'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    TrUserData);
'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest2,
							 0, 0, F@_1,
							 TrUserData).

'skip_group_ProtobufMarkets.IntervalsUpdate'(Bin, FNum,
					     Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 0, Z2, F@_1,
							 TrUserData).

'skip_32_ProtobufMarkets.IntervalsUpdate'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData).

'skip_64_ProtobufMarkets.IntervalsUpdate'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData).

'decode_msg_ProtobufMarkets.SummaryUpdate'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id(0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<82,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<90,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_highStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<98,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<106,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<114,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<122,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15,
							      TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<130,
						     1, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<21,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_last'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<29,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_high'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<37,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_low'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<45,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<77,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<53,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<61,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, _) ->
    #'ProtobufMarkets.SummaryUpdate'{lastStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     volumeBaseStr = F@_4,
				     volumeQuoteStr = F@_5,
				     changeAbsoluteStr = F@_6,
				     changePercentStr = F@_7, numTrades = F@_8,
				     last = F@_9, high = F@_10, low = F@_11,
				     volumeBase = F@_12, volumeQuote = F@_13,
				     changeAbsolute = F@_14,
				     changePercent = F@_15};
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData).

'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      82 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
      90 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_highStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
      98 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15,
							 TrUserData);
      106 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								F@_12, F@_13,
								F@_14, F@_15,
								TrUserData);
      114 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10, F@_11,
								 F@_12, F@_13,
								 F@_14, F@_15,
								 TrUserData);
      122 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    F@_11,
								    F@_12,
								    F@_13,
								    F@_14,
								    F@_15,
								    TrUserData);
      130 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10, F@_11,
								   F@_12, F@_13,
								   F@_14, F@_15,
								   TrUserData);
      64 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, TrUserData);
      21 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_last'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_high'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
      37 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_low'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
      45 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     TrUserData);
      77 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15,
							      TrUserData);
      53 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10, F@_11,
								 F@_12, F@_13,
								 F@_14, F@_15,
								 TrUserData);
      61 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								F@_12, F@_13,
								F@_14, F@_15,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.SummaryUpdate'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5, F@_6,
							    F@_7, F@_8, F@_9,
							    F@_10, F@_11, F@_12,
							    F@_13, F@_14, F@_15,
							    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.SummaryUpdate'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13, F@_14,
							F@_15, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      F@_9,
								      F@_10,
								      F@_11,
								      F@_12,
								      F@_13,
								      F@_14,
								      F@_15,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.SummaryUpdate'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3, F@_4,
							   F@_5, F@_6, F@_7,
							   F@_8, F@_9, F@_10,
							   F@_11, F@_12, F@_13,
							   F@_14, F@_15,
							   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.SummaryUpdate'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13, F@_14,
							F@_15, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(<<>>,
						  0, 0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, _) ->
    #'ProtobufMarkets.SummaryUpdate'{lastStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     volumeBaseStr = F@_4,
				     volumeQuoteStr = F@_5,
				     changeAbsoluteStr = F@_6,
				     changePercentStr = F@_7, numTrades = F@_8,
				     last = F@_9, high = F@_10, low = F@_11,
				     volumeBase = F@_12, volumeQuote = F@_13,
				     changeAbsolute = F@_14,
				     changePercent = F@_15}.

'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, _, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_highStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_highStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_highStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2,
						       NewFValue, F@_4, F@_5,
						       F@_6, F@_7, F@_8, F@_9,
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      _, F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       NewFValue, F@_5, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11, F@_12,
							   F@_13, F@_14, F@_15,
							   TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, _, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, NewFValue, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, F@_8, F@_9,
							      F@_10, F@_11,
							      F@_12, F@_13,
							      F@_14, F@_15,
							      TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5, _,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, NewFValue,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, F@_14, F@_15,
							 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 _, F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       NewFValue, F@_8, F@_9,
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, _,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       NewFValue, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_last'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id(infinity, TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_last'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id('-infinity',
							  TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_last'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id(nan, TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_last'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id(Value, TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_high'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id(infinity, TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_high'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id('-infinity',
							  TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_high'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id(nan, TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_high'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id(Value, TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_low'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id(infinity, TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_low'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id('-infinity',
							  TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_low'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id(nan, TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_low'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id(Value, TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<0:16,
						     128, 127, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id(infinity, TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<0:16,
						     128, 255, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id('-infinity',
							  TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<_:16,
						     1:1, _:7, _:1, 127:7,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id(nan, TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<Value:32/little-float,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id(Value, TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<0:16,
						      128, 127, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id(infinity, TrUserData),
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<0:16,
						      128, 255, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id('-infinity',
							  TrUserData),
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<_:16,
						      1:1, _:7, _:1, 127:7,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id(nan, TrUserData),
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<Value:32/little-float,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id(Value, TrUserData),
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<0:16,
							 128, 127,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id(infinity, TrUserData),
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<0:16,
							 128, 255,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id('-infinity',
							  TrUserData),
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<_:16,
							 1:1, _:7, _:1, 127:7,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id(nan, TrUserData),
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<Value:32/little-float,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id(Value, TrUserData),
						       F@_15, TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<0:16,
							128, 127, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id(infinity, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<0:16,
							128, 255, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id('-infinity',
							  TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<_:16,
							1:1, _:7, _:1, 127:7,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id(nan, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<Value:32/little-float,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id(Value, TrUserData),
						       TrUserData).

'skip_varint_ProtobufMarkets.SummaryUpdate'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'skip_varint_ProtobufMarkets.SummaryUpdate'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData);
'skip_varint_ProtobufMarkets.SummaryUpdate'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_group_ProtobufMarkets.SummaryUpdate'(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15,
					   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_32_ProtobufMarkets.SummaryUpdate'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15,
					TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_64_ProtobufMarkets.SummaryUpdate'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15,
					TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'decode_msg_ProtobufMarkets.SparklineUpdate'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Bin,
							 0, 0,
							 id(0, TrUserData),
							 id(0.0, TrUserData),
							 id([], TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<16,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufMarkets.SparklineUpdate_time'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<29,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufMarkets.SparklineUpdate_price'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<34,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<>>,
						     0, 0, F@_1, F@_2, F@_3,
						     _) ->
    #'ProtobufMarkets.SparklineUpdate'{time = F@_1,
				       price = F@_2, priceStr = F@_3};
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  'd_field_ProtobufMarkets.SparklineUpdate_time'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.SparklineUpdate_price'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.SparklineUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.SparklineUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.SparklineUpdate'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3,
							     TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.SparklineUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    _) ->
    #'ProtobufMarkets.SparklineUpdate'{time = F@_1,
				       price = F@_2, priceStr = F@_3}.

'd_field_ProtobufMarkets.SparklineUpdate_time'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SparklineUpdate_time'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_time'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F@_2, F@_3,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, TrUserData).

'd_field_ProtobufMarkets.SparklineUpdate_price'(<<0:16,
						  128, 127, Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id(infinity,
							    TrUserData),
							 F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_price'(<<0:16,
						  128, 255, Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id('-infinity',
							    TrUserData),
							 F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_price'(<<_:16,
						  1:1, _:7, _:1, 127:7,
						  Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id(nan, TrUserData),
							 F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_price'(<<Value:32/little-float,
						  Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id(Value, TrUserData),
							 F@_3, TrUserData).

'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, _,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(RestF,
							 0, 0, F@_1, F@_2,
							 NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.SparklineUpdate'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'skip_varint_ProtobufMarkets.SparklineUpdate'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'skip_varint_ProtobufMarkets.SparklineUpdate'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 TrUserData).

'skip_group_ProtobufMarkets.SparklineUpdate'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_32_ProtobufMarkets.SparklineUpdate'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_64_ProtobufMarkets.SparklineUpdate'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufMarkets.Index' ->
	  'merge_msg_ProtobufMarkets.Index'(Prev, New,
					    TrUserData);
      'ProtobufMarkets.IndexUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.IndexUpdateMessage'(Prev,
							 New, TrUserData);
      'ProtobufMarkets.TickerUpdate' ->
	  'merge_msg_ProtobufMarkets.TickerUpdate'(Prev, New,
						   TrUserData);
      'ProtobufMarkets.Ticker' ->
	  'merge_msg_ProtobufMarkets.Ticker'(Prev, New,
					     TrUserData);
      'ProtobufMarkets.Market' ->
	  'merge_msg_ProtobufMarkets.Market'(Prev, New,
					     TrUserData);
      'ProtobufMarkets.Order' ->
	  'merge_msg_ProtobufMarkets.Order'(Prev, New,
					    TrUserData);
      'ProtobufMarkets.Trade' ->
	  'merge_msg_ProtobufMarkets.Trade'(Prev, New,
					    TrUserData);
      'ProtobufMarkets.MarketUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.MarketUpdateMessage'(Prev,
							  New, TrUserData);
      'ProtobufMarkets.OrderBookUpdate' ->
	  'merge_msg_ProtobufMarkets.OrderBookUpdate'(Prev, New,
						      TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas' ->
	  'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Prev,
								       New,
								       TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate' ->
	  'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Prev,
							   New, TrUserData);
      'ProtobufMarkets.OrderBookSpreadUpdate' ->
	  'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Prev,
							    New, TrUserData);
      'ProtobufMarkets.TradesUpdate' ->
	  'merge_msg_ProtobufMarkets.TradesUpdate'(Prev, New,
						   TrUserData);
      'ProtobufMarkets.Interval.OHLC' ->
	  'merge_msg_ProtobufMarkets.Interval.OHLC'(Prev, New,
						    TrUserData);
      'ProtobufMarkets.Interval' ->
	  'merge_msg_ProtobufMarkets.Interval'(Prev, New,
					       TrUserData);
      'ProtobufMarkets.IntervalsUpdate' ->
	  'merge_msg_ProtobufMarkets.IntervalsUpdate'(Prev, New,
						      TrUserData);
      'ProtobufMarkets.SummaryUpdate' ->
	  'merge_msg_ProtobufMarkets.SummaryUpdate'(Prev, New,
						    TrUserData);
      'ProtobufMarkets.SparklineUpdate' ->
	  'merge_msg_ProtobufMarkets.SparklineUpdate'(Prev, New,
						      TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Index'/3}).
'merge_msg_ProtobufMarkets.Index'(#'ProtobufMarkets.Index'{id
							       = PFid,
							   symbol = PFsymbol,
							   indexType =
							       PFindexType,
							   cwIndex = PFcwIndex,
							   exchangeId =
							       PFexchangeId,
							   instrumentId =
							       PFinstrumentId},
				  #'ProtobufMarkets.Index'{id = NFid,
							   symbol = NFsymbol,
							   indexType =
							       NFindexType,
							   cwIndex = NFcwIndex,
							   exchangeId =
							       NFexchangeId,
							   instrumentId =
							       NFinstrumentId},
				  _) ->
    #'ProtobufMarkets.Index'{id =
				 if NFid =:= undefined -> PFid;
				    true -> NFid
				 end,
			     symbol =
				 if NFsymbol =:= undefined -> PFsymbol;
				    true -> NFsymbol
				 end,
			     indexType =
				 if NFindexType =:= undefined -> PFindexType;
				    true -> NFindexType
				 end,
			     cwIndex =
				 if NFcwIndex =:= undefined -> PFcwIndex;
				    true -> NFcwIndex
				 end,
			     exchangeId =
				 if NFexchangeId =:= undefined -> PFexchangeId;
				    true -> NFexchangeId
				 end,
			     instrumentId =
				 if NFinstrumentId =:= undefined ->
					PFinstrumentId;
				    true -> NFinstrumentId
				 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.IndexUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.IndexUpdateMessage'(#'ProtobufMarkets.IndexUpdateMessage'{index
											 =
											 PFindex,
										     'Update'
											 =
											 PFUpdate},
					       #'ProtobufMarkets.IndexUpdateMessage'{index
											 =
											 NFindex,
										     'Update'
											 =
											 NFUpdate},
					       TrUserData) ->
    #'ProtobufMarkets.IndexUpdateMessage'{index =
					      if PFindex /= undefined,
						 NFindex /= undefined ->
						     'merge_msg_ProtobufMarkets.Index'(PFindex,
										       NFindex,
										       TrUserData);
						 PFindex == undefined ->
						     NFindex;
						 NFindex == undefined -> PFindex
					      end,
					  'Update' =
					      case {PFUpdate, NFUpdate} of
						{{tickerUpdate, OPFUpdate},
						 {tickerUpdate, ONFUpdate}} ->
						    {tickerUpdate,
						     'merge_msg_ProtobufMarkets.TickerUpdate'(OPFUpdate,
											      ONFUpdate,
											      TrUserData)};
						{{intervalsUpdate, OPFUpdate},
						 {intervalsUpdate,
						  ONFUpdate}} ->
						    {intervalsUpdate,
						     'merge_msg_ProtobufMarkets.IntervalsUpdate'(OPFUpdate,
												 ONFUpdate,
												 TrUserData)};
						{{summaryUpdate, OPFUpdate},
						 {summaryUpdate, ONFUpdate}} ->
						    {summaryUpdate,
						     'merge_msg_ProtobufMarkets.SummaryUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
						{{sparklineUpdate, OPFUpdate},
						 {sparklineUpdate,
						  ONFUpdate}} ->
						    {sparklineUpdate,
						     'merge_msg_ProtobufMarkets.SparklineUpdate'(OPFUpdate,
												 ONFUpdate,
												 TrUserData)};
						{_, undefined} -> PFUpdate;
						_ -> NFUpdate
					      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.TickerUpdate'/3}).
'merge_msg_ProtobufMarkets.TickerUpdate'(#'ProtobufMarkets.TickerUpdate'{tickers
									     =
									     PFtickers},
					 #'ProtobufMarkets.TickerUpdate'{tickers
									     =
									     NFtickers},
					 TrUserData) ->
    #'ProtobufMarkets.TickerUpdate'{tickers =
					if PFtickers /= undefined,
					   NFtickers /= undefined ->
					       'erlang_++'(PFtickers, NFtickers,
							   TrUserData);
					   PFtickers == undefined -> NFtickers;
					   NFtickers == undefined -> PFtickers
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Ticker'/3}).
'merge_msg_ProtobufMarkets.Ticker'(#'ProtobufMarkets.Ticker'{value
								 = PFvalue,
							     timestamp =
								 PFtimestamp,
							     timestampNano =
								 PFtimestampNano},
				   #'ProtobufMarkets.Ticker'{value = NFvalue,
							     timestamp =
								 NFtimestamp,
							     timestampNano =
								 NFtimestampNano},
				   _) ->
    #'ProtobufMarkets.Ticker'{value =
				  if NFvalue =:= undefined -> PFvalue;
				     true -> NFvalue
				  end,
			      timestamp =
				  if NFtimestamp =:= undefined -> PFtimestamp;
				     true -> NFtimestamp
				  end,
			      timestampNano =
				  if NFtimestampNano =:= undefined ->
					 PFtimestampNano;
				     true -> NFtimestampNano
				  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Market'/3}).
'merge_msg_ProtobufMarkets.Market'(#'ProtobufMarkets.Market'{exchangeId
								 = PFexchangeId,
							     currencyPairId =
								 PFcurrencyPairId,
							     marketId =
								 PFmarketId,
							     exchange =
								 PFexchange,
							     currencyPair =
								 PFcurrencyPair},
				   #'ProtobufMarkets.Market'{exchangeId =
								 NFexchangeId,
							     currencyPairId =
								 NFcurrencyPairId,
							     marketId =
								 NFmarketId,
							     exchange =
								 NFexchange,
							     currencyPair =
								 NFcurrencyPair},
				   _) ->
    #'ProtobufMarkets.Market'{exchangeId =
				  if NFexchangeId =:= undefined -> PFexchangeId;
				     true -> NFexchangeId
				  end,
			      currencyPairId =
				  if NFcurrencyPairId =:= undefined ->
					 PFcurrencyPairId;
				     true -> NFcurrencyPairId
				  end,
			      marketId =
				  if NFmarketId =:= undefined -> PFmarketId;
				     true -> NFmarketId
				  end,
			      exchange =
				  if NFexchange =:= undefined -> PFexchange;
				     true -> NFexchange
				  end,
			      currencyPair =
				  if NFcurrencyPair =:= undefined ->
					 PFcurrencyPair;
				     true -> NFcurrencyPair
				  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Order'/3}).
'merge_msg_ProtobufMarkets.Order'(#'ProtobufMarkets.Order'{priceStr
							       = PFpriceStr,
							   amountStr =
							       PFamountStr,
							   price = PFprice,
							   amount = PFamount},
				  #'ProtobufMarkets.Order'{priceStr =
							       NFpriceStr,
							   amountStr =
							       NFamountStr,
							   price = NFprice,
							   amount = NFamount},
				  _) ->
    #'ProtobufMarkets.Order'{priceStr =
				 if NFpriceStr =:= undefined -> PFpriceStr;
				    true -> NFpriceStr
				 end,
			     amountStr =
				 if NFamountStr =:= undefined -> PFamountStr;
				    true -> NFamountStr
				 end,
			     price =
				 if NFprice =:= undefined -> PFprice;
				    true -> NFprice
				 end,
			     amount =
				 if NFamount =:= undefined -> PFamount;
				    true -> NFamount
				 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Trade'/3}).
'merge_msg_ProtobufMarkets.Trade'(#'ProtobufMarkets.Trade'{externalId
							       = PFexternalId,
							   timestamp =
							       PFtimestamp,
							   timestampMillis =
							       PFtimestampMillis,
							   timestampNano =
							       PFtimestampNano,
							   priceStr =
							       PFpriceStr,
							   amountStr =
							       PFamountStr,
							   price = PFprice,
							   amount = PFamount,
							   priceDouble =
							       PFpriceDouble,
							   amountDouble =
							       PFamountDouble,
							   id = PFid},
				  #'ProtobufMarkets.Trade'{externalId =
							       NFexternalId,
							   timestamp =
							       NFtimestamp,
							   timestampMillis =
							       NFtimestampMillis,
							   timestampNano =
							       NFtimestampNano,
							   priceStr =
							       NFpriceStr,
							   amountStr =
							       NFamountStr,
							   price = NFprice,
							   amount = NFamount,
							   priceDouble =
							       NFpriceDouble,
							   amountDouble =
							       NFamountDouble,
							   id = NFid},
				  _) ->
    #'ProtobufMarkets.Trade'{externalId =
				 if NFexternalId =:= undefined -> PFexternalId;
				    true -> NFexternalId
				 end,
			     timestamp =
				 if NFtimestamp =:= undefined -> PFtimestamp;
				    true -> NFtimestamp
				 end,
			     timestampMillis =
				 if NFtimestampMillis =:= undefined ->
					PFtimestampMillis;
				    true -> NFtimestampMillis
				 end,
			     timestampNano =
				 if NFtimestampNano =:= undefined ->
					PFtimestampNano;
				    true -> NFtimestampNano
				 end,
			     priceStr =
				 if NFpriceStr =:= undefined -> PFpriceStr;
				    true -> NFpriceStr
				 end,
			     amountStr =
				 if NFamountStr =:= undefined -> PFamountStr;
				    true -> NFamountStr
				 end,
			     price =
				 if NFprice =:= undefined -> PFprice;
				    true -> NFprice
				 end,
			     amount =
				 if NFamount =:= undefined -> PFamount;
				    true -> NFamount
				 end,
			     priceDouble =
				 if NFpriceDouble =:= undefined ->
					PFpriceDouble;
				    true -> NFpriceDouble
				 end,
			     amountDouble =
				 if NFamountDouble =:= undefined ->
					PFamountDouble;
				    true -> NFamountDouble
				 end,
			     id =
				 if NFid =:= undefined -> PFid;
				    true -> NFid
				 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.MarketUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.MarketUpdateMessage'(#'ProtobufMarkets.MarketUpdateMessage'{market
											   =
											   PFmarket,
										       'Update'
											   =
											   PFUpdate},
						#'ProtobufMarkets.MarketUpdateMessage'{market
											   =
											   NFmarket,
										       'Update'
											   =
											   NFUpdate},
						TrUserData) ->
    #'ProtobufMarkets.MarketUpdateMessage'{market =
					       if PFmarket /= undefined,
						  NFmarket /= undefined ->
						      'merge_msg_ProtobufMarkets.Market'(PFmarket,
											 NFmarket,
											 TrUserData);
						  PFmarket == undefined ->
						      NFmarket;
						  NFmarket == undefined ->
						      PFmarket
					       end,
					   'Update' =
					       case {PFUpdate, NFUpdate} of
						 {{orderBookUpdate, OPFUpdate},
						  {orderBookUpdate,
						   ONFUpdate}} ->
						     {orderBookUpdate,
						      'merge_msg_ProtobufMarkets.OrderBookUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						 {{orderBookDeltaUpdate,
						   OPFUpdate},
						  {orderBookDeltaUpdate,
						   ONFUpdate}} ->
						     {orderBookDeltaUpdate,
						      'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(OPFUpdate,
												       ONFUpdate,
												       TrUserData)};
						 {{orderBookSpreadUpdate,
						   OPFUpdate},
						  {orderBookSpreadUpdate,
						   ONFUpdate}} ->
						     {orderBookSpreadUpdate,
						      'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(OPFUpdate,
													ONFUpdate,
													TrUserData)};
						 {{tradesUpdate, OPFUpdate},
						  {tradesUpdate, ONFUpdate}} ->
						     {tradesUpdate,
						      'merge_msg_ProtobufMarkets.TradesUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
						 {{intervalsUpdate, OPFUpdate},
						  {intervalsUpdate,
						   ONFUpdate}} ->
						     {intervalsUpdate,
						      'merge_msg_ProtobufMarkets.IntervalsUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						 {{summaryUpdate, OPFUpdate},
						  {summaryUpdate, ONFUpdate}} ->
						     {summaryUpdate,
						      'merge_msg_ProtobufMarkets.SummaryUpdate'(OPFUpdate,
												ONFUpdate,
												TrUserData)};
						 {{sparklineUpdate, OPFUpdate},
						  {sparklineUpdate,
						   ONFUpdate}} ->
						     {sparklineUpdate,
						      'merge_msg_ProtobufMarkets.SparklineUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						 {_, undefined} -> PFUpdate;
						 _ -> NFUpdate
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookUpdate'/3}).
'merge_msg_ProtobufMarkets.OrderBookUpdate'(#'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
										   =
										   PFaggregationModulusStr,
									       seqNum
										   =
										   PFseqNum,
									       bids
										   =
										   PFbids,
									       asks
										   =
										   PFasks,
									       aggregationModulus
										   =
										   PFaggregationModulus},
					    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
										   =
										   NFaggregationModulusStr,
									       seqNum
										   =
										   NFseqNum,
									       bids
										   =
										   NFbids,
									       asks
										   =
										   NFasks,
									       aggregationModulus
										   =
										   NFaggregationModulus},
					    TrUserData) ->
    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
					   =
					   if NFaggregationModulusStr =:=
						undefined ->
						  PFaggregationModulusStr;
					      true -> NFaggregationModulusStr
					   end,
				       seqNum =
					   if NFseqNum =:= undefined ->
						  PFseqNum;
					      true -> NFseqNum
					   end,
				       bids =
					   if PFbids /= undefined,
					      NFbids /= undefined ->
						  'erlang_++'(PFbids, NFbids,
							      TrUserData);
					      PFbids == undefined -> NFbids;
					      NFbids == undefined -> PFbids
					   end,
				       asks =
					   if PFasks /= undefined,
					      NFasks /= undefined ->
						  'erlang_++'(PFasks, NFasks,
							      TrUserData);
					      PFasks == undefined -> NFasks;
					      NFasks == undefined -> PFasks
					   end,
				       aggregationModulus =
					   if NFaggregationModulus =:=
						undefined ->
						  PFaggregationModulus;
					      true -> NFaggregationModulus
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/3}).
'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(#'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														     =
														     PFset,
														 delta
														     =
														     PFdelta,
														 remove
														     =
														     PFremove,
														 removeStr
														     =
														     PFremoveStr},
							     #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														     =
														     NFset,
														 delta
														     =
														     NFdelta,
														 remove
														     =
														     NFremove,
														 removeStr
														     =
														     NFremoveStr},
							     TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
							    =
							    if PFset /=
								 undefined,
							       NFset /=
								 undefined ->
								   'erlang_++'(PFset,
									       NFset,
									       TrUserData);
							       PFset ==
								 undefined ->
								   NFset;
							       NFset ==
								 undefined ->
								   PFset
							    end,
							delta =
							    if PFdelta /=
								 undefined,
							       NFdelta /=
								 undefined ->
								   'erlang_++'(PFdelta,
									       NFdelta,
									       TrUserData);
							       PFdelta ==
								 undefined ->
								   NFdelta;
							       NFdelta ==
								 undefined ->
								   PFdelta
							    end,
							remove =
							    if PFremove /=
								 undefined,
							       NFremove /=
								 undefined ->
								   'erlang_++'(PFremove,
									       NFremove,
									       TrUserData);
							       PFremove ==
								 undefined ->
								   NFremove;
							       NFremove ==
								 undefined ->
								   PFremove
							    end,
							removeStr =
							    if PFremoveStr /=
								 undefined,
							       NFremoveStr /=
								 undefined ->
								   'erlang_++'(PFremoveStr,
									       NFremoveStr,
									       TrUserData);
							       PFremoveStr ==
								 undefined ->
								   NFremoveStr;
							       NFremoveStr ==
								 undefined ->
								   PFremoveStr
							    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'/3}).
'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(#'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											     =
											     PFaggregationModulus,
											 aggregationModulusStr
											     =
											     PFaggregationModulusStr,
											 seqNum
											     =
											     PFseqNum,
											 bids
											     =
											     PFbids,
											 asks
											     =
											     PFasks},
						 #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											     =
											     NFaggregationModulus,
											 aggregationModulusStr
											     =
											     NFaggregationModulusStr,
											 seqNum
											     =
											     NFseqNum,
											 bids
											     =
											     NFbids,
											 asks
											     =
											     NFasks},
						 TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
						=
						if NFaggregationModulus =:=
						     undefined ->
						       PFaggregationModulus;
						   true -> NFaggregationModulus
						end,
					    aggregationModulusStr =
						if NFaggregationModulusStr =:=
						     undefined ->
						       PFaggregationModulusStr;
						   true ->
						       NFaggregationModulusStr
						end,
					    seqNum =
						if NFseqNum =:= undefined ->
						       PFseqNum;
						   true -> NFseqNum
						end,
					    bids =
						if PFbids /= undefined,
						   NFbids /= undefined ->
						       'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(PFbids,
														    NFbids,
														    TrUserData);
						   PFbids == undefined ->
						       NFbids;
						   NFbids == undefined -> PFbids
						end,
					    asks =
						if PFasks /= undefined,
						   NFasks /= undefined ->
						       'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(PFasks,
														    NFasks,
														    TrUserData);
						   PFasks == undefined ->
						       NFasks;
						   NFasks == undefined -> PFasks
						end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'/3}).
'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(#'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
											       =
											       PFtimestamp,
											   bid
											       =
											       PFbid,
											   ask
											       =
											       PFask},
						  #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
											       =
											       NFtimestamp,
											   bid
											       =
											       NFbid,
											   ask
											       =
											       NFask},
						  TrUserData) ->
    #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp =
						 if NFtimestamp =:= undefined ->
							PFtimestamp;
						    true -> NFtimestamp
						 end,
					     bid =
						 if PFbid /= undefined,
						    NFbid /= undefined ->
							'merge_msg_ProtobufMarkets.Order'(PFbid,
											  NFbid,
											  TrUserData);
						    PFbid == undefined -> NFbid;
						    NFbid == undefined -> PFbid
						 end,
					     ask =
						 if PFask /= undefined,
						    NFask /= undefined ->
							'merge_msg_ProtobufMarkets.Order'(PFask,
											  NFask,
											  TrUserData);
						    PFask == undefined -> NFask;
						    NFask == undefined -> PFask
						 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.TradesUpdate'/3}).
'merge_msg_ProtobufMarkets.TradesUpdate'(#'ProtobufMarkets.TradesUpdate'{trades
									     =
									     PFtrades},
					 #'ProtobufMarkets.TradesUpdate'{trades
									     =
									     NFtrades},
					 TrUserData) ->
    #'ProtobufMarkets.TradesUpdate'{trades =
					if PFtrades /= undefined,
					   NFtrades /= undefined ->
					       'erlang_++'(PFtrades, NFtrades,
							   TrUserData);
					   PFtrades == undefined -> NFtrades;
					   NFtrades == undefined -> PFtrades
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Interval.OHLC'/3}).
'merge_msg_ProtobufMarkets.Interval.OHLC'(#'ProtobufMarkets.Interval.OHLC'{openStr
									       =
									       PFopenStr,
									   highStr
									       =
									       PFhighStr,
									   lowStr
									       =
									       PFlowStr,
									   closeStr
									       =
									       PFcloseStr,
									   open
									       =
									       PFopen,
									   high
									       =
									       PFhigh,
									   low =
									       PFlow,
									   close
									       =
									       PFclose},
					  #'ProtobufMarkets.Interval.OHLC'{openStr
									       =
									       NFopenStr,
									   highStr
									       =
									       NFhighStr,
									   lowStr
									       =
									       NFlowStr,
									   closeStr
									       =
									       NFcloseStr,
									   open
									       =
									       NFopen,
									   high
									       =
									       NFhigh,
									   low =
									       NFlow,
									   close
									       =
									       NFclose},
					  _) ->
    #'ProtobufMarkets.Interval.OHLC'{openStr =
					 if NFopenStr =:= undefined ->
						PFopenStr;
					    true -> NFopenStr
					 end,
				     highStr =
					 if NFhighStr =:= undefined ->
						PFhighStr;
					    true -> NFhighStr
					 end,
				     lowStr =
					 if NFlowStr =:= undefined -> PFlowStr;
					    true -> NFlowStr
					 end,
				     closeStr =
					 if NFcloseStr =:= undefined ->
						PFcloseStr;
					    true -> NFcloseStr
					 end,
				     open =
					 if NFopen =:= undefined -> PFopen;
					    true -> NFopen
					 end,
				     high =
					 if NFhigh =:= undefined -> PFhigh;
					    true -> NFhigh
					 end,
				     low =
					 if NFlow =:= undefined -> PFlow;
					    true -> NFlow
					 end,
				     close =
					 if NFclose =:= undefined -> PFclose;
					    true -> NFclose
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Interval'/3}).
'merge_msg_ProtobufMarkets.Interval'(#'ProtobufMarkets.Interval'{closetime
								     =
								     PFclosetime,
								 period =
								     PFperiod,
								 ohlc = PFohlc,
								 volumeBaseStr =
								     PFvolumeBaseStr,
								 volumeQuoteStr
								     =
								     PFvolumeQuoteStr,
								 volumeBase =
								     PFvolumeBase,
								 volumeQuote =
								     PFvolumeQuote},
				     #'ProtobufMarkets.Interval'{closetime =
								     NFclosetime,
								 period =
								     NFperiod,
								 ohlc = NFohlc,
								 volumeBaseStr =
								     NFvolumeBaseStr,
								 volumeQuoteStr
								     =
								     NFvolumeQuoteStr,
								 volumeBase =
								     NFvolumeBase,
								 volumeQuote =
								     NFvolumeQuote},
				     TrUserData) ->
    #'ProtobufMarkets.Interval'{closetime =
				    if NFclosetime =:= undefined -> PFclosetime;
				       true -> NFclosetime
				    end,
				period =
				    if NFperiod =:= undefined -> PFperiod;
				       true -> NFperiod
				    end,
				ohlc =
				    if PFohlc /= undefined,
				       NFohlc /= undefined ->
					   'merge_msg_ProtobufMarkets.Interval.OHLC'(PFohlc,
										     NFohlc,
										     TrUserData);
				       PFohlc == undefined -> NFohlc;
				       NFohlc == undefined -> PFohlc
				    end,
				volumeBaseStr =
				    if NFvolumeBaseStr =:= undefined ->
					   PFvolumeBaseStr;
				       true -> NFvolumeBaseStr
				    end,
				volumeQuoteStr =
				    if NFvolumeQuoteStr =:= undefined ->
					   PFvolumeQuoteStr;
				       true -> NFvolumeQuoteStr
				    end,
				volumeBase =
				    if NFvolumeBase =:= undefined ->
					   PFvolumeBase;
				       true -> NFvolumeBase
				    end,
				volumeQuote =
				    if NFvolumeQuote =:= undefined ->
					   PFvolumeQuote;
				       true -> NFvolumeQuote
				    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.IntervalsUpdate'/3}).
'merge_msg_ProtobufMarkets.IntervalsUpdate'(#'ProtobufMarkets.IntervalsUpdate'{intervals
										   =
										   PFintervals},
					    #'ProtobufMarkets.IntervalsUpdate'{intervals
										   =
										   NFintervals},
					    TrUserData) ->
    #'ProtobufMarkets.IntervalsUpdate'{intervals =
					   if PFintervals /= undefined,
					      NFintervals /= undefined ->
						  'erlang_++'(PFintervals,
							      NFintervals,
							      TrUserData);
					      PFintervals == undefined ->
						  NFintervals;
					      NFintervals == undefined ->
						  PFintervals
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.SummaryUpdate'/3}).
'merge_msg_ProtobufMarkets.SummaryUpdate'(#'ProtobufMarkets.SummaryUpdate'{lastStr
									       =
									       PFlastStr,
									   highStr
									       =
									       PFhighStr,
									   lowStr
									       =
									       PFlowStr,
									   volumeBaseStr
									       =
									       PFvolumeBaseStr,
									   volumeQuoteStr
									       =
									       PFvolumeQuoteStr,
									   changeAbsoluteStr
									       =
									       PFchangeAbsoluteStr,
									   changePercentStr
									       =
									       PFchangePercentStr,
									   numTrades
									       =
									       PFnumTrades,
									   last
									       =
									       PFlast,
									   high
									       =
									       PFhigh,
									   low =
									       PFlow,
									   volumeBase
									       =
									       PFvolumeBase,
									   volumeQuote
									       =
									       PFvolumeQuote,
									   changeAbsolute
									       =
									       PFchangeAbsolute,
									   changePercent
									       =
									       PFchangePercent},
					  #'ProtobufMarkets.SummaryUpdate'{lastStr
									       =
									       NFlastStr,
									   highStr
									       =
									       NFhighStr,
									   lowStr
									       =
									       NFlowStr,
									   volumeBaseStr
									       =
									       NFvolumeBaseStr,
									   volumeQuoteStr
									       =
									       NFvolumeQuoteStr,
									   changeAbsoluteStr
									       =
									       NFchangeAbsoluteStr,
									   changePercentStr
									       =
									       NFchangePercentStr,
									   numTrades
									       =
									       NFnumTrades,
									   last
									       =
									       NFlast,
									   high
									       =
									       NFhigh,
									   low =
									       NFlow,
									   volumeBase
									       =
									       NFvolumeBase,
									   volumeQuote
									       =
									       NFvolumeQuote,
									   changeAbsolute
									       =
									       NFchangeAbsolute,
									   changePercent
									       =
									       NFchangePercent},
					  _) ->
    #'ProtobufMarkets.SummaryUpdate'{lastStr =
					 if NFlastStr =:= undefined ->
						PFlastStr;
					    true -> NFlastStr
					 end,
				     highStr =
					 if NFhighStr =:= undefined ->
						PFhighStr;
					    true -> NFhighStr
					 end,
				     lowStr =
					 if NFlowStr =:= undefined -> PFlowStr;
					    true -> NFlowStr
					 end,
				     volumeBaseStr =
					 if NFvolumeBaseStr =:= undefined ->
						PFvolumeBaseStr;
					    true -> NFvolumeBaseStr
					 end,
				     volumeQuoteStr =
					 if NFvolumeQuoteStr =:= undefined ->
						PFvolumeQuoteStr;
					    true -> NFvolumeQuoteStr
					 end,
				     changeAbsoluteStr =
					 if NFchangeAbsoluteStr =:= undefined ->
						PFchangeAbsoluteStr;
					    true -> NFchangeAbsoluteStr
					 end,
				     changePercentStr =
					 if NFchangePercentStr =:= undefined ->
						PFchangePercentStr;
					    true -> NFchangePercentStr
					 end,
				     numTrades =
					 if NFnumTrades =:= undefined ->
						PFnumTrades;
					    true -> NFnumTrades
					 end,
				     last =
					 if NFlast =:= undefined -> PFlast;
					    true -> NFlast
					 end,
				     high =
					 if NFhigh =:= undefined -> PFhigh;
					    true -> NFhigh
					 end,
				     low =
					 if NFlow =:= undefined -> PFlow;
					    true -> NFlow
					 end,
				     volumeBase =
					 if NFvolumeBase =:= undefined ->
						PFvolumeBase;
					    true -> NFvolumeBase
					 end,
				     volumeQuote =
					 if NFvolumeQuote =:= undefined ->
						PFvolumeQuote;
					    true -> NFvolumeQuote
					 end,
				     changeAbsolute =
					 if NFchangeAbsolute =:= undefined ->
						PFchangeAbsolute;
					    true -> NFchangeAbsolute
					 end,
				     changePercent =
					 if NFchangePercent =:= undefined ->
						PFchangePercent;
					    true -> NFchangePercent
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.SparklineUpdate'/3}).
'merge_msg_ProtobufMarkets.SparklineUpdate'(#'ProtobufMarkets.SparklineUpdate'{time
										   =
										   PFtime,
									       price
										   =
										   PFprice,
									       priceStr
										   =
										   PFpriceStr},
					    #'ProtobufMarkets.SparklineUpdate'{time
										   =
										   NFtime,
									       price
										   =
										   NFprice,
									       priceStr
										   =
										   NFpriceStr},
					    _) ->
    #'ProtobufMarkets.SparklineUpdate'{time =
					   if NFtime =:= undefined -> PFtime;
					      true -> NFtime
					   end,
				       price =
					   if NFprice =:= undefined -> PFprice;
					      true -> NFprice
					   end,
				       priceStr =
					   if NFpriceStr =:= undefined ->
						  PFpriceStr;
					      true -> NFpriceStr
					   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufMarkets.Index' ->
	  'v_msg_ProtobufMarkets.Index'(Msg, [MsgName],
					TrUserData);
      'ProtobufMarkets.IndexUpdateMessage' ->
	  'v_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
						     [MsgName], TrUserData);
      'ProtobufMarkets.TickerUpdate' ->
	  'v_msg_ProtobufMarkets.TickerUpdate'(Msg, [MsgName],
					       TrUserData);
      'ProtobufMarkets.Ticker' ->
	  'v_msg_ProtobufMarkets.Ticker'(Msg, [MsgName],
					 TrUserData);
      'ProtobufMarkets.Market' ->
	  'v_msg_ProtobufMarkets.Market'(Msg, [MsgName],
					 TrUserData);
      'ProtobufMarkets.Order' ->
	  'v_msg_ProtobufMarkets.Order'(Msg, [MsgName],
					TrUserData);
      'ProtobufMarkets.Trade' ->
	  'v_msg_ProtobufMarkets.Trade'(Msg, [MsgName],
					TrUserData);
      'ProtobufMarkets.MarketUpdateMessage' ->
	  'v_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
						      [MsgName], TrUserData);
      'ProtobufMarkets.OrderBookUpdate' ->
	  'v_msg_ProtobufMarkets.OrderBookUpdate'(Msg, [MsgName],
						  TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas' ->
	  'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								   [MsgName],
								   TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate' ->
	  'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
						       [MsgName], TrUserData);
      'ProtobufMarkets.OrderBookSpreadUpdate' ->
	  'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
							[MsgName], TrUserData);
      'ProtobufMarkets.TradesUpdate' ->
	  'v_msg_ProtobufMarkets.TradesUpdate'(Msg, [MsgName],
					       TrUserData);
      'ProtobufMarkets.Interval.OHLC' ->
	  'v_msg_ProtobufMarkets.Interval.OHLC'(Msg, [MsgName],
						TrUserData);
      'ProtobufMarkets.Interval' ->
	  'v_msg_ProtobufMarkets.Interval'(Msg, [MsgName],
					   TrUserData);
      'ProtobufMarkets.IntervalsUpdate' ->
	  'v_msg_ProtobufMarkets.IntervalsUpdate'(Msg, [MsgName],
						  TrUserData);
      'ProtobufMarkets.SummaryUpdate' ->
	  'v_msg_ProtobufMarkets.SummaryUpdate'(Msg, [MsgName],
						TrUserData);
      'ProtobufMarkets.SparklineUpdate' ->
	  'v_msg_ProtobufMarkets.SparklineUpdate'(Msg, [MsgName],
						  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Index'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Index'/3}).
'v_msg_ProtobufMarkets.Index'(#'ProtobufMarkets.Index'{id
							   = F1,
						       symbol = F2,
						       indexType = F3,
						       cwIndex = F4,
						       exchangeId = F5,
						       instrumentId = F6},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [symbol | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [indexType | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [cwIndex | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_uint64(F5, [exchangeId | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_uint64(F6, [instrumentId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Index'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Index'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.IndexUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.IndexUpdateMessage'/3}).
'v_msg_ProtobufMarkets.IndexUpdateMessage'(#'ProtobufMarkets.IndexUpdateMessage'{index
										     =
										     F1,
										 'Update'
										     =
										     F2},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Index'(F1, [index | Path],
					 TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {tickerUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.TickerUpdate'(OF2,
					       [tickerUpdate, 'Update' | Path],
					       TrUserData);
      {intervalsUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.IntervalsUpdate'(OF2,
						  [intervalsUpdate, 'Update'
						   | Path],
						  TrUserData);
      {summaryUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SummaryUpdate'(OF2,
						[summaryUpdate, 'Update'
						 | Path],
						TrUserData);
      {sparklineUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SparklineUpdate'(OF2,
						  [sparklineUpdate, 'Update'
						   | Path],
						  TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.IndexUpdateMessage'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.IndexUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.TickerUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.TickerUpdate'/3}).
'v_msg_ProtobufMarkets.TickerUpdate'(#'ProtobufMarkets.TickerUpdate'{tickers
									 = F1},
				     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Ticker'(Elem,
					       [tickers | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Ticker'}},
			 F1, [tickers | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.TickerUpdate'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.TickerUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Ticker'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Ticker'/3}).
'v_msg_ProtobufMarkets.Ticker'(#'ProtobufMarkets.Ticker'{value
							     = F1,
							 timestamp = F2,
							 timestampNano = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [timestampNano | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Ticker'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Ticker'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Market'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Market'/3}).
'v_msg_ProtobufMarkets.Market'(#'ProtobufMarkets.Market'{exchangeId
							     = F1,
							 currencyPairId = F2,
							 marketId = F3,
							 exchange = F4,
							 currencyPair = F5},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_uint64(F1, [exchangeId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, [currencyPairId | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [marketId | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [exchange | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [currencyPair | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Market'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Market'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Order'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Order'/3}).
'v_msg_ProtobufMarkets.Order'(#'ProtobufMarkets.Order'{priceStr
							   = F1,
						       amountStr = F2,
						       price = F3, amount = F4},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [priceStr | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [amountStr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_float(F3, [price | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [amount | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Order'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Order'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Trade'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Trade'/3}).
'v_msg_ProtobufMarkets.Trade'(#'ProtobufMarkets.Trade'{externalId
							   = F1,
						       timestamp = F2,
						       timestampMillis = F3,
						       timestampNano = F4,
						       priceStr = F5,
						       amountStr = F6,
						       price = F7, amount = F8,
						       priceDouble = F9,
						       amountDouble = F10,
						       id = F11},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [externalId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [timestampMillis | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [timestampNano | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [priceStr | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [amountStr | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [price | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [amount | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_double(F9, [priceDouble | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_double(F10, [amountDouble | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Trade'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Trade'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.MarketUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.MarketUpdateMessage'/3}).
'v_msg_ProtobufMarkets.MarketUpdateMessage'(#'ProtobufMarkets.MarketUpdateMessage'{market
										       =
										       F1,
										   'Update'
										       =
										       F2},
					    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Market'(F1, [market | Path],
					  TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {orderBookUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.OrderBookUpdate'(OF2,
						  [orderBookUpdate, 'Update'
						   | Path],
						  TrUserData);
      {orderBookDeltaUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(OF2,
						       [orderBookDeltaUpdate,
							'Update'
							| Path],
						       TrUserData);
      {orderBookSpreadUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(OF2,
							[orderBookSpreadUpdate,
							 'Update'
							 | Path],
							TrUserData);
      {tradesUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.TradesUpdate'(OF2,
					       [tradesUpdate, 'Update' | Path],
					       TrUserData);
      {intervalsUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.IntervalsUpdate'(OF2,
						  [intervalsUpdate, 'Update'
						   | Path],
						  TrUserData);
      {summaryUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SummaryUpdate'(OF2,
						[summaryUpdate, 'Update'
						 | Path],
						TrUserData);
      {sparklineUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SparklineUpdate'(OF2,
						  [sparklineUpdate, 'Update'
						   | Path],
						  TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.MarketUpdateMessage'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.MarketUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookUpdate'/3}).
'v_msg_ProtobufMarkets.OrderBookUpdate'(#'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
									       =
									       F1,
									   seqNum
									       =
									       F2,
									   bids
									       =
									       F3,
									   asks
									       =
									       F4,
									   aggregationModulus
									       =
									       F5},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [aggregationModulusStr | Path],
			 TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [seqNum | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [bids | Path],
					      TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F3, [bids | Path])
    end,
    if is_list(F4) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [asks | Path],
					      TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F4, [asks | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_float(F5, [aggregationModulus | Path],
			TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookUpdate'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/3}).
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(#'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														 =
														 F1,
													     delta
														 =
														 F2,
													     remove
														 =
														 F3,
													     removeStr
														 =
														 F4},
							 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [set | Path],
					      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F1, [set | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [delta | Path],
					      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F2, [delta | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_float(Elem, [remove | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, float}, F3,
			 [remove | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [removeStr | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [removeStr | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(X,
							 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'/3}).
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(#'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											 =
											 F1,
										     aggregationModulusStr
											 =
											 F2,
										     seqNum
											 =
											 F3,
										     bids
											 =
											 F4,
										     asks
											 =
											 F5},
					     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_float(F1, [aggregationModulus | Path],
			TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [aggregationModulusStr | Path],
			 TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [seqNum | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(F4,
								    [bids
								     | Path],
								    TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(F5,
								    [asks
								     | Path],
								    TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(X, Path,
					     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'/3}).
'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(#'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
											   =
											   F1,
										       bid
											   =
											   F2,
										       ask
											   =
											   F3},
					      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [timestamp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Order'(F2, [bid | Path],
					 TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Order'(F3, [ask | Path],
					 TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(X, Path,
					      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookSpreadUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.TradesUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.TradesUpdate'/3}).
'v_msg_ProtobufMarkets.TradesUpdate'(#'ProtobufMarkets.TradesUpdate'{trades
									 = F1},
				     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Trade'(Elem,
					      [trades | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Trade'}},
			 F1, [trades | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.TradesUpdate'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.TradesUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Interval.OHLC'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Interval.OHLC'/3}).
'v_msg_ProtobufMarkets.Interval.OHLC'(#'ProtobufMarkets.Interval.OHLC'{openStr
									   = F1,
								       highStr =
									   F2,
								       lowStr =
									   F3,
								       closeStr
									   = F4,
								       open =
									   F5,
								       high =
									   F6,
								       low = F7,
								       close =
									   F8},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [openStr | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [highStr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [lowStr | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [closeStr | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_float(F5, [open | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [high | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [low | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [close | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Interval.OHLC'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.Interval.OHLC'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Interval'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Interval'/3}).
'v_msg_ProtobufMarkets.Interval'(#'ProtobufMarkets.Interval'{closetime
								 = F1,
							     period = F2,
							     ohlc = F3,
							     volumeBaseStr = F4,
							     volumeQuoteStr =
								 F5,
							     volumeBase = F6,
							     volumeQuote = F7},
				 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [closetime | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [period | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Interval.OHLC'(F3, [ohlc | Path],
						 TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [volumeBaseStr | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [volumeQuoteStr | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_float(F6, [volumeBase | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_float(F7, [volumeQuote | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Interval'(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.Interval'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.IntervalsUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.IntervalsUpdate'/3}).
'v_msg_ProtobufMarkets.IntervalsUpdate'(#'ProtobufMarkets.IntervalsUpdate'{intervals
									       =
									       F1},
					Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Interval'(Elem,
						 [intervals | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Interval'}},
			 F1, [intervals | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.IntervalsUpdate'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.IntervalsUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.SummaryUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.SummaryUpdate'/3}).
'v_msg_ProtobufMarkets.SummaryUpdate'(#'ProtobufMarkets.SummaryUpdate'{lastStr
									   = F1,
								       highStr =
									   F2,
								       lowStr =
									   F3,
								       volumeBaseStr
									   = F4,
								       volumeQuoteStr
									   = F5,
								       changeAbsoluteStr
									   = F6,
								       changePercentStr
									   = F7,
								       numTrades
									   = F8,
								       last =
									   F9,
								       high =
									   F10,
								       low =
									   F11,
								       volumeBase
									   =
									   F12,
								       volumeQuote
									   =
									   F13,
								       changeAbsolute
									   =
									   F14,
								       changePercent
									   =
									   F15},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [lastStr | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [highStr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [lowStr | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [volumeBaseStr | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [volumeQuoteStr | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [changeAbsoluteStr | Path],
			 TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_string(F7, [changePercentStr | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [numTrades | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_float(F9, [last | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_float(F10, [high | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_float(F11, [low | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_float(F12, [volumeBase | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_float(F13, [volumeQuote | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true ->
	   v_type_float(F14, [changeAbsolute | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true ->
	   v_type_float(F15, [changePercent | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.SummaryUpdate'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.SummaryUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.SparklineUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.SparklineUpdate'/3}).
'v_msg_ProtobufMarkets.SparklineUpdate'(#'ProtobufMarkets.SparklineUpdate'{time
									       =
									       F1,
									   price
									       =
									       F2,
									   priceStr
									       =
									       F3},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [time | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [price | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [priceStr | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.SparklineUpdate'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.SparklineUpdate'},
		  X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'ProtobufMarkets.Index'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = symbol, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = indexType, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = cwIndex, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []},
       #field{name = exchangeId, fnum = 5, rnum = 6,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = instrumentId, fnum = 6, rnum = 7,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.IndexUpdateMessage'},
      [#field{name = index, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Index'},
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = tickerUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufMarkets.TickerUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = intervalsUpdate, fnum = 3, rnum = 3,
			      type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = summaryUpdate, fnum = 4, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = sparklineUpdate, fnum = 5, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.TickerUpdate'},
      [#field{name = tickers, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Ticker'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.Ticker'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = timestampNano, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Market'},
      [#field{name = exchangeId, fnum = 3, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = currencyPairId, fnum = 4, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = marketId, fnum = 5, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = exchange, fnum = 1, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = currencyPair, fnum = 2, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Order'},
      [#field{name = priceStr, fnum = 3, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountStr, fnum = 4, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = price, fnum = 1, rnum = 4, type = float,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 2, rnum = 5, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Trade'},
      [#field{name = externalId, fnum = 11, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = timestampMillis, fnum = 5, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = timestampNano, fnum = 10, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = priceStr, fnum = 8, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountStr, fnum = 9, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 9, type = float,
	      occurrence = optional, opts = []},
       #field{name = priceDouble, fnum = 6, rnum = 10,
	      type = double, occurrence = optional, opts = []},
       #field{name = amountDouble, fnum = 7, rnum = 11,
	      type = double, occurrence = optional, opts = []},
       #field{name = id, fnum = 1, rnum = 12, type = int64,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.MarketUpdateMessage'},
      [#field{name = market, fnum = 9, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Market'},
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = orderBookUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufMarkets.OrderBookUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = orderBookDeltaUpdate, fnum = 3, rnum = 3,
			      type =
				  {msg, 'ProtobufMarkets.OrderBookDeltaUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = orderBookSpreadUpdate, fnum = 11,
			      rnum = 3,
			      type =
				  {msg,
				   'ProtobufMarkets.OrderBookSpreadUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = tradesUpdate, fnum = 4, rnum = 3,
			      type = {msg, 'ProtobufMarkets.TradesUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = intervalsUpdate, fnum = 5, rnum = 3,
			      type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = summaryUpdate, fnum = 6, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = sparklineUpdate, fnum = 7, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.OrderBookUpdate'},
      [#field{name = aggregationModulusStr, fnum = 4,
	      rnum = 2, type = string, occurrence = optional,
	      opts = []},
       #field{name = seqNum, fnum = 5, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = bids, fnum = 1, rnum = 4,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = asks, fnum = 2, rnum = 5,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = aggregationModulus, fnum = 3, rnum = 6,
	      type = float, occurrence = optional, opts = []}]},
     {{msg,
       'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
      [#field{name = set, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = delta, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = remove, fnum = 3, rnum = 4, type = float,
	      occurrence = repeated, opts = []},
       #field{name = removeStr, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.OrderBookDeltaUpdate'},
      [#field{name = aggregationModulus, fnum = 3, rnum = 2,
	      type = float, occurrence = optional, opts = []},
       #field{name = aggregationModulusStr, fnum = 4, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = seqNum, fnum = 5, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = bids, fnum = 1, rnum = 5,
	      type =
		  {msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	      occurrence = optional, opts = []},
       #field{name = asks, fnum = 2, rnum = 6,
	      type =
		  {msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.OrderBookSpreadUpdate'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = bid, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = optional, opts = []},
       #field{name = ask, fnum = 3, rnum = 4,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.TradesUpdate'},
      [#field{name = trades, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Trade'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.Interval.OHLC'},
      [#field{name = openStr, fnum = 5, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = highStr, fnum = 6, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = lowStr, fnum = 7, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = closeStr, fnum = 8, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = open, fnum = 1, rnum = 6, type = float,
	      occurrence = optional, opts = []},
       #field{name = high, fnum = 2, rnum = 7, type = float,
	      occurrence = optional, opts = []},
       #field{name = low, fnum = 3, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = close, fnum = 4, rnum = 9, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Interval'},
      [#field{name = closetime, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = period, fnum = 4, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = ohlc, fnum = 2, rnum = 4,
	      type = {msg, 'ProtobufMarkets.Interval.OHLC'},
	      occurrence = optional, opts = []},
       #field{name = volumeBaseStr, fnum = 6, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeQuoteStr, fnum = 7, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeBase, fnum = 3, rnum = 7,
	      type = float, occurrence = optional, opts = []},
       #field{name = volumeQuote, fnum = 5, rnum = 8,
	      type = float, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.IntervalsUpdate'},
      [#field{name = intervals, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Interval'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.SummaryUpdate'},
      [#field{name = lastStr, fnum = 10, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = highStr, fnum = 11, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = lowStr, fnum = 12, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeBaseStr, fnum = 13, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeQuoteStr, fnum = 14, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = changeAbsoluteStr, fnum = 15, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = changePercentStr, fnum = 16, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = numTrades, fnum = 8, rnum = 9,
	      type = int32, occurrence = optional, opts = []},
       #field{name = last, fnum = 2, rnum = 10, type = float,
	      occurrence = optional, opts = []},
       #field{name = high, fnum = 3, rnum = 11, type = float,
	      occurrence = optional, opts = []},
       #field{name = low, fnum = 4, rnum = 12, type = float,
	      occurrence = optional, opts = []},
       #field{name = volumeBase, fnum = 5, rnum = 13,
	      type = float, occurrence = optional, opts = []},
       #field{name = volumeQuote, fnum = 9, rnum = 14,
	      type = float, occurrence = optional, opts = []},
       #field{name = changeAbsolute, fnum = 6, rnum = 15,
	      type = float, occurrence = optional, opts = []},
       #field{name = changePercent, fnum = 7, rnum = 16,
	      type = float, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.SparklineUpdate'},
      [#field{name = time, fnum = 2, rnum = 2, type = int64,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 3, type = float,
	      occurrence = optional, opts = []},
       #field{name = priceStr, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['ProtobufMarkets.Index',
     'ProtobufMarkets.IndexUpdateMessage',
     'ProtobufMarkets.TickerUpdate',
     'ProtobufMarkets.Ticker', 'ProtobufMarkets.Market',
     'ProtobufMarkets.Order', 'ProtobufMarkets.Trade',
     'ProtobufMarkets.MarketUpdateMessage',
     'ProtobufMarkets.OrderBookUpdate',
     'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
     'ProtobufMarkets.OrderBookDeltaUpdate',
     'ProtobufMarkets.OrderBookSpreadUpdate',
     'ProtobufMarkets.TradesUpdate',
     'ProtobufMarkets.Interval.OHLC',
     'ProtobufMarkets.Interval',
     'ProtobufMarkets.IntervalsUpdate',
     'ProtobufMarkets.SummaryUpdate',
     'ProtobufMarkets.SparklineUpdate'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ProtobufMarkets.Index',
     'ProtobufMarkets.IndexUpdateMessage',
     'ProtobufMarkets.TickerUpdate',
     'ProtobufMarkets.Ticker', 'ProtobufMarkets.Market',
     'ProtobufMarkets.Order', 'ProtobufMarkets.Trade',
     'ProtobufMarkets.MarketUpdateMessage',
     'ProtobufMarkets.OrderBookUpdate',
     'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
     'ProtobufMarkets.OrderBookDeltaUpdate',
     'ProtobufMarkets.OrderBookSpreadUpdate',
     'ProtobufMarkets.TradesUpdate',
     'ProtobufMarkets.Interval.OHLC',
     'ProtobufMarkets.Interval',
     'ProtobufMarkets.IntervalsUpdate',
     'ProtobufMarkets.SummaryUpdate',
     'ProtobufMarkets.SparklineUpdate'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('ProtobufMarkets.Index') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = symbol, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = indexType, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = cwIndex, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []},
     #field{name = exchangeId, fnum = 5, rnum = 6,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = instrumentId, fnum = 6, rnum = 7,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.IndexUpdateMessage') ->
    [#field{name = index, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Index'},
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = tickerUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufMarkets.TickerUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = intervalsUpdate, fnum = 3, rnum = 3,
			    type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = summaryUpdate, fnum = 4, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = sparklineUpdate, fnum = 5, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.TickerUpdate') ->
    [#field{name = tickers, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Ticker'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.Ticker') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = timestampNano, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Market') ->
    [#field{name = exchangeId, fnum = 3, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = currencyPairId, fnum = 4, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = marketId, fnum = 5, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = exchange, fnum = 1, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = currencyPair, fnum = 2, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Order') ->
    [#field{name = priceStr, fnum = 3, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountStr, fnum = 4, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = price, fnum = 1, rnum = 4, type = float,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 2, rnum = 5, type = float,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Trade') ->
    [#field{name = externalId, fnum = 11, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = timestampMillis, fnum = 5, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = timestampNano, fnum = 10, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = priceStr, fnum = 8, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountStr, fnum = 9, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 9, type = float,
	    occurrence = optional, opts = []},
     #field{name = priceDouble, fnum = 6, rnum = 10,
	    type = double, occurrence = optional, opts = []},
     #field{name = amountDouble, fnum = 7, rnum = 11,
	    type = double, occurrence = optional, opts = []},
     #field{name = id, fnum = 1, rnum = 12, type = int64,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.MarketUpdateMessage') ->
    [#field{name = market, fnum = 9, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Market'},
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = orderBookUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufMarkets.OrderBookUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = orderBookDeltaUpdate, fnum = 3, rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.OrderBookDeltaUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = orderBookSpreadUpdate, fnum = 11,
			    rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.OrderBookSpreadUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = tradesUpdate, fnum = 4, rnum = 3,
			    type = {msg, 'ProtobufMarkets.TradesUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = intervalsUpdate, fnum = 5, rnum = 3,
			    type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = summaryUpdate, fnum = 6, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = sparklineUpdate, fnum = 7, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.OrderBookUpdate') ->
    [#field{name = aggregationModulusStr, fnum = 4,
	    rnum = 2, type = string, occurrence = optional,
	    opts = []},
     #field{name = seqNum, fnum = 5, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = bids, fnum = 1, rnum = 4,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = asks, fnum = 2, rnum = 5,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = aggregationModulus, fnum = 3, rnum = 6,
	    type = float, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas') ->
    [#field{name = set, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = delta, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = remove, fnum = 3, rnum = 4, type = float,
	    occurrence = repeated, opts = []},
     #field{name = removeStr, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.OrderBookDeltaUpdate') ->
    [#field{name = aggregationModulus, fnum = 3, rnum = 2,
	    type = float, occurrence = optional, opts = []},
     #field{name = aggregationModulusStr, fnum = 4, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = seqNum, fnum = 5, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = bids, fnum = 1, rnum = 5,
	    type =
		{msg,
		 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	    occurrence = optional, opts = []},
     #field{name = asks, fnum = 2, rnum = 6,
	    type =
		{msg,
		 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.OrderBookSpreadUpdate') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = bid, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = optional, opts = []},
     #field{name = ask, fnum = 3, rnum = 4,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.TradesUpdate') ->
    [#field{name = trades, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Trade'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.Interval.OHLC') ->
    [#field{name = openStr, fnum = 5, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = highStr, fnum = 6, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = lowStr, fnum = 7, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = closeStr, fnum = 8, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = open, fnum = 1, rnum = 6, type = float,
	    occurrence = optional, opts = []},
     #field{name = high, fnum = 2, rnum = 7, type = float,
	    occurrence = optional, opts = []},
     #field{name = low, fnum = 3, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = close, fnum = 4, rnum = 9, type = float,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Interval') ->
    [#field{name = closetime, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = period, fnum = 4, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = ohlc, fnum = 2, rnum = 4,
	    type = {msg, 'ProtobufMarkets.Interval.OHLC'},
	    occurrence = optional, opts = []},
     #field{name = volumeBaseStr, fnum = 6, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeQuoteStr, fnum = 7, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeBase, fnum = 3, rnum = 7,
	    type = float, occurrence = optional, opts = []},
     #field{name = volumeQuote, fnum = 5, rnum = 8,
	    type = float, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.IntervalsUpdate') ->
    [#field{name = intervals, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Interval'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.SummaryUpdate') ->
    [#field{name = lastStr, fnum = 10, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = highStr, fnum = 11, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = lowStr, fnum = 12, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeBaseStr, fnum = 13, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeQuoteStr, fnum = 14, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = changeAbsoluteStr, fnum = 15, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = changePercentStr, fnum = 16, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = numTrades, fnum = 8, rnum = 9,
	    type = int32, occurrence = optional, opts = []},
     #field{name = last, fnum = 2, rnum = 10, type = float,
	    occurrence = optional, opts = []},
     #field{name = high, fnum = 3, rnum = 11, type = float,
	    occurrence = optional, opts = []},
     #field{name = low, fnum = 4, rnum = 12, type = float,
	    occurrence = optional, opts = []},
     #field{name = volumeBase, fnum = 5, rnum = 13,
	    type = float, occurrence = optional, opts = []},
     #field{name = volumeQuote, fnum = 9, rnum = 14,
	    type = float, occurrence = optional, opts = []},
     #field{name = changeAbsolute, fnum = 6, rnum = 15,
	    type = float, occurrence = optional, opts = []},
     #field{name = changePercent, fnum = 7, rnum = 16,
	    type = float, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.SparklineUpdate') ->
    [#field{name = time, fnum = 2, rnum = 2, type = int64,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 3, type = float,
	    occurrence = optional, opts = []},
     #field{name = priceStr, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ProtobufMarkets.Index">>) -> 'ProtobufMarkets.Index';
fqbin_to_msg_name(<<"ProtobufMarkets.IndexUpdateMessage">>) ->
    'ProtobufMarkets.IndexUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.TickerUpdate">>) ->
    'ProtobufMarkets.TickerUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.Ticker">>) -> 'ProtobufMarkets.Ticker';
fqbin_to_msg_name(<<"ProtobufMarkets.Market">>) -> 'ProtobufMarkets.Market';
fqbin_to_msg_name(<<"ProtobufMarkets.Order">>) -> 'ProtobufMarkets.Order';
fqbin_to_msg_name(<<"ProtobufMarkets.Trade">>) -> 'ProtobufMarkets.Trade';
fqbin_to_msg_name(<<"ProtobufMarkets.MarketUpdateMessage">>) ->
    'ProtobufMarkets.MarketUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookUpdate">>) ->
    'ProtobufMarkets.OrderBookUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas">>) ->
    'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookDeltaUpdate">>) ->
    'ProtobufMarkets.OrderBookDeltaUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookSpreadUpdate">>) ->
    'ProtobufMarkets.OrderBookSpreadUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.TradesUpdate">>) ->
    'ProtobufMarkets.TradesUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.Interval.OHLC">>) ->
    'ProtobufMarkets.Interval.OHLC';
fqbin_to_msg_name(<<"ProtobufMarkets.Interval">>) ->
    'ProtobufMarkets.Interval';
fqbin_to_msg_name(<<"ProtobufMarkets.IntervalsUpdate">>) ->
    'ProtobufMarkets.IntervalsUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.SummaryUpdate">>) ->
    'ProtobufMarkets.SummaryUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.SparklineUpdate">>) ->
    'ProtobufMarkets.SparklineUpdate';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ProtobufMarkets.Index') -> <<"ProtobufMarkets.Index">>;
msg_name_to_fqbin('ProtobufMarkets.IndexUpdateMessage') ->
    <<"ProtobufMarkets.IndexUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.TickerUpdate') ->
    <<"ProtobufMarkets.TickerUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.Ticker') -> <<"ProtobufMarkets.Ticker">>;
msg_name_to_fqbin('ProtobufMarkets.Market') -> <<"ProtobufMarkets.Market">>;
msg_name_to_fqbin('ProtobufMarkets.Order') -> <<"ProtobufMarkets.Order">>;
msg_name_to_fqbin('ProtobufMarkets.Trade') -> <<"ProtobufMarkets.Trade">>;
msg_name_to_fqbin('ProtobufMarkets.MarketUpdateMessage') ->
    <<"ProtobufMarkets.MarketUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookUpdate') ->
    <<"ProtobufMarkets.OrderBookUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas') ->
    <<"ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookDeltaUpdate') ->
    <<"ProtobufMarkets.OrderBookDeltaUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookSpreadUpdate') ->
    <<"ProtobufMarkets.OrderBookSpreadUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.TradesUpdate') ->
    <<"ProtobufMarkets.TradesUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.Interval.OHLC') ->
    <<"ProtobufMarkets.Interval.OHLC">>;
msg_name_to_fqbin('ProtobufMarkets.Interval') ->
    <<"ProtobufMarkets.Interval">>;
msg_name_to_fqbin('ProtobufMarkets.IntervalsUpdate') ->
    <<"ProtobufMarkets.IntervalsUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.SummaryUpdate') ->
    <<"ProtobufMarkets.SummaryUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.SparklineUpdate') ->
    <<"ProtobufMarkets.SparklineUpdate">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'ProtobufMarkets'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "index.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["index.proto", "market.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["index", "market"].


get_msg_containment("index") ->
    ['ProtobufMarkets.Index',
     'ProtobufMarkets.IndexUpdateMessage',
     'ProtobufMarkets.Ticker',
     'ProtobufMarkets.TickerUpdate'];
get_msg_containment("market") ->
    ['ProtobufMarkets.Interval',
     'ProtobufMarkets.Interval.OHLC',
     'ProtobufMarkets.IntervalsUpdate',
     'ProtobufMarkets.Market',
     'ProtobufMarkets.MarketUpdateMessage',
     'ProtobufMarkets.Order',
     'ProtobufMarkets.OrderBookDeltaUpdate',
     'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
     'ProtobufMarkets.OrderBookSpreadUpdate',
     'ProtobufMarkets.OrderBookUpdate',
     'ProtobufMarkets.SparklineUpdate',
     'ProtobufMarkets.SummaryUpdate',
     'ProtobufMarkets.Trade',
     'ProtobufMarkets.TradesUpdate'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("index") -> 'ProtobufMarkets';
get_pkg_containment("market") -> 'ProtobufMarkets';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("index") -> [];
get_service_containment("market") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("index") -> [];
get_rpc_containment("market") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("index") -> [];
get_enum_containment("market") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Order">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Ticker">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Interval.OHLC">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Market">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.TradesUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Trade">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.SummaryUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.SparklineUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookSpreadUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookDeltaUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.MarketUpdateMessage">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.IntervalsUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.TickerUpdate">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.IndexUpdateMessage">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Index">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Interval">>) -> "market";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"ProtobufMarkets">>) ->
    ["index", "market"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.1".

gpb_version_as_list() ->
    [4,7,1].
