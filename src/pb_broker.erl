%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.1
-module(pb_broker).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_ProtobufBroker.FundingType'/1, 'enum_value_by_symbol_ProtobufBroker.FundingType'/1]).
-export(['enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'/1, 'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'/1]).
-export(['enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'/1, 'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'/1]).
-export(['enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'/1, 'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'/1]).
-export(['enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'/1, 'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_broker.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'ProtobufBroker.FundingType'() :: 'Spot' | 'Margin'.
-type 'ProtobufBroker.PrivateOrder.Type'() :: 'Market' | 'Limit' | 'StopLoss' | 'StopLossLimit' | 'TakeProfit' | 'TakeProfitLimit' | 'StopLossTakeProfit' | 'StopLossTakeProfitLimit' | 'TrailingStopLoss' | 'TrailingStopLossLimit' | 'StopLossAndLimit' | 'FillOrKill' | 'SettlePosition'.
-type 'ProtobufBroker.PrivateOrder.PriceParamType'() :: 'AbsoluteValue' | 'OffsetValue' | 'PrecentageOffsetValue'.
-type 'ProtobufStream.AuthenticationResult.Status'() :: 'UNKNOWN' | 'AUTHENTICATED' | 'BAD_NONCE' | 'BAD_TOKEN' | 'TOKEN_EXPIRED'.
-type 'ProtobufClient.APIAuthenticationMessage.Source'() :: 'UNKNOWN' | 'GOLANG_SDK' | 'JAVASCRIPT_SDK' | 'NODE_SDK' | 'RUST_SDK' | 'CW_WEB'.
-export_type(['ProtobufBroker.FundingType'/0, 'ProtobufBroker.PrivateOrder.Type'/0, 'ProtobufBroker.PrivateOrder.PriceParamType'/0, 'ProtobufStream.AuthenticationResult.Status'/0, 'ProtobufClient.APIAuthenticationMessage.Source'/0]).

%% message types
-type 'ProtobufBroker.BrokerSessionMessage.Session'() :: #'ProtobufBroker.BrokerSessionMessage.Session'{}.

-type 'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'() :: #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{}.

-type 'ProtobufBroker.BrokerSessionMessage'() :: #'ProtobufBroker.BrokerSessionMessage'{}.

-type 'ProtobufBroker.PlaceOrderRequest'() :: #'ProtobufBroker.PlaceOrderRequest'{}.

-type 'ProtobufBroker.PlaceOrderResult'() :: #'ProtobufBroker.PlaceOrderResult'{}.

-type 'ProtobufBroker.CancelOrderRequest'() :: #'ProtobufBroker.CancelOrderRequest'{}.

-type 'ProtobufBroker.CancelOrderResult'() :: #'ProtobufBroker.CancelOrderResult'{}.

-type 'ProtobufBroker.ReplaceOrderRequest'() :: #'ProtobufBroker.ReplaceOrderRequest'{}.

-type 'ProtobufBroker.ClosePositionRequest'() :: #'ProtobufBroker.ClosePositionRequest'{}.

-type 'ProtobufBroker.SyncRequest'() :: #'ProtobufBroker.SyncRequest'{}.

-type 'ProtobufBroker.BrokerRequest'() :: #'ProtobufBroker.BrokerRequest'{}.

-type 'ProtobufBroker.OrdersUpdate'() :: #'ProtobufBroker.OrdersUpdate'{}.

-type 'ProtobufBroker.TradesUpdate'() :: #'ProtobufBroker.TradesUpdate'{}.

-type 'ProtobufBroker.PositionsUpdate'() :: #'ProtobufBroker.PositionsUpdate'{}.

-type 'ProtobufBroker.BalancesUpdate'() :: #'ProtobufBroker.BalancesUpdate'{}.

-type 'ProtobufBroker.RequestResolutionUpdate'() :: #'ProtobufBroker.RequestResolutionUpdate'{}.

-type 'ProtobufBroker.AnonymousSessionStatusUpdate'() :: #'ProtobufBroker.AnonymousSessionStatusUpdate'{}.

-type 'ProtobufBroker.SessionStatusUpdate'() :: #'ProtobufBroker.SessionStatusUpdate'{}.

-type 'ProtobufBroker.PermissionsUpdate.Agreement'() :: #'ProtobufBroker.PermissionsUpdate.Agreement'{}.

-type 'ProtobufBroker.PermissionsUpdate.LeverageLevels'() :: #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{}.

-type 'ProtobufBroker.PermissionsUpdate'() :: #'ProtobufBroker.PermissionsUpdate'{}.

-type 'ProtobufBroker.APIAccessorStatusUpdate'() :: #'ProtobufBroker.APIAccessorStatusUpdate'{}.

-type 'ProtobufBroker.BrokerUpdateMessage'() :: #'ProtobufBroker.BrokerUpdateMessage'{}.

-type 'ProtobufBroker.PrivateOrder.PriceParam'() :: #'ProtobufBroker.PrivateOrder.PriceParam'{}.

-type 'ProtobufBroker.PrivateOrder'() :: #'ProtobufBroker.PrivateOrder'{}.

-type 'ProtobufBroker.PrivateTrade'() :: #'ProtobufBroker.PrivateTrade'{}.

-type 'ProtobufBroker.PrivatePosition'() :: #'ProtobufBroker.PrivatePosition'{}.

-type 'ProtobufBroker.Balance'() :: #'ProtobufBroker.Balance'{}.

-type 'ProtobufBroker.Balances'() :: #'ProtobufBroker.Balances'{}.

-type 'ProtobufStream.StreamMessage'() :: #'ProtobufStream.StreamMessage'{}.

-type 'ProtobufStream.AuthenticationResult'() :: #'ProtobufStream.AuthenticationResult'{}.

-type 'ProtobufStream.SubscriptionResult'() :: #'ProtobufStream.SubscriptionResult'{}.

-type 'ProtobufStream.UnsubscriptionResult'() :: #'ProtobufStream.UnsubscriptionResult'{}.

-type 'ProtobufStream.SubscribeError'() :: #'ProtobufStream.SubscribeError'{}.

-type 'ProtobufStream.UnsubscribeError'() :: #'ProtobufStream.UnsubscribeError'{}.

-type 'ProtobufStream.SubscriptionStatus'() :: #'ProtobufStream.SubscriptionStatus'{}.

-type 'ProtobufStream.MissedMessages'() :: #'ProtobufStream.MissedMessages'{}.

-type 'ProtobufClient.ClientMessage'() :: #'ProtobufClient.ClientMessage'{}.

-type 'ProtobufClient.ClientIdentificationMessage'() :: #'ProtobufClient.ClientIdentificationMessage'{}.

-type 'ProtobufClient.WebAuthenticationMessage'() :: #'ProtobufClient.WebAuthenticationMessage'{}.

-type 'ProtobufClient.TradeSessionAuth'() :: #'ProtobufClient.TradeSessionAuth'{}.

-type 'ProtobufClient.TradeSubscription'() :: #'ProtobufClient.TradeSubscription'{}.

-type 'ProtobufClient.StreamSubscription'() :: #'ProtobufClient.StreamSubscription'{}.

-type 'ProtobufClient.ClientSubscription'() :: #'ProtobufClient.ClientSubscription'{}.

-type 'ProtobufClient.APIAuthenticationMessage'() :: #'ProtobufClient.APIAuthenticationMessage'{}.

-type 'ProtobufClient.ClientSessionMessage.Session'() :: #'ProtobufClient.ClientSessionMessage.Session'{}.

-type 'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'() :: #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{}.

-type 'ProtobufClient.ClientSessionMessage'() :: #'ProtobufClient.ClientSessionMessage'{}.

-type 'ProtobufClient.ClientSubscribeMessage'() :: #'ProtobufClient.ClientSubscribeMessage'{}.

-type 'ProtobufClient.ClientUnsubscribeMessage'() :: #'ProtobufClient.ClientUnsubscribeMessage'{}.

-type 'ProtobufMarkets.Market'() :: #'ProtobufMarkets.Market'{}.

-type 'ProtobufMarkets.Order'() :: #'ProtobufMarkets.Order'{}.

-type 'ProtobufMarkets.Trade'() :: #'ProtobufMarkets.Trade'{}.

-type 'ProtobufMarkets.MarketUpdateMessage'() :: #'ProtobufMarkets.MarketUpdateMessage'{}.

-type 'ProtobufMarkets.OrderBookUpdate'() :: #'ProtobufMarkets.OrderBookUpdate'{}.

-type 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'() :: #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{}.

-type 'ProtobufMarkets.OrderBookDeltaUpdate'() :: #'ProtobufMarkets.OrderBookDeltaUpdate'{}.

-type 'ProtobufMarkets.OrderBookSpreadUpdate'() :: #'ProtobufMarkets.OrderBookSpreadUpdate'{}.

-type 'ProtobufMarkets.TradesUpdate'() :: #'ProtobufMarkets.TradesUpdate'{}.

-type 'ProtobufMarkets.Interval.OHLC'() :: #'ProtobufMarkets.Interval.OHLC'{}.

-type 'ProtobufMarkets.Interval'() :: #'ProtobufMarkets.Interval'{}.

-type 'ProtobufMarkets.IntervalsUpdate'() :: #'ProtobufMarkets.IntervalsUpdate'{}.

-type 'ProtobufMarkets.SummaryUpdate'() :: #'ProtobufMarkets.SummaryUpdate'{}.

-type 'ProtobufMarkets.SparklineUpdate'() :: #'ProtobufMarkets.SparklineUpdate'{}.

-type 'ProtobufMarkets.Index'() :: #'ProtobufMarkets.Index'{}.

-type 'ProtobufMarkets.IndexUpdateMessage'() :: #'ProtobufMarkets.IndexUpdateMessage'{}.

-type 'ProtobufMarkets.TickerUpdate'() :: #'ProtobufMarkets.TickerUpdate'{}.

-type 'ProtobufMarkets.Ticker'() :: #'ProtobufMarkets.Ticker'{}.

-type 'ProtobufMarkets.PairUpdateMessage'() :: #'ProtobufMarkets.PairUpdateMessage'{}.

-type 'ProtobufMarkets.PairVwapUpdate'() :: #'ProtobufMarkets.PairVwapUpdate'{}.

-type 'ProtobufMarkets.PairPerformanceUpdate'() :: #'ProtobufMarkets.PairPerformanceUpdate'{}.

-type 'ProtobufMarkets.PairTrendlineUpdate'() :: #'ProtobufMarkets.PairTrendlineUpdate'{}.

-type 'ProtobufMarkets.AssetUpdateMessage'() :: #'ProtobufMarkets.AssetUpdateMessage'{}.

-type 'ProtobufMarkets.AssetUSDVolumeUpdate'() :: #'ProtobufMarkets.AssetUSDVolumeUpdate'{}.

-export_type(['ProtobufBroker.BrokerSessionMessage.Session'/0, 'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'/0, 'ProtobufBroker.BrokerSessionMessage'/0, 'ProtobufBroker.PlaceOrderRequest'/0, 'ProtobufBroker.PlaceOrderResult'/0, 'ProtobufBroker.CancelOrderRequest'/0, 'ProtobufBroker.CancelOrderResult'/0, 'ProtobufBroker.ReplaceOrderRequest'/0, 'ProtobufBroker.ClosePositionRequest'/0, 'ProtobufBroker.SyncRequest'/0, 'ProtobufBroker.BrokerRequest'/0, 'ProtobufBroker.OrdersUpdate'/0, 'ProtobufBroker.TradesUpdate'/0, 'ProtobufBroker.PositionsUpdate'/0, 'ProtobufBroker.BalancesUpdate'/0, 'ProtobufBroker.RequestResolutionUpdate'/0, 'ProtobufBroker.AnonymousSessionStatusUpdate'/0, 'ProtobufBroker.SessionStatusUpdate'/0, 'ProtobufBroker.PermissionsUpdate.Agreement'/0, 'ProtobufBroker.PermissionsUpdate.LeverageLevels'/0, 'ProtobufBroker.PermissionsUpdate'/0, 'ProtobufBroker.APIAccessorStatusUpdate'/0, 'ProtobufBroker.BrokerUpdateMessage'/0, 'ProtobufBroker.PrivateOrder.PriceParam'/0, 'ProtobufBroker.PrivateOrder'/0, 'ProtobufBroker.PrivateTrade'/0, 'ProtobufBroker.PrivatePosition'/0, 'ProtobufBroker.Balance'/0, 'ProtobufBroker.Balances'/0, 'ProtobufStream.StreamMessage'/0, 'ProtobufStream.AuthenticationResult'/0, 'ProtobufStream.SubscriptionResult'/0, 'ProtobufStream.UnsubscriptionResult'/0, 'ProtobufStream.SubscribeError'/0, 'ProtobufStream.UnsubscribeError'/0, 'ProtobufStream.SubscriptionStatus'/0, 'ProtobufStream.MissedMessages'/0, 'ProtobufClient.ClientMessage'/0, 'ProtobufClient.ClientIdentificationMessage'/0, 'ProtobufClient.WebAuthenticationMessage'/0, 'ProtobufClient.TradeSessionAuth'/0, 'ProtobufClient.TradeSubscription'/0, 'ProtobufClient.StreamSubscription'/0, 'ProtobufClient.ClientSubscription'/0, 'ProtobufClient.APIAuthenticationMessage'/0, 'ProtobufClient.ClientSessionMessage.Session'/0, 'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'/0, 'ProtobufClient.ClientSessionMessage'/0, 'ProtobufClient.ClientSubscribeMessage'/0, 'ProtobufClient.ClientUnsubscribeMessage'/0, 'ProtobufMarkets.Market'/0, 'ProtobufMarkets.Order'/0, 'ProtobufMarkets.Trade'/0, 'ProtobufMarkets.MarketUpdateMessage'/0, 'ProtobufMarkets.OrderBookUpdate'/0, 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/0, 'ProtobufMarkets.OrderBookDeltaUpdate'/0, 'ProtobufMarkets.OrderBookSpreadUpdate'/0, 'ProtobufMarkets.TradesUpdate'/0, 'ProtobufMarkets.Interval.OHLC'/0, 'ProtobufMarkets.Interval'/0, 'ProtobufMarkets.IntervalsUpdate'/0, 'ProtobufMarkets.SummaryUpdate'/0, 'ProtobufMarkets.SparklineUpdate'/0, 'ProtobufMarkets.Index'/0, 'ProtobufMarkets.IndexUpdateMessage'/0, 'ProtobufMarkets.TickerUpdate'/0, 'ProtobufMarkets.Ticker'/0, 'ProtobufMarkets.PairUpdateMessage'/0, 'ProtobufMarkets.PairVwapUpdate'/0, 'ProtobufMarkets.PairPerformanceUpdate'/0, 'ProtobufMarkets.PairTrendlineUpdate'/0, 'ProtobufMarkets.AssetUpdateMessage'/0, 'ProtobufMarkets.AssetUSDVolumeUpdate'/0]).

-spec encode_msg(#'ProtobufBroker.BrokerSessionMessage.Session'{} | #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{} | #'ProtobufBroker.BrokerSessionMessage'{} | #'ProtobufBroker.PlaceOrderRequest'{} | #'ProtobufBroker.PlaceOrderResult'{} | #'ProtobufBroker.CancelOrderRequest'{} | #'ProtobufBroker.CancelOrderResult'{} | #'ProtobufBroker.ReplaceOrderRequest'{} | #'ProtobufBroker.ClosePositionRequest'{} | #'ProtobufBroker.SyncRequest'{} | #'ProtobufBroker.BrokerRequest'{} | #'ProtobufBroker.OrdersUpdate'{} | #'ProtobufBroker.TradesUpdate'{} | #'ProtobufBroker.PositionsUpdate'{} | #'ProtobufBroker.BalancesUpdate'{} | #'ProtobufBroker.RequestResolutionUpdate'{} | #'ProtobufBroker.AnonymousSessionStatusUpdate'{} | #'ProtobufBroker.SessionStatusUpdate'{} | #'ProtobufBroker.PermissionsUpdate.Agreement'{} | #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{} | #'ProtobufBroker.PermissionsUpdate'{} | #'ProtobufBroker.APIAccessorStatusUpdate'{} | #'ProtobufBroker.BrokerUpdateMessage'{} | #'ProtobufBroker.PrivateOrder.PriceParam'{} | #'ProtobufBroker.PrivateOrder'{} | #'ProtobufBroker.PrivateTrade'{} | #'ProtobufBroker.PrivatePosition'{} | #'ProtobufBroker.Balance'{} | #'ProtobufBroker.Balances'{} | #'ProtobufStream.StreamMessage'{} | #'ProtobufStream.AuthenticationResult'{} | #'ProtobufStream.SubscriptionResult'{} | #'ProtobufStream.UnsubscriptionResult'{} | #'ProtobufStream.SubscribeError'{} | #'ProtobufStream.UnsubscribeError'{} | #'ProtobufStream.SubscriptionStatus'{} | #'ProtobufStream.MissedMessages'{} | #'ProtobufClient.ClientMessage'{} | #'ProtobufClient.ClientIdentificationMessage'{} | #'ProtobufClient.WebAuthenticationMessage'{} | #'ProtobufClient.TradeSessionAuth'{} | #'ProtobufClient.TradeSubscription'{} | #'ProtobufClient.StreamSubscription'{} | #'ProtobufClient.ClientSubscription'{} | #'ProtobufClient.APIAuthenticationMessage'{} | #'ProtobufClient.ClientSessionMessage.Session'{} | #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{} | #'ProtobufClient.ClientSessionMessage'{} | #'ProtobufClient.ClientSubscribeMessage'{} | #'ProtobufClient.ClientUnsubscribeMessage'{} | #'ProtobufMarkets.Market'{} | #'ProtobufMarkets.Order'{} | #'ProtobufMarkets.Trade'{} | #'ProtobufMarkets.MarketUpdateMessage'{} | #'ProtobufMarkets.OrderBookUpdate'{} | #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{} | #'ProtobufMarkets.OrderBookDeltaUpdate'{} | #'ProtobufMarkets.OrderBookSpreadUpdate'{} | #'ProtobufMarkets.TradesUpdate'{} | #'ProtobufMarkets.Interval.OHLC'{} | #'ProtobufMarkets.Interval'{} | #'ProtobufMarkets.IntervalsUpdate'{} | #'ProtobufMarkets.SummaryUpdate'{} | #'ProtobufMarkets.SparklineUpdate'{} | #'ProtobufMarkets.Index'{} | #'ProtobufMarkets.IndexUpdateMessage'{} | #'ProtobufMarkets.TickerUpdate'{} | #'ProtobufMarkets.Ticker'{} | #'ProtobufMarkets.PairUpdateMessage'{} | #'ProtobufMarkets.PairVwapUpdate'{} | #'ProtobufMarkets.PairPerformanceUpdate'{} | #'ProtobufMarkets.PairTrendlineUpdate'{} | #'ProtobufMarkets.AssetUpdateMessage'{} | #'ProtobufMarkets.AssetUSDVolumeUpdate'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ProtobufBroker.BrokerSessionMessage.Session'{} | #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{} | #'ProtobufBroker.BrokerSessionMessage'{} | #'ProtobufBroker.PlaceOrderRequest'{} | #'ProtobufBroker.PlaceOrderResult'{} | #'ProtobufBroker.CancelOrderRequest'{} | #'ProtobufBroker.CancelOrderResult'{} | #'ProtobufBroker.ReplaceOrderRequest'{} | #'ProtobufBroker.ClosePositionRequest'{} | #'ProtobufBroker.SyncRequest'{} | #'ProtobufBroker.BrokerRequest'{} | #'ProtobufBroker.OrdersUpdate'{} | #'ProtobufBroker.TradesUpdate'{} | #'ProtobufBroker.PositionsUpdate'{} | #'ProtobufBroker.BalancesUpdate'{} | #'ProtobufBroker.RequestResolutionUpdate'{} | #'ProtobufBroker.AnonymousSessionStatusUpdate'{} | #'ProtobufBroker.SessionStatusUpdate'{} | #'ProtobufBroker.PermissionsUpdate.Agreement'{} | #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{} | #'ProtobufBroker.PermissionsUpdate'{} | #'ProtobufBroker.APIAccessorStatusUpdate'{} | #'ProtobufBroker.BrokerUpdateMessage'{} | #'ProtobufBroker.PrivateOrder.PriceParam'{} | #'ProtobufBroker.PrivateOrder'{} | #'ProtobufBroker.PrivateTrade'{} | #'ProtobufBroker.PrivatePosition'{} | #'ProtobufBroker.Balance'{} | #'ProtobufBroker.Balances'{} | #'ProtobufStream.StreamMessage'{} | #'ProtobufStream.AuthenticationResult'{} | #'ProtobufStream.SubscriptionResult'{} | #'ProtobufStream.UnsubscriptionResult'{} | #'ProtobufStream.SubscribeError'{} | #'ProtobufStream.UnsubscribeError'{} | #'ProtobufStream.SubscriptionStatus'{} | #'ProtobufStream.MissedMessages'{} | #'ProtobufClient.ClientMessage'{} | #'ProtobufClient.ClientIdentificationMessage'{} | #'ProtobufClient.WebAuthenticationMessage'{} | #'ProtobufClient.TradeSessionAuth'{} | #'ProtobufClient.TradeSubscription'{} | #'ProtobufClient.StreamSubscription'{} | #'ProtobufClient.ClientSubscription'{} | #'ProtobufClient.APIAuthenticationMessage'{} | #'ProtobufClient.ClientSessionMessage.Session'{} | #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{} | #'ProtobufClient.ClientSessionMessage'{} | #'ProtobufClient.ClientSubscribeMessage'{} | #'ProtobufClient.ClientUnsubscribeMessage'{} | #'ProtobufMarkets.Market'{} | #'ProtobufMarkets.Order'{} | #'ProtobufMarkets.Trade'{} | #'ProtobufMarkets.MarketUpdateMessage'{} | #'ProtobufMarkets.OrderBookUpdate'{} | #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{} | #'ProtobufMarkets.OrderBookDeltaUpdate'{} | #'ProtobufMarkets.OrderBookSpreadUpdate'{} | #'ProtobufMarkets.TradesUpdate'{} | #'ProtobufMarkets.Interval.OHLC'{} | #'ProtobufMarkets.Interval'{} | #'ProtobufMarkets.IntervalsUpdate'{} | #'ProtobufMarkets.SummaryUpdate'{} | #'ProtobufMarkets.SparklineUpdate'{} | #'ProtobufMarkets.Index'{} | #'ProtobufMarkets.IndexUpdateMessage'{} | #'ProtobufMarkets.TickerUpdate'{} | #'ProtobufMarkets.Ticker'{} | #'ProtobufMarkets.PairUpdateMessage'{} | #'ProtobufMarkets.PairVwapUpdate'{} | #'ProtobufMarkets.PairPerformanceUpdate'{} | #'ProtobufMarkets.PairTrendlineUpdate'{} | #'ProtobufMarkets.AssetUpdateMessage'{} | #'ProtobufMarkets.AssetUSDVolumeUpdate'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ProtobufBroker.BrokerSessionMessage.Session'{} | #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{} | #'ProtobufBroker.BrokerSessionMessage'{} | #'ProtobufBroker.PlaceOrderRequest'{} | #'ProtobufBroker.PlaceOrderResult'{} | #'ProtobufBroker.CancelOrderRequest'{} | #'ProtobufBroker.CancelOrderResult'{} | #'ProtobufBroker.ReplaceOrderRequest'{} | #'ProtobufBroker.ClosePositionRequest'{} | #'ProtobufBroker.SyncRequest'{} | #'ProtobufBroker.BrokerRequest'{} | #'ProtobufBroker.OrdersUpdate'{} | #'ProtobufBroker.TradesUpdate'{} | #'ProtobufBroker.PositionsUpdate'{} | #'ProtobufBroker.BalancesUpdate'{} | #'ProtobufBroker.RequestResolutionUpdate'{} | #'ProtobufBroker.AnonymousSessionStatusUpdate'{} | #'ProtobufBroker.SessionStatusUpdate'{} | #'ProtobufBroker.PermissionsUpdate.Agreement'{} | #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{} | #'ProtobufBroker.PermissionsUpdate'{} | #'ProtobufBroker.APIAccessorStatusUpdate'{} | #'ProtobufBroker.BrokerUpdateMessage'{} | #'ProtobufBroker.PrivateOrder.PriceParam'{} | #'ProtobufBroker.PrivateOrder'{} | #'ProtobufBroker.PrivateTrade'{} | #'ProtobufBroker.PrivatePosition'{} | #'ProtobufBroker.Balance'{} | #'ProtobufBroker.Balances'{} | #'ProtobufStream.StreamMessage'{} | #'ProtobufStream.AuthenticationResult'{} | #'ProtobufStream.SubscriptionResult'{} | #'ProtobufStream.UnsubscriptionResult'{} | #'ProtobufStream.SubscribeError'{} | #'ProtobufStream.UnsubscribeError'{} | #'ProtobufStream.SubscriptionStatus'{} | #'ProtobufStream.MissedMessages'{} | #'ProtobufClient.ClientMessage'{} | #'ProtobufClient.ClientIdentificationMessage'{} | #'ProtobufClient.WebAuthenticationMessage'{} | #'ProtobufClient.TradeSessionAuth'{} | #'ProtobufClient.TradeSubscription'{} | #'ProtobufClient.StreamSubscription'{} | #'ProtobufClient.ClientSubscription'{} | #'ProtobufClient.APIAuthenticationMessage'{} | #'ProtobufClient.ClientSessionMessage.Session'{} | #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{} | #'ProtobufClient.ClientSessionMessage'{} | #'ProtobufClient.ClientSubscribeMessage'{} | #'ProtobufClient.ClientUnsubscribeMessage'{} | #'ProtobufMarkets.Market'{} | #'ProtobufMarkets.Order'{} | #'ProtobufMarkets.Trade'{} | #'ProtobufMarkets.MarketUpdateMessage'{} | #'ProtobufMarkets.OrderBookUpdate'{} | #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{} | #'ProtobufMarkets.OrderBookDeltaUpdate'{} | #'ProtobufMarkets.OrderBookSpreadUpdate'{} | #'ProtobufMarkets.TradesUpdate'{} | #'ProtobufMarkets.Interval.OHLC'{} | #'ProtobufMarkets.Interval'{} | #'ProtobufMarkets.IntervalsUpdate'{} | #'ProtobufMarkets.SummaryUpdate'{} | #'ProtobufMarkets.SparklineUpdate'{} | #'ProtobufMarkets.Index'{} | #'ProtobufMarkets.IndexUpdateMessage'{} | #'ProtobufMarkets.TickerUpdate'{} | #'ProtobufMarkets.Ticker'{} | #'ProtobufMarkets.PairUpdateMessage'{} | #'ProtobufMarkets.PairVwapUpdate'{} | #'ProtobufMarkets.PairPerformanceUpdate'{} | #'ProtobufMarkets.PairTrendlineUpdate'{} | #'ProtobufMarkets.AssetUpdateMessage'{} | #'ProtobufMarkets.AssetUSDVolumeUpdate'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufBroker.BrokerSessionMessage.Session' ->
	  'encode_msg_ProtobufBroker.BrokerSessionMessage.Session'(id(Msg,
								      TrUserData),
								   TrUserData);
      'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession' ->
	  'encode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(id(Msg,
										      TrUserData),
										   TrUserData);
      'ProtobufBroker.BrokerSessionMessage' ->
	  'encode_msg_ProtobufBroker.BrokerSessionMessage'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufBroker.PlaceOrderRequest' ->
	  'encode_msg_ProtobufBroker.PlaceOrderRequest'(id(Msg,
							   TrUserData),
							TrUserData);
      'ProtobufBroker.PlaceOrderResult' ->
	  'encode_msg_ProtobufBroker.PlaceOrderResult'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufBroker.CancelOrderRequest' ->
	  'encode_msg_ProtobufBroker.CancelOrderRequest'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufBroker.CancelOrderResult' ->
	  'encode_msg_ProtobufBroker.CancelOrderResult'(id(Msg,
							   TrUserData),
							TrUserData);
      'ProtobufBroker.ReplaceOrderRequest' ->
	  'encode_msg_ProtobufBroker.ReplaceOrderRequest'(id(Msg,
							     TrUserData),
							  TrUserData);
      'ProtobufBroker.ClosePositionRequest' ->
	  'encode_msg_ProtobufBroker.ClosePositionRequest'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufBroker.SyncRequest' ->
	  'encode_msg_ProtobufBroker.SyncRequest'(id(Msg,
						     TrUserData),
						  TrUserData);
      'ProtobufBroker.BrokerRequest' ->
	  'encode_msg_ProtobufBroker.BrokerRequest'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufBroker.OrdersUpdate' ->
	  'encode_msg_ProtobufBroker.OrdersUpdate'(id(Msg,
						      TrUserData),
						   TrUserData);
      'ProtobufBroker.TradesUpdate' ->
	  'encode_msg_ProtobufBroker.TradesUpdate'(id(Msg,
						      TrUserData),
						   TrUserData);
      'ProtobufBroker.PositionsUpdate' ->
	  'encode_msg_ProtobufBroker.PositionsUpdate'(id(Msg,
							 TrUserData),
						      TrUserData);
      'ProtobufBroker.BalancesUpdate' ->
	  'encode_msg_ProtobufBroker.BalancesUpdate'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufBroker.RequestResolutionUpdate' ->
	  'encode_msg_ProtobufBroker.RequestResolutionUpdate'(id(Msg,
								 TrUserData),
							      TrUserData);
      'ProtobufBroker.AnonymousSessionStatusUpdate' ->
	  'encode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(id(Msg,
								      TrUserData),
								   TrUserData);
      'ProtobufBroker.SessionStatusUpdate' ->
	  'encode_msg_ProtobufBroker.SessionStatusUpdate'(id(Msg,
							     TrUserData),
							  TrUserData);
      'ProtobufBroker.PermissionsUpdate.Agreement' ->
	  'encode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(id(Msg,
								     TrUserData),
								  TrUserData);
      'ProtobufBroker.PermissionsUpdate.LeverageLevels' ->
	  'encode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(id(Msg,
									  TrUserData),
								       TrUserData);
      'ProtobufBroker.PermissionsUpdate' ->
	  'encode_msg_ProtobufBroker.PermissionsUpdate'(id(Msg,
							   TrUserData),
							TrUserData);
      'ProtobufBroker.APIAccessorStatusUpdate' ->
	  'encode_msg_ProtobufBroker.APIAccessorStatusUpdate'(id(Msg,
								 TrUserData),
							      TrUserData);
      'ProtobufBroker.BrokerUpdateMessage' ->
	  'encode_msg_ProtobufBroker.BrokerUpdateMessage'(id(Msg,
							     TrUserData),
							  TrUserData);
      'ProtobufBroker.PrivateOrder.PriceParam' ->
	  'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(id(Msg,
								 TrUserData),
							      TrUserData);
      'ProtobufBroker.PrivateOrder' ->
	  'encode_msg_ProtobufBroker.PrivateOrder'(id(Msg,
						      TrUserData),
						   TrUserData);
      'ProtobufBroker.PrivateTrade' ->
	  'encode_msg_ProtobufBroker.PrivateTrade'(id(Msg,
						      TrUserData),
						   TrUserData);
      'ProtobufBroker.PrivatePosition' ->
	  'encode_msg_ProtobufBroker.PrivatePosition'(id(Msg,
							 TrUserData),
						      TrUserData);
      'ProtobufBroker.Balance' ->
	  'encode_msg_ProtobufBroker.Balance'(id(Msg, TrUserData),
					      TrUserData);
      'ProtobufBroker.Balances' ->
	  'encode_msg_ProtobufBroker.Balances'(id(Msg,
						  TrUserData),
					       TrUserData);
      'ProtobufStream.StreamMessage' ->
	  'encode_msg_ProtobufStream.StreamMessage'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufStream.AuthenticationResult' ->
	  'encode_msg_ProtobufStream.AuthenticationResult'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufStream.SubscriptionResult' ->
	  'encode_msg_ProtobufStream.SubscriptionResult'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufStream.UnsubscriptionResult' ->
	  'encode_msg_ProtobufStream.UnsubscriptionResult'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufStream.SubscribeError' ->
	  'encode_msg_ProtobufStream.SubscribeError'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufStream.UnsubscribeError' ->
	  'encode_msg_ProtobufStream.UnsubscribeError'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufStream.SubscriptionStatus' ->
	  'encode_msg_ProtobufStream.SubscriptionStatus'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufStream.MissedMessages' ->
	  'encode_msg_ProtobufStream.MissedMessages'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufClient.ClientMessage' ->
	  'encode_msg_ProtobufClient.ClientMessage'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufClient.ClientIdentificationMessage' ->
	  'encode_msg_ProtobufClient.ClientIdentificationMessage'(id(Msg,
								     TrUserData),
								  TrUserData);
      'ProtobufClient.WebAuthenticationMessage' ->
	  'encode_msg_ProtobufClient.WebAuthenticationMessage'(id(Msg,
								  TrUserData),
							       TrUserData);
      'ProtobufClient.TradeSessionAuth' ->
	  'encode_msg_ProtobufClient.TradeSessionAuth'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufClient.TradeSubscription' ->
	  'encode_msg_ProtobufClient.TradeSubscription'(id(Msg,
							   TrUserData),
							TrUserData);
      'ProtobufClient.StreamSubscription' ->
	  'encode_msg_ProtobufClient.StreamSubscription'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufClient.ClientSubscription' ->
	  'encode_msg_ProtobufClient.ClientSubscription'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufClient.APIAuthenticationMessage' ->
	  'encode_msg_ProtobufClient.APIAuthenticationMessage'(id(Msg,
								  TrUserData),
							       TrUserData);
      'ProtobufClient.ClientSessionMessage.Session' ->
	  'encode_msg_ProtobufClient.ClientSessionMessage.Session'(id(Msg,
								      TrUserData),
								   TrUserData);
      'ProtobufClient.ClientSessionMessage.AnonymousTradingSession' ->
	  'encode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(id(Msg,
										      TrUserData),
										   TrUserData);
      'ProtobufClient.ClientSessionMessage' ->
	  'encode_msg_ProtobufClient.ClientSessionMessage'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufClient.ClientSubscribeMessage' ->
	  'encode_msg_ProtobufClient.ClientSubscribeMessage'(id(Msg,
								TrUserData),
							     TrUserData);
      'ProtobufClient.ClientUnsubscribeMessage' ->
	  'encode_msg_ProtobufClient.ClientUnsubscribeMessage'(id(Msg,
								  TrUserData),
							       TrUserData);
      'ProtobufMarkets.Market' ->
	  'encode_msg_ProtobufMarkets.Market'(id(Msg, TrUserData),
					      TrUserData);
      'ProtobufMarkets.Order' ->
	  'encode_msg_ProtobufMarkets.Order'(id(Msg, TrUserData),
					     TrUserData);
      'ProtobufMarkets.Trade' ->
	  'encode_msg_ProtobufMarkets.Trade'(id(Msg, TrUserData),
					     TrUserData);
      'ProtobufMarkets.MarketUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.MarketUpdateMessage'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufMarkets.OrderBookUpdate' ->
	  'encode_msg_ProtobufMarkets.OrderBookUpdate'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas' ->
	  'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(id(Msg,
									   TrUserData),
									TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate' ->
	  'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(id(Msg,
							       TrUserData),
							    TrUserData);
      'ProtobufMarkets.OrderBookSpreadUpdate' ->
	  'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(id(Msg,
								TrUserData),
							     TrUserData);
      'ProtobufMarkets.TradesUpdate' ->
	  'encode_msg_ProtobufMarkets.TradesUpdate'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufMarkets.Interval.OHLC' ->
	  'encode_msg_ProtobufMarkets.Interval.OHLC'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufMarkets.Interval' ->
	  'encode_msg_ProtobufMarkets.Interval'(id(Msg,
						   TrUserData),
						TrUserData);
      'ProtobufMarkets.IntervalsUpdate' ->
	  'encode_msg_ProtobufMarkets.IntervalsUpdate'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufMarkets.SummaryUpdate' ->
	  'encode_msg_ProtobufMarkets.SummaryUpdate'(id(Msg,
							TrUserData),
						     TrUserData);
      'ProtobufMarkets.SparklineUpdate' ->
	  'encode_msg_ProtobufMarkets.SparklineUpdate'(id(Msg,
							  TrUserData),
						       TrUserData);
      'ProtobufMarkets.Index' ->
	  'encode_msg_ProtobufMarkets.Index'(id(Msg, TrUserData),
					     TrUserData);
      'ProtobufMarkets.IndexUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.IndexUpdateMessage'(id(Msg,
							     TrUserData),
							  TrUserData);
      'ProtobufMarkets.TickerUpdate' ->
	  'encode_msg_ProtobufMarkets.TickerUpdate'(id(Msg,
						       TrUserData),
						    TrUserData);
      'ProtobufMarkets.Ticker' ->
	  'encode_msg_ProtobufMarkets.Ticker'(id(Msg, TrUserData),
					      TrUserData);
      'ProtobufMarkets.PairUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.PairUpdateMessage'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufMarkets.PairVwapUpdate' ->
	  'encode_msg_ProtobufMarkets.PairVwapUpdate'(id(Msg,
							 TrUserData),
						      TrUserData);
      'ProtobufMarkets.PairPerformanceUpdate' ->
	  'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(id(Msg,
								TrUserData),
							     TrUserData);
      'ProtobufMarkets.PairTrendlineUpdate' ->
	  'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(id(Msg,
							      TrUserData),
							   TrUserData);
      'ProtobufMarkets.AssetUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.AssetUpdateMessage'(id(Msg,
							     TrUserData),
							  TrUserData);
      'ProtobufMarkets.AssetUSDVolumeUpdate' ->
	  'encode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(id(Msg,
							       TrUserData),
							    TrUserData)
    end.


'encode_msg_ProtobufBroker.BrokerSessionMessage.Session'(Msg,
							 TrUserData) ->
    'encode_msg_ProtobufBroker.BrokerSessionMessage.Session'(Msg,
							     <<>>, TrUserData).


'encode_msg_ProtobufBroker.BrokerSessionMessage.Session'(#'ProtobufBroker.BrokerSessionMessage.Session'{userId
													    =
													    F1,
													expires
													    =
													    F2,
													token
													    =
													    F3,
													mfaToken
													    =
													    F4},
							 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Msg,
									 TrUserData) ->
    'encode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Msg,
									     <<>>,
									     TrUserData).


'encode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(#'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
																	    =
																	    F1,
																	token
																	    =
																	    F2,
																	expiration
																	    =
																	    F3},
									 Bin,
									 TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true ->
		    e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.BrokerSessionMessage'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufBroker.BrokerSessionMessage'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufBroker.BrokerSessionMessage'(#'ProtobufBroker.BrokerSessionMessage'{'SessionConfig'
											    =
											    F1,
											marketId
											    =
											    F2},
						 Bin, TrUserData) ->
    B1 = if F1 =:= undefined -> Bin;
	    true ->
		case id(F1, TrUserData) of
		  {session, TF1} ->
		      begin
			TrTF1 = id(TF1, TrUserData),
			'e_mfield_ProtobufBroker.BrokerSessionMessage_session'(TrTF1,
									       <<Bin/binary,
										 10>>,
									       TrUserData)
		      end;
		  {anonymousTradingSession, TF1} ->
		      begin
			TrTF1 = id(TF1, TrUserData),
			'e_mfield_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(TrTF1,
											       <<Bin/binary,
												 18>>,
											       TrUserData)
		      end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int64(TrF2, <<B1/binary, 24>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PlaceOrderRequest'(Msg,
					      TrUserData) ->
    'encode_msg_ProtobufBroker.PlaceOrderRequest'(Msg, <<>>,
						  TrUserData).


'encode_msg_ProtobufBroker.PlaceOrderRequest'(#'ProtobufBroker.PlaceOrderRequest'{order
										      =
										      F1,
										  closingOrder
										      =
										      F2},
					      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufBroker.PlaceOrderRequest_order'(TrF1,
									   <<Bin/binary,
									     18>>,
									   TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_ProtobufBroker.PlaceOrderRequest_closingOrder'(TrF2,
									     <<B1/binary,
									       26>>,
									     TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PlaceOrderResult'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufBroker.PlaceOrderResult'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufBroker.PlaceOrderResult'(#'ProtobufBroker.PlaceOrderResult'{order
										    =
										    F1,
										orderId
										    =
										    F2},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufBroker.PlaceOrderResult_order'(TrF1,
									  <<Bin/binary,
									    18>>,
									  TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 10>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.CancelOrderRequest'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufBroker.CancelOrderRequest'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufBroker.CancelOrderRequest'(#'ProtobufBroker.CancelOrderRequest'{orderId
											=
											F1},
					       Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.CancelOrderResult'(Msg,
					      TrUserData) ->
    'encode_msg_ProtobufBroker.CancelOrderResult'(Msg, <<>>,
						  TrUserData).


'encode_msg_ProtobufBroker.CancelOrderResult'(#'ProtobufBroker.CancelOrderResult'{orderId
										      =
										      F1},
					      Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.ReplaceOrderRequest'(Msg,
						TrUserData) ->
    'encode_msg_ProtobufBroker.ReplaceOrderRequest'(Msg,
						    <<>>, TrUserData).


'encode_msg_ProtobufBroker.ReplaceOrderRequest'(#'ProtobufBroker.ReplaceOrderRequest'{orderId
											  =
											  F1,
										      replacement
											  =
											  F2,
										      replacementClosingOrder
											  =
											  F3},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 'e_mfield_ProtobufBroker.ReplaceOrderRequest_replacement'(TrF2,
										   <<B1/binary,
										     18>>,
										   TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    'e_mfield_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(TrF3,
											  <<B2/binary,
											    26>>,
											  TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.ClosePositionRequest'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufBroker.ClosePositionRequest'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufBroker.ClosePositionRequest'(#'ProtobufBroker.ClosePositionRequest'{positionId
											    =
											    F1},
						 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.SyncRequest'(_Msg,
					_TrUserData) ->
    <<>>.

'encode_msg_ProtobufBroker.BrokerRequest'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufBroker.BrokerRequest'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufBroker.BrokerRequest'(#'ProtobufBroker.BrokerRequest'{id
									      =
									      F1,
									  marketId
									      =
									      F2,
									  'Request'
									      =
									      F3},
					  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 56>>, TrUserData)
		  end
		end
	 end,
    if F3 =:= undefined -> B2;
       true ->
	   case id(F3, TrUserData) of
	     {placeOrderRequest, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerRequest_placeOrderRequest'(TrTF3,
									     <<B2/binary,
									       18>>,
									     TrUserData)
		 end;
	     {cancelOrderRequest, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerRequest_cancelOrderRequest'(TrTF3,
									      <<B2/binary,
										26>>,
									      TrUserData)
		 end;
	     {replaceOrderRequest, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerRequest_replaceOrderRequest'(TrTF3,
									       <<B2/binary,
										 50>>,
									       TrUserData)
		 end;
	     {syncRequest, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerRequest_syncRequest'(TrTF3,
								       <<B2/binary,
									 34>>,
								       TrUserData)
		 end;
	     {closePositionRequest, TF3} ->
		 begin
		   TrTF3 = id(TF3, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerRequest_closePositionRequest'(TrTF3,
										<<B2/binary,
										  42>>,
										TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufBroker.OrdersUpdate'(Msg,
					 TrUserData) ->
    'encode_msg_ProtobufBroker.OrdersUpdate'(Msg, <<>>,
					     TrUserData).


'encode_msg_ProtobufBroker.OrdersUpdate'(#'ProtobufBroker.OrdersUpdate'{orders
									    =
									    F1},
					 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufBroker.OrdersUpdate_orders'(TrF1, Bin,
							  TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.TradesUpdate'(Msg,
					 TrUserData) ->
    'encode_msg_ProtobufBroker.TradesUpdate'(Msg, <<>>,
					     TrUserData).


'encode_msg_ProtobufBroker.TradesUpdate'(#'ProtobufBroker.TradesUpdate'{trades
									    =
									    F1},
					 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufBroker.TradesUpdate_trades'(TrF1, Bin,
							  TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.PositionsUpdate'(Msg,
					    TrUserData) ->
    'encode_msg_ProtobufBroker.PositionsUpdate'(Msg, <<>>,
						TrUserData).


'encode_msg_ProtobufBroker.PositionsUpdate'(#'ProtobufBroker.PositionsUpdate'{positions
										  =
										  F1},
					    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufBroker.PositionsUpdate_positions'(TrF1,
								Bin, TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.BalancesUpdate'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufBroker.BalancesUpdate'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufBroker.BalancesUpdate'(#'ProtobufBroker.BalancesUpdate'{balances
										=
										F1},
					   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufBroker.BalancesUpdate_balances'(TrF1,
							      Bin, TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.RequestResolutionUpdate'(Msg,
						    TrUserData) ->
    'encode_msg_ProtobufBroker.RequestResolutionUpdate'(Msg,
							<<>>, TrUserData).


'encode_msg_ProtobufBroker.RequestResolutionUpdate'(#'ProtobufBroker.RequestResolutionUpdate'{id
												  =
												  F1,
											      error
												  =
												  F2,
											      message
												  =
												  F3,
											      'Result'
												  =
												  F4},
						    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 =:= undefined -> B3;
       true ->
	   case id(F4, TrUserData) of
	     {placeOrderResult, TF4} ->
		 begin
		   TrTF4 = id(TF4, TrUserData),
		   'e_mfield_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(TrTF4,
										      <<B3/binary,
											34>>,
										      TrUserData)
		 end;
	     {cancelOrderResult, TF4} ->
		 begin
		   TrTF4 = id(TF4, TrUserData),
		   'e_mfield_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(TrTF4,
										       <<B3/binary,
											 42>>,
										       TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Msg,
							 TrUserData) ->
    'encode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Msg,
							     <<>>, TrUserData).


'encode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(#'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
													    =
													    F1,
													token
													    =
													    F2},
							 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.SessionStatusUpdate'(Msg,
						TrUserData) ->
    'encode_msg_ProtobufBroker.SessionStatusUpdate'(Msg,
						    <<>>, TrUserData).


'encode_msg_ProtobufBroker.SessionStatusUpdate'(#'ProtobufBroker.SessionStatusUpdate'{initialized
											  =
											  F1,
										      syncing
											  =
											  F2,
										      lastSyncTime
											  =
											  F3,
										      syncError
											  =
											  F4},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= false -> B1;
		     true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true ->
		    e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Msg,
							TrUserData) ->
    'encode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Msg,
							    <<>>, TrUserData).


'encode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(#'ProtobufBroker.PermissionsUpdate.Agreement'{key
													  =
													  F1,
												      body
													  =
													  F2},
							Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Msg,
							     TrUserData) ->
    'encode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Msg,
								 <<>>,
								 TrUserData).


'encode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(#'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy
														    =
														    F1,
														sell
														    =
														    F2},
							     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(TrF1,
										Bin,
										TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(TrF2,
									    B1,
									    TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.PermissionsUpdate'(Msg,
					      TrUserData) ->
    'encode_msg_ProtobufBroker.PermissionsUpdate'(Msg, <<>>,
						  TrUserData).


'encode_msg_ProtobufBroker.PermissionsUpdate'(#'ProtobufBroker.PermissionsUpdate'{orderTypes
										      =
										      F1,
										  fundingTypes
										      =
										      F2,
										  agreements
										      =
										      F3,
										  currencyPairAllowed
										      =
										      F4,
										  leverageLevels
										      =
										      F5,
										  supportsOrderExpiry
										      =
										      F6},
					      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufBroker.PermissionsUpdate_orderTypes'(TrF1,
									Bin,
									TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(TrF2,
									  B1,
									  TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ProtobufBroker.PermissionsUpdate_agreements'(TrF3,
									B2,
									TrUserData)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 'e_mfield_ProtobufBroker.PermissionsUpdate_leverageLevels'(TrF5,
										    <<B4/binary,
										      50>>,
										    TrUserData)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= false -> B5;
		true -> e_type_bool(TrF6, <<B5/binary, 56>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.APIAccessorStatusUpdate'(Msg,
						    TrUserData) ->
    'encode_msg_ProtobufBroker.APIAccessorStatusUpdate'(Msg,
							<<>>, TrUserData).


'encode_msg_ProtobufBroker.APIAccessorStatusUpdate'(#'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess
												  =
												  F1,
											      status
												  =
												  F2,
											      statusString
												  =
												  F3},
						    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.BrokerUpdateMessage'(Msg,
						TrUserData) ->
    'encode_msg_ProtobufBroker.BrokerUpdateMessage'(Msg,
						    <<>>, TrUserData).


'encode_msg_ProtobufBroker.BrokerUpdateMessage'(#'ProtobufBroker.BrokerUpdateMessage'{marketId
											  =
											  F1,
										      'Update'
											  =
											  F2},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 88>>, TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {ordersUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(TrTF2,
									      <<B1/binary,
										10>>,
									      TrUserData)
		 end;
	     {tradesUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(TrTF2,
									      <<B1/binary,
										18>>,
									      TrUserData)
		 end;
	     {balancesUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(TrTF2,
										<<B1/binary,
										  26>>,
										TrUserData)
		 end;
	     {positionsUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(TrTF2,
										 <<B1/binary,
										   66>>,
										 TrUserData)
		 end;
	     {requestResolutionUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(TrTF2,
											 <<B1/binary,
											   34>>,
											 TrUserData)
		 end;
	     {anonymousSessionStatusUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(TrTF2,
											      <<B1/binary,
												42>>,
											      TrUserData)
		 end;
	     {permissionsUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(TrTF2,
										   <<B1/binary,
										     50>>,
										   TrUserData)
		 end;
	     {sessionStatusUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(TrTF2,
										     <<B1/binary,
										       58>>,
										     TrUserData)
		 end;
	     {apiAccessorStatusUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(TrTF2,
											 <<B1/binary,
											   74>>,
											 TrUserData)
		 end;
	     {authenticationResult, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(TrTF2,
										      <<B1/binary,
											82>>,
										      TrUserData)
		 end;
	     {subscriptionResult, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(TrTF2,
										    <<B1/binary,
										      98>>,
										    TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
						    TrUserData) ->
    'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							<<>>, TrUserData).


'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(#'ProtobufBroker.PrivateOrder.PriceParam'{value
												  =
												  F1,
											      valueString
												  =
												  F2,
											      type
												  =
												  F3},
						    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0.0 -> Bin;
		     true ->
			 e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 'AbsoluteValue'; TrF3 =:= 0 -> B2;
		true ->
		    'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'(TrF3,
									<<B2/binary,
									  16>>,
									'MaybeTrUserData')
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
					 TrUserData) ->
    'encode_msg_ProtobufBroker.PrivateOrder'(Msg, <<>>,
					     TrUserData).


'encode_msg_ProtobufBroker.PrivateOrder'(#'ProtobufBroker.PrivateOrder'{id
									    =
									    F1,
									time =
									    F2,
									price =
									    F3,
									amount =
									    F4,
									side =
									    F5,
									type =
									    F6,
									fundingType
									    =
									    F7,
									priceParams
									    =
									    F8,
									amountParam
									    =
									    F9,
									amountParamString
									    =
									    F10,
									amountFilledString
									    =
									    F11,
									leverage
									    =
									    F12,
									currentStop
									    =
									    F13,
									initialStop
									    =
									    F14,
									currentStopString
									    =
									    F15,
									initialStopString
									    =
									    F16,
									startTime
									    =
									    F17,
									expireTime
									    =
									    F18,
									rate =
									    F19,
									hasClosingOrder
									    =
									    F20,
									closingOrderType
									    =
									    F21,
									closingOrderPriceParams
									    =
									    F22},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0.0 -> B2;
		     true ->
			 e_type_float(TrF3, <<B2/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0.0 -> B3;
		     true ->
			 e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true ->
			 e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'Market'; TrF6 =:= 0 -> B5;
		     true ->
			 'e_enum_ProtobufBroker.PrivateOrder.Type'(TrF6,
								   <<B5/binary,
								     48>>,
								   'MaybeTrUserData')
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 'Spot'; TrF7 =:= 0 -> B6;
		     true ->
			 'e_enum_ProtobufBroker.FundingType'(TrF7,
							     <<B6/binary, 56>>,
							     'MaybeTrUserData')
		  end
		end
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true ->
		  'e_field_ProtobufBroker.PrivateOrder_priceParams'(TrF8,
								    B7,
								    TrUserData)
	   end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_float(TrF9, <<B8/binary, 77>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   case is_empty_string(TrF10) of
		     true -> B9;
		     false ->
			 e_type_string(TrF10, <<B9/binary, 130, 1>>, TrUserData)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   case is_empty_string(TrF11) of
		     true -> B10;
		     false ->
			 e_type_string(TrF11, <<B10/binary, 138, 1>>,
				       TrUserData)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   case is_empty_string(TrF12) of
		     true -> B11;
		     false ->
			 e_type_string(TrF12, <<B11/binary, 82>>, TrUserData)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0.0 -> B12;
		      true ->
			  e_type_float(TrF13, <<B12/binary, 93>>, TrUserData)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= 0.0 -> B13;
		      true ->
			  e_type_float(TrF14, <<B13/binary, 101>>, TrUserData)
		   end
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   case is_empty_string(TrF15) of
		     true -> B14;
		     false ->
			 e_type_string(TrF15, <<B14/binary, 146, 1>>,
				       TrUserData)
		   end
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   case is_empty_string(TrF16) of
		     true -> B15;
		     false ->
			 e_type_string(TrF16, <<B15/binary, 154, 1>>,
				       TrUserData)
		   end
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   if TrF17 =:= 0 -> B16;
		      true ->
			  e_type_int64(TrF17, <<B16/binary, 104>>, TrUserData)
		   end
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   if TrF18 =:= 0 -> B17;
		      true ->
			  e_type_int64(TrF18, <<B17/binary, 112>>, TrUserData)
		   end
		 end
	  end,
    B19 = if F19 == undefined -> B18;
	     true ->
		 begin
		   TrF19 = id(F19, TrUserData),
		   if TrF19 =:= 0.0 -> B18;
		      true ->
			  e_type_float(TrF19, <<B18/binary, 125>>, TrUserData)
		   end
		 end
	  end,
    B20 = if F20 == undefined -> B19;
	     true ->
		 begin
		   TrF20 = id(F20, TrUserData),
		   if TrF20 =:= false -> B19;
		      true ->
			  e_type_bool(TrF20, <<B19/binary, 160, 1>>, TrUserData)
		   end
		 end
	  end,
    B21 = if F21 == undefined -> B20;
	     true ->
		 begin
		   TrF21 = id(F21, TrUserData),
		   if TrF21 =:= 'Market'; TrF21 =:= 0 -> B20;
		      true ->
			  'e_enum_ProtobufBroker.PrivateOrder.Type'(TrF21,
								    <<B20/binary,
								      168, 1>>,
								    'MaybeTrUserData')
		   end
		 end
	  end,
    begin
      TrF22 = id(F22, TrUserData),
      if TrF22 == [] -> B21;
	 true ->
	     'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(TrF22,
									   B21,
									   TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.PrivateTrade'(Msg,
					 TrUserData) ->
    'encode_msg_ProtobufBroker.PrivateTrade'(Msg, <<>>,
					     TrUserData).


'encode_msg_ProtobufBroker.PrivateTrade'(#'ProtobufBroker.PrivateTrade'{externalId
									    =
									    F1,
									orderId
									    =
									    F2,
									time =
									    F3,
									timeMillis
									    =
									    F4,
									price =
									    F5,
									priceString
									    =
									    F6,
									amount =
									    F7,
									amountString
									    =
									    F8,
									side =
									    F9,
									id =
									    F10},
					 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 48>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0.0 -> B4;
		     true ->
			 e_type_float(TrF5, <<B4/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case is_empty_string(TrF8) of
		    true -> B7;
		    false ->
			e_type_string(TrF8, <<B7/binary, 82>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0 -> B8;
		     true ->
			 e_type_int32(TrF9, <<B8/binary, 40>>, TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     if TrF10 =:= 0 -> B9;
		true ->
		    e_type_int64(TrF10, <<B9/binary, 8>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.PrivatePosition'(Msg,
					    TrUserData) ->
    'encode_msg_ProtobufBroker.PrivatePosition'(Msg, <<>>,
						TrUserData).


'encode_msg_ProtobufBroker.PrivatePosition'(#'ProtobufBroker.PrivatePosition'{id
										  =
										  F1,
									      time
										  =
										  F2,
									      side
										  =
										  F3,
									      avgPrice
										  =
										  F4,
									      avgPriceString
										  =
										  F5,
									      amountOpen
										  =
										  F6,
									      amountClosed
										  =
										  F7,
									      amountOpenString
										  =
										  F8,
									      amountClosedString
										  =
										  F9,
									      orderIds
										  =
										  F10,
									      tradeIds
										  =
										  F11},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0.0 -> B3;
		     true ->
			 e_type_float(TrF4, <<B3/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_float(TrF6, <<B5/binary, 45>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 53>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  case is_empty_string(TrF8) of
		    true -> B7;
		    false ->
			e_type_string(TrF8, <<B7/binary, 82>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  case is_empty_string(TrF9) of
		    true -> B8;
		    false ->
			e_type_string(TrF9, <<B8/binary, 90>>, TrUserData)
		  end
		end
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    if TrF10 == [] -> B9;
	       true ->
		   'e_field_ProtobufBroker.PrivatePosition_orderIds'(TrF10,
								     B9,
								     TrUserData)
	    end
	  end,
    begin
      TrF11 = id(F11, TrUserData),
      if TrF11 == [] -> B10;
	 true ->
	     'e_field_ProtobufBroker.PrivatePosition_tradeIds'(TrF11,
							       B10, TrUserData)
      end
    end.

'encode_msg_ProtobufBroker.Balance'(Msg, TrUserData) ->
    'encode_msg_ProtobufBroker.Balance'(Msg, <<>>,
					TrUserData).


'encode_msg_ProtobufBroker.Balance'(#'ProtobufBroker.Balance'{currency
								  = F1,
							      amount = F2,
							      amountString =
								  F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0.0 -> B1;
		     true ->
			 e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufBroker.Balances'(Msg, TrUserData) ->
    'encode_msg_ProtobufBroker.Balances'(Msg, <<>>,
					 TrUserData).


'encode_msg_ProtobufBroker.Balances'(#'ProtobufBroker.Balances'{fundingType
								    = F1,
								balances = F2},
				     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'Spot'; TrF1 =:= 0 -> Bin;
		     true ->
			 'e_enum_ProtobufBroker.FundingType'(TrF1,
							     <<Bin/binary, 8>>,
							     'MaybeTrUserData')
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_ProtobufBroker.Balances_balances'(TrF2, B1,
							TrUserData)
      end
    end.

'encode_msg_ProtobufStream.StreamMessage'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufStream.StreamMessage'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufStream.StreamMessage'(#'ProtobufStream.StreamMessage'{body
									      =
									      F1},
					  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {authenticationResult, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_authenticationResult'(TrTF1,
										<<Bin/binary,
										  10>>,
										TrUserData)
		 end;
	     {subscriptionResult, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_subscriptionResult'(TrTF1,
									      <<Bin/binary,
										42>>,
									      TrUserData)
		 end;
	     {unsubscriptionResult, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_unsubscriptionResult'(TrTF1,
										<<Bin/binary,
										  50>>,
										TrUserData)
		 end;
	     {missedMessages, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_missedMessages'(TrTF1,
									  <<Bin/binary,
									    58>>,
									  TrUserData)
		 end;
	     {marketUpdate, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_marketUpdate'(TrTF1,
									<<Bin/binary,
									  18>>,
									TrUserData)
		 end;
	     {pairUpdate, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_pairUpdate'(TrTF1,
								      <<Bin/binary,
									26>>,
								      TrUserData)
		 end;
	     {assetUpdate, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_assetUpdate'(TrTF1,
								       <<Bin/binary,
									 34>>,
								       TrUserData)
		 end;
	     {indexUpdate, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufStream.StreamMessage_indexUpdate'(TrTF1,
								       <<Bin/binary,
									 66>>,
								       TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufStream.AuthenticationResult'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufStream.AuthenticationResult'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufStream.AuthenticationResult'(#'ProtobufStream.AuthenticationResult'{status
											    =
											    F1},
						 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 'UNKNOWN'; TrF1 =:= 0 -> Bin;
		true ->
		    'e_enum_ProtobufStream.AuthenticationResult.Status'(TrF1,
									<<Bin/binary,
									  8>>,
									'MaybeTrUserData')
	     end
	   end
    end.

'encode_msg_ProtobufStream.SubscriptionResult'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufStream.SubscriptionResult'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufStream.SubscriptionResult'(#'ProtobufStream.SubscriptionResult'{subscribed
											=
											F1,
										    failed
											=
											F2,
										    status
											=
											F3,
										    subscriptions
											=
											F4},
					       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufStream.SubscriptionResult_subscribed'(TrF1,
									 Bin,
									 TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_ProtobufStream.SubscriptionResult_failed'(TrF2,
								     B1,
								     TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 'e_mfield_ProtobufStream.SubscriptionResult_status'(TrF3,
									     <<B2/binary,
									       26>>,
									     TrUserData)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_ProtobufStream.SubscriptionResult_subscriptions'(TrF4,
								       B3,
								       TrUserData)
      end
    end.

'encode_msg_ProtobufStream.UnsubscriptionResult'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufStream.UnsubscriptionResult'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufStream.UnsubscriptionResult'(#'ProtobufStream.UnsubscriptionResult'{unsubscribed
											    =
											    F1,
											failed
											    =
											    F2,
											status
											    =
											    F3,
											subscriptions
											    =
											    F4},
						 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(TrF1,
									     Bin,
									     TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_ProtobufStream.UnsubscriptionResult_failed'(TrF2,
								       B1,
								       TrUserData)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 'e_mfield_ProtobufStream.UnsubscriptionResult_status'(TrF3,
									       <<B2/binary,
										 26>>,
									       TrUserData)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_ProtobufStream.UnsubscriptionResult_subscriptions'(TrF4,
									 B3,
									 TrUserData)
      end
    end.

'encode_msg_ProtobufStream.SubscribeError'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufStream.SubscribeError'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufStream.SubscribeError'(#'ProtobufStream.SubscribeError'{key
										=
										F1,
									    error
										=
										F2,
									    subscription
										=
										F3},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    'e_mfield_ProtobufStream.SubscribeError_subscription'(TrF3,
									  <<B2/binary,
									    26>>,
									  TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufStream.UnsubscribeError'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufStream.UnsubscribeError'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufStream.UnsubscribeError'(#'ProtobufStream.UnsubscribeError'{key
										    =
										    F1,
										error
										    =
										    F2,
										subscription
										    =
										    F3},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    'e_mfield_ProtobufStream.UnsubscribeError_subscription'(TrF3,
									    <<B2/binary,
									      26>>,
									    TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufStream.SubscriptionStatus'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufStream.SubscriptionStatus'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufStream.SubscriptionStatus'(#'ProtobufStream.SubscriptionStatus'{keys
											=
											F1,
										    subscriptions
											=
											F2},
					       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufStream.SubscriptionStatus_keys'(TrF1,
								   Bin,
								   TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_ProtobufStream.SubscriptionStatus_subscriptions'(TrF2,
								       B1,
								       TrUserData)
      end
    end.

'encode_msg_ProtobufStream.MissedMessages'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufStream.MissedMessages'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufStream.MissedMessages'(#'ProtobufStream.MissedMessages'{numMissedMessages
										=
										F1},
					   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufClient.ClientMessage'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufClient.ClientMessage'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufClient.ClientMessage'(#'ProtobufClient.ClientMessage'{body
									      =
									      F1},
					  Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {identification, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientMessage_identification'(TrTF1,
									  <<Bin/binary,
									    10>>,
									  TrUserData)
		 end;
	     {subscribe, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientMessage_subscribe'(TrTF1,
								     <<Bin/binary,
								       18>>,
								     TrUserData)
		 end;
	     {unsubscribe, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientMessage_unsubscribe'(TrTF1,
								       <<Bin/binary,
									 26>>,
								       TrUserData)
		 end;
	     {webAuthentication, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientMessage_webAuthentication'(TrTF1,
									     <<Bin/binary,
									       34>>,
									     TrUserData)
		 end;
	     {apiAuthentication, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientMessage_apiAuthentication'(TrTF1,
									     <<Bin/binary,
									       42>>,
									     TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufClient.ClientIdentificationMessage'(Msg,
							TrUserData) ->
    'encode_msg_ProtobufClient.ClientIdentificationMessage'(Msg,
							    <<>>, TrUserData).


'encode_msg_ProtobufClient.ClientIdentificationMessage'(#'ProtobufClient.ClientIdentificationMessage'{useragent
													  =
													  F1,
												      revision
													  =
													  F2,
												      integration
													  =
													  F3,
												      locale
													  =
													  F4,
												      subscriptions
													  =
													  F5},
							Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     'e_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(TrF5,
										B4,
										TrUserData)
      end
    end.

'encode_msg_ProtobufClient.WebAuthenticationMessage'(Msg,
						     TrUserData) ->
    'encode_msg_ProtobufClient.WebAuthenticationMessage'(Msg,
							 <<>>, TrUserData).


'encode_msg_ProtobufClient.WebAuthenticationMessage'(#'ProtobufClient.WebAuthenticationMessage'{identification
												    =
												    F1,
												token
												    =
												    F2,
												nonce
												    =
												    F3,
												access_list
												    =
												    F4},
						     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufClient.WebAuthenticationMessage_identification'(TrF1,
											   <<Bin/binary,
											     10>>,
											   TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_ProtobufClient.WebAuthenticationMessage_access_list'(TrF4,
									   B3,
									   TrUserData)
      end
    end.

'encode_msg_ProtobufClient.TradeSessionAuth'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufClient.TradeSessionAuth'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufClient.TradeSessionAuth'(#'ProtobufClient.TradeSessionAuth'{api_key
										    =
										    F1,
										api_secret
										    =
										    F2,
										customer_id
										    =
										    F3,
										key_passphrase
										    =
										    F4},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufClient.TradeSubscription'(Msg,
					      TrUserData) ->
    'encode_msg_ProtobufClient.TradeSubscription'(Msg, <<>>,
						  TrUserData).


'encode_msg_ProtobufClient.TradeSubscription'(#'ProtobufClient.TradeSubscription'{marketId
										      =
										      F1,
										  auth
										      =
										      F2},
					      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_ProtobufClient.TradeSubscription_auth'(TrF2,
								     <<B1/binary,
								       18>>,
								     TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufClient.StreamSubscription'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufClient.StreamSubscription'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufClient.StreamSubscription'(#'ProtobufClient.StreamSubscription'{resource
											=
											F1},
					       Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufClient.ClientSubscription'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufClient.ClientSubscription'(#'ProtobufClient.ClientSubscription'{body
											=
											F1},
					       Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {stream_subscription, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientSubscription_stream_subscription'(TrTF1,
										    <<Bin/binary,
										      10>>,
										    TrUserData)
		 end;
	     {trade_subscription, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientSubscription_trade_subscription'(TrTF1,
										   <<Bin/binary,
										     18>>,
										   TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufClient.APIAuthenticationMessage'(Msg,
						     TrUserData) ->
    'encode_msg_ProtobufClient.APIAuthenticationMessage'(Msg,
							 <<>>, TrUserData).


'encode_msg_ProtobufClient.APIAuthenticationMessage'(#'ProtobufClient.APIAuthenticationMessage'{token
												    =
												    F1,
												nonce
												    =
												    F2,
												api_key
												    =
												    F3,
												source
												    =
												    F4,
												version
												    =
												    F5,
												subscriptions
												    =
												    F6,
												client_subscriptions
												    =
												    F7},
						     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 'UNKNOWN'; TrF4 =:= 0 -> B3;
		     true ->
			 'e_enum_ProtobufClient.APIAuthenticationMessage.Source'(TrF4,
										 <<B3/binary,
										   32>>,
										 'MaybeTrUserData')
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  'e_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(TrF6,
										  B5,
										  TrUserData)
	   end
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      if TrF7 == [] -> B6;
	 true ->
	     'e_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(TrF7,
										    B6,
										    TrUserData)
      end
    end.

'encode_msg_ProtobufClient.ClientSessionMessage.Session'(Msg,
							 TrUserData) ->
    'encode_msg_ProtobufClient.ClientSessionMessage.Session'(Msg,
							     <<>>, TrUserData).


'encode_msg_ProtobufClient.ClientSessionMessage.Session'(#'ProtobufClient.ClientSessionMessage.Session'{userId
													    =
													    F1,
													expires
													    =
													    F2,
													token
													    =
													    F3,
													mfaToken
													    =
													    F4},
							 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Msg,
									 TrUserData) ->
    'encode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Msg,
									     <<>>,
									     TrUserData).


'encode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(#'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
																	    =
																	    F1,
																	token
																	    =
																	    F2,
																	expiration
																	    =
																	    F3},
									 Bin,
									 TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true ->
		    e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufClient.ClientSessionMessage'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufClient.ClientSessionMessage'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufClient.ClientSessionMessage'(#'ProtobufClient.ClientSessionMessage'{'SessionConfig'
											    =
											    F1},
						 Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {session, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientSessionMessage_session'(TrTF1,
									  <<Bin/binary,
									    10>>,
									  TrUserData)
		 end;
	     {anonymousTradingSession, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   'e_mfield_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(TrTF1,
											  <<Bin/binary,
											    18>>,
											  TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufClient.ClientSubscribeMessage'(Msg,
						   TrUserData) ->
    'encode_msg_ProtobufClient.ClientSubscribeMessage'(Msg,
						       <<>>, TrUserData).


'encode_msg_ProtobufClient.ClientSubscribeMessage'(#'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
												=
												F1,
											    subscriptions
												=
												F2},
						   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(TrF1,
										   Bin,
										   TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(TrF2,
									   B1,
									   TrUserData)
      end
    end.

'encode_msg_ProtobufClient.ClientUnsubscribeMessage'(Msg,
						     TrUserData) ->
    'encode_msg_ProtobufClient.ClientUnsubscribeMessage'(Msg,
							 <<>>, TrUserData).


'encode_msg_ProtobufClient.ClientUnsubscribeMessage'(#'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
												    =
												    F1,
												subscriptions
												    =
												    F2},
						     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(TrF1,
										     Bin,
										     TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(TrF2,
									     B1,
									     TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.Market'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Market'(Msg, <<>>,
					TrUserData).


'encode_msg_ProtobufMarkets.Market'(#'ProtobufMarkets.Market'{exchangeId
								  = F1,
							      currencyPairId =
								  F2,
							      marketId = F3,
							      exchange = F4,
							      currencyPair =
								  F5},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     case is_empty_string(TrF5) of
	       true -> B4;
	       false ->
		   e_type_string(TrF5, <<B4/binary, 18>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Order'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
				       TrUserData).


'encode_msg_ProtobufMarkets.Order'(#'ProtobufMarkets.Order'{priceStr
								= F1,
							    amountStr = F2,
							    price = F3,
							    amount = F4},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0.0 -> B2;
		     true ->
			 e_type_float(TrF3, <<B2/binary, 13>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0.0 -> B3;
		true ->
		    e_type_float(TrF4, <<B3/binary, 21>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Trade'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Trade'(Msg, <<>>,
				       TrUserData).


'encode_msg_ProtobufMarkets.Trade'(#'ProtobufMarkets.Trade'{externalId
								= F1,
							    timestamp = F2,
							    timestampMillis =
								F3,
							    timestampNano = F4,
							    priceStr = F5,
							    amountStr = F6,
							    price = F7,
							    amount = F8,
							    priceDouble = F9,
							    amountDouble = F10,
							    id = F11},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 90>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 80>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 74>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0.0 -> B7;
		     true ->
			 e_type_float(TrF8, <<B7/binary, 37>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_double(TrF9, <<B8/binary, 49>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0.0 -> B9;
		      true ->
			  e_type_double(TrF10, <<B9/binary, 57>>, TrUserData)
		   end
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     if TrF11 =:= 0 -> B10;
		true ->
		    e_type_int64(TrF11, <<B10/binary, 8>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufMarkets.MarketUpdateMessage'(#'ProtobufMarkets.MarketUpdateMessage'{market
											    =
											    F1,
											'Update'
											    =
											    F2},
						 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufMarkets.MarketUpdateMessage_market'(TrF1,
									       <<Bin/binary,
										 74>>,
									       TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {orderBookUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(TrTF2,
										  <<B1/binary,
										    18>>,
										  TrUserData)
		 end;
	     {orderBookDeltaUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(TrTF2,
										       <<B1/binary,
											 26>>,
										       TrUserData)
		 end;
	     {orderBookSpreadUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(TrTF2,
											<<B1/binary,
											  90>>,
											TrUserData)
		 end;
	     {tradesUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(TrTF2,
									       <<B1/binary,
										 34>>,
									       TrUserData)
		 end;
	     {intervalsUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(TrTF2,
										  <<B1/binary,
										    42>>,
										  TrUserData)
		 end;
	     {summaryUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(TrTF2,
										<<B1/binary,
										  50>>,
										TrUserData)
		 end;
	     {sparklineUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(TrTF2,
										  <<B1/binary,
										    58>>,
										  TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.OrderBookUpdate'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookUpdate'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufMarkets.OrderBookUpdate'(#'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
										    =
										    F1,
										seqNum
										    =
										    F2,
										bids
										    =
										    F3,
										asks
										    =
										    F4,
										aggregationModulus
										    =
										    F5},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookUpdate_bids'(TrF3, B2,
								 TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookUpdate_asks'(TrF4, B3,
								 TrUserData)
	   end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0.0 -> B4;
		true ->
		    e_type_float(TrF5, <<B4/binary, 29>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
							      TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								  <<>>,
								  TrUserData).


'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(#'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														      =
														      F1,
														  delta
														      =
														      F2,
														  remove
														      =
														      F3,
														  removeStr
														      =
														      F4},
							      Bin,
							      TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(TrF1,
										 Bin,
										 TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(TrF2,
										   B1,
										   TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(TrF3,
										    B2,
										    TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(TrF4,
										  B3,
										  TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
						  TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
						      <<>>, TrUserData).


'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(#'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											      =
											      F1,
											  aggregationModulusStr
											      =
											      F2,
											  seqNum
											      =
											      F3,
											  bids
											      =
											      F4,
											  asks
											      =
											      F5},
						  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0.0 -> Bin;
		     true ->
			 e_type_float(TrF1, <<Bin/binary, 29>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 34>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_bids'(TrF4,
									      <<B3/binary,
										10>>,
									      TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= undefined -> B4;
		true ->
		    'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_asks'(TrF5,
									 <<B4/binary,
									   18>>,
									 TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
						   TrUserData) ->
    'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
						       <<>>, TrUserData).


'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(#'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
												=
												F1,
											    bid
												=
												F2,
											    ask
												=
												F3},
						   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_bid'(TrF2,
									      <<B1/binary,
										18>>,
									      TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= undefined -> B2;
		true ->
		    'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_ask'(TrF3,
									 <<B2/binary,
									   26>>,
									 TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.TradesUpdate'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufMarkets.TradesUpdate'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufMarkets.TradesUpdate'(#'ProtobufMarkets.TradesUpdate'{trades
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufMarkets.TradesUpdate_trades'(TrF1, Bin,
							   TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.Interval.OHLC'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufMarkets.Interval.OHLC'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufMarkets.Interval.OHLC'(#'ProtobufMarkets.Interval.OHLC'{openStr
										=
										F1,
									    highStr
										=
										F2,
									    lowStr
										=
										F3,
									    closeStr
										=
										F4,
									    open
										=
										F5,
									    high
										=
										F6,
									    low
										=
										F7,
									    close
										=
										F8},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 42>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 50>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 66>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0.0 -> B4;
		     true ->
			 e_type_float(TrF5, <<B4/binary, 13>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_float(TrF6, <<B5/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 0.0 -> B6;
		     true ->
			 e_type_float(TrF7, <<B6/binary, 29>>, TrUserData)
		  end
		end
	 end,
    if F8 == undefined -> B7;
       true ->
	   begin
	     TrF8 = id(F8, TrUserData),
	     if TrF8 =:= 0.0 -> B7;
		true ->
		    e_type_float(TrF8, <<B7/binary, 37>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Interval'(Msg,
				      TrUserData) ->
    'encode_msg_ProtobufMarkets.Interval'(Msg, <<>>,
					  TrUserData).


'encode_msg_ProtobufMarkets.Interval'(#'ProtobufMarkets.Interval'{closetime
								      = F1,
								  period = F2,
								  ohlc = F3,
								  volumeBaseStr
								      = F4,
								  volumeQuoteStr
								      = F5,
								  volumeBase =
								      F6,
								  volumeQuote =
								      F7},
				      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 'e_mfield_ProtobufMarkets.Interval_ohlc'(TrF3,
								  <<B2/binary,
								    18>>,
								  TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 50>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 58>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 0.0 -> B5;
		     true ->
			 e_type_float(TrF6, <<B5/binary, 29>>, TrUserData)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= 0.0 -> B6;
		true ->
		    e_type_float(TrF7, <<B6/binary, 45>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufMarkets.IntervalsUpdate'(#'ProtobufMarkets.IntervalsUpdate'{intervals
										    =
										    F1},
					     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufMarkets.IntervalsUpdate_intervals'(TrF1,
								 Bin,
								 TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg,
					   TrUserData) ->
    'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg, <<>>,
					       TrUserData).


'encode_msg_ProtobufMarkets.SummaryUpdate'(#'ProtobufMarkets.SummaryUpdate'{lastStr
										=
										F1,
									    highStr
										=
										F2,
									    lowStr
										=
										F3,
									    volumeBaseStr
										=
										F4,
									    volumeQuoteStr
										=
										F5,
									    changeAbsoluteStr
										=
										F6,
									    changePercentStr
										=
										F7,
									    numTrades
										=
										F8,
									    last
										=
										F9,
									    high
										=
										F10,
									    low
										=
										F11,
									    volumeBase
										=
										F12,
									    volumeQuote
										=
										F13,
									    changeAbsolute
										=
										F14,
									    changePercent
										=
										F15},
					   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 82>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 90>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 98>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case is_empty_string(TrF4) of
		    true -> B3;
		    false ->
			e_type_string(TrF4, <<B3/binary, 106>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  case is_empty_string(TrF5) of
		    true -> B4;
		    false ->
			e_type_string(TrF5, <<B4/binary, 114>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  case is_empty_string(TrF6) of
		    true -> B5;
		    false ->
			e_type_string(TrF6, <<B5/binary, 122>>, TrUserData)
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  case is_empty_string(TrF7) of
		    true -> B6;
		    false ->
			e_type_string(TrF7, <<B6/binary, 130, 1>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 0 -> B7;
		     true ->
			 e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_float(TrF9, <<B8/binary, 21>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0.0 -> B9;
		      true ->
			  e_type_float(TrF10, <<B9/binary, 29>>, TrUserData)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= 0.0 -> B10;
		      true ->
			  e_type_float(TrF11, <<B10/binary, 37>>, TrUserData)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= 0.0 -> B11;
		      true ->
			  e_type_float(TrF12, <<B11/binary, 45>>, TrUserData)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= 0.0 -> B12;
		      true ->
			  e_type_float(TrF13, <<B12/binary, 77>>, TrUserData)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= 0.0 -> B13;
		      true ->
			  e_type_float(TrF14, <<B13/binary, 53>>, TrUserData)
		   end
		 end
	  end,
    if F15 == undefined -> B14;
       true ->
	   begin
	     TrF15 = id(F15, TrUserData),
	     if TrF15 =:= 0.0 -> B14;
		true ->
		    e_type_float(TrF15, <<B14/binary, 61>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg,
					     TrUserData) ->
    'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg, <<>>,
						 TrUserData).


'encode_msg_ProtobufMarkets.SparklineUpdate'(#'ProtobufMarkets.SparklineUpdate'{time
										    =
										    F1,
										price
										    =
										    F2,
										priceStr
										    =
										    F3},
					     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0.0 -> B1;
		     true ->
			 e_type_float(TrF2, <<B1/binary, 29>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 34>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.Index'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Index'(Msg, <<>>,
				       TrUserData).


'encode_msg_ProtobufMarkets.Index'(#'ProtobufMarkets.Index'{id
								= F1,
							    symbol = F2,
							    indexType = F3,
							    cwIndex = F4,
							    exchangeId = F5,
							    instrumentId = F6},
				   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= false -> B3;
		     true -> e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true -> e_varint(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     if TrF6 =:= 0 -> B5;
		true -> e_varint(TrF6, <<B5/binary, 48>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
						TrUserData) ->
    'encode_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
						    <<>>, TrUserData).


'encode_msg_ProtobufMarkets.IndexUpdateMessage'(#'ProtobufMarkets.IndexUpdateMessage'{index
											  =
											  F1,
										      'Update'
											  =
											  F2},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ProtobufMarkets.IndexUpdateMessage_index'(TrF1,
									     <<Bin/binary,
									       10>>,
									     TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {tickerUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(TrTF2,
									      <<B1/binary,
										18>>,
									      TrUserData)
		 end;
	     {intervalsUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(TrTF2,
										 <<B1/binary,
										   26>>,
										 TrUserData)
		 end;
	     {summaryUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(TrTF2,
									       <<B1/binary,
										 34>>,
									       TrUserData)
		 end;
	     {sparklineUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(TrTF2,
										 <<B1/binary,
										   42>>,
										 TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.TickerUpdate'(Msg,
					  TrUserData) ->
    'encode_msg_ProtobufMarkets.TickerUpdate'(Msg, <<>>,
					      TrUserData).


'encode_msg_ProtobufMarkets.TickerUpdate'(#'ProtobufMarkets.TickerUpdate'{tickers
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_ProtobufMarkets.TickerUpdate_tickers'(TrF1,
							    Bin, TrUserData)
      end
    end.

'encode_msg_ProtobufMarkets.Ticker'(Msg, TrUserData) ->
    'encode_msg_ProtobufMarkets.Ticker'(Msg, <<>>,
					TrUserData).


'encode_msg_ProtobufMarkets.Ticker'(#'ProtobufMarkets.Ticker'{value
								  = F1,
							      timestamp = F2,
							      timestampNano =
								  F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true ->
		    e_type_int64(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufMarkets.PairUpdateMessage'(#'ProtobufMarkets.PairUpdateMessage'{pair
											=
											F1,
										    'Update'
											=
											F2},
					       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {vwapUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(TrTF2,
									   <<B1/binary,
									     18>>,
									   TrUserData)
		 end;
	     {performanceUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(TrTF2,
										  <<B1/binary,
										    26>>,
										  TrUserData)
		 end;
	     {trendlineUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(TrTF2,
										<<B1/binary,
										  34>>,
										TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.PairVwapUpdate'(Msg,
					    TrUserData) ->
    'encode_msg_ProtobufMarkets.PairVwapUpdate'(Msg, <<>>,
						TrUserData).


'encode_msg_ProtobufMarkets.PairVwapUpdate'(#'ProtobufMarkets.PairVwapUpdate'{vwap
										  =
										  F1,
									      timestamp
										  =
										  F2},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0.0 -> Bin;
		     true ->
			 e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
						   TrUserData) ->
    'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
						       <<>>, TrUserData).


'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(#'ProtobufMarkets.PairPerformanceUpdate'{window
												=
												F1,
											    performance
												=
												F2},
						   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0.0 -> B1;
		true ->
		    e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(#'ProtobufMarkets.PairTrendlineUpdate'{window
											    =
											    F1,
											time
											    =
											    F2,
											price
											    =
											    F3,
											volume
											    =
											    F4},
						 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.AssetUpdateMessage'(Msg,
						TrUserData) ->
    'encode_msg_ProtobufMarkets.AssetUpdateMessage'(Msg,
						    <<>>, TrUserData).


'encode_msg_ProtobufMarkets.AssetUpdateMessage'(#'ProtobufMarkets.AssetUpdateMessage'{asset
											  =
											  F1,
										      'Update'
											  =
											  F2},
						Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {usdVolumeUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(TrTF2,
										 <<B1/binary,
										   18>>,
										 TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Msg,
						  TrUserData) ->
    'encode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Msg,
						      <<>>, TrUserData).


'encode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(#'ProtobufMarkets.AssetUSDVolumeUpdate'{volume
											      =
											      F1},
						  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

'e_mfield_ProtobufBroker.BrokerSessionMessage_session'(Msg,
						       Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.BrokerSessionMessage.Session'(Msg,
								 <<>>,
								 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Msg,
										 <<>>,
										 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.PlaceOrderRequest_order'(Msg,
						  Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.PlaceOrderRequest_closingOrder'(Msg,
							 Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.PlaceOrderResult_order'(Msg,
						 Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.ReplaceOrderRequest_replacement'(Msg,
							  Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(Msg,
								      Bin,
								      TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerRequest_placeOrderRequest'(Msg,
							  Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PlaceOrderRequest'(Msg, <<>>,
						      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerRequest_cancelOrderRequest'(Msg,
							   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.CancelOrderRequest'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerRequest_replaceOrderRequest'(Msg,
							    Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.ReplaceOrderRequest'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerRequest_syncRequest'(_Msg,
						    Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

'e_mfield_ProtobufBroker.BrokerRequest_closePositionRequest'(Msg,
							     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.ClosePositionRequest'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.OrdersUpdate_orders'(Msg, Bin,
					      TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateOrder'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.OrdersUpdate_orders'([Elem
					      | Rest],
					     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufBroker.OrdersUpdate_orders'(id(Elem,
							 TrUserData),
						      Bin2, TrUserData),
    'e_field_ProtobufBroker.OrdersUpdate_orders'(Rest, Bin3,
						 TrUserData);
'e_field_ProtobufBroker.OrdersUpdate_orders'([], Bin,
					     _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.TradesUpdate_trades'(Msg, Bin,
					      TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.PrivateTrade'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.TradesUpdate_trades'([Elem
					      | Rest],
					     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufBroker.TradesUpdate_trades'(id(Elem,
							 TrUserData),
						      Bin2, TrUserData),
    'e_field_ProtobufBroker.TradesUpdate_trades'(Rest, Bin3,
						 TrUserData);
'e_field_ProtobufBroker.TradesUpdate_trades'([], Bin,
					     _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.PositionsUpdate_positions'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PrivatePosition'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PositionsUpdate_positions'([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufBroker.PositionsUpdate_positions'(id(Elem,
							       TrUserData),
							    Bin2, TrUserData),
    'e_field_ProtobufBroker.PositionsUpdate_positions'(Rest,
						       Bin3, TrUserData);
'e_field_ProtobufBroker.PositionsUpdate_positions'([],
						   Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.BalancesUpdate_balances'(Msg,
						  Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.Balances'(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.BalancesUpdate_balances'([Elem
						  | Rest],
						 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufBroker.BalancesUpdate_balances'(id(Elem,
							     TrUserData),
							  Bin2, TrUserData),
    'e_field_ProtobufBroker.BalancesUpdate_balances'(Rest,
						     Bin3, TrUserData);
'e_field_ProtobufBroker.BalancesUpdate_balances'([],
						 Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(Msg,
								   Bin,
								   TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PlaceOrderResult'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.CancelOrderResult'(Msg, <<>>,
						      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'([Elem
							       | Rest],
							      Bin,
							      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(Rest,
								  Bin3,
								  TrUserData);
'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'([],
							      Bin,
							      _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'([Elem
								| Rest],
							       Bin,
							       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(Rest,
								   Bin3,
								   TrUserData);
'e_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'([],
							       Bin,
							       _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PermissionsUpdate_orderTypes'([Elem
						       | Rest],
						      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 =
	'e_enum_ProtobufBroker.PrivateOrder.Type'(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    'e_field_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
							  Bin3, TrUserData);
'e_field_ProtobufBroker.PermissionsUpdate_orderTypes'([],
						      Bin, _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PermissionsUpdate_fundingTypes'([Elem
							 | Rest],
							Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = 'e_enum_ProtobufBroker.FundingType'(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    'e_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
							    Bin3, TrUserData);
'e_field_ProtobufBroker.PermissionsUpdate_fundingTypes'([],
							Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.PermissionsUpdate_agreements'(Msg,
						       Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Msg,
								<<>>,
								TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PermissionsUpdate_agreements'([Elem
						       | Rest],
						      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_ProtobufBroker.PermissionsUpdate_agreements'(id(Elem,
								  TrUserData),
							       Bin2,
							       TrUserData),
    'e_field_ProtobufBroker.PermissionsUpdate_agreements'(Rest,
							  Bin3, TrUserData);
'e_field_ProtobufBroker.PermissionsUpdate_agreements'([],
						      Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.PermissionsUpdate_leverageLevels'(Msg,
							   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Msg,
								     <<>>,
								     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.OrdersUpdate'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.TradesUpdate'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(Msg,
							     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.BalancesUpdate'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PositionsUpdate'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(Msg,
								      Bin,
								      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.RequestResolutionUpdate'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(Msg,
									   Bin,
									   TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Msg,
								 <<>>,
								 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(Msg,
								Bin,
								TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PermissionsUpdate'(Msg, <<>>,
						      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(Msg,
								  Bin,
								  TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.SessionStatusUpdate'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(Msg,
								      Bin,
								      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.APIAccessorStatusUpdate'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(Msg,
								   Bin,
								   TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.AuthenticationResult'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(Msg,
								 Bin,
								 TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.SubscriptionResult'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufBroker.PrivateOrder_priceParams'(Msg,
						   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PrivateOrder_priceParams'([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 =
	'e_mfield_ProtobufBroker.PrivateOrder_priceParams'(id(Elem,
							      TrUserData),
							   Bin2, TrUserData),
    'e_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
						      Bin3, TrUserData);
'e_field_ProtobufBroker.PrivateOrder_priceParams'([],
						  Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							    <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'([Elem
							       | Rest],
							      Bin,
							      TrUserData) ->
    Bin2 = <<Bin/binary, 178, 1>>,
    Bin3 =
	'e_mfield_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(id(Elem,
									  TrUserData),
								       Bin2,
								       TrUserData),
    'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
								  Bin3,
								  TrUserData);
'e_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'([],
							      Bin,
							      _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PrivatePosition_orderIds'([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
						      Bin3, TrUserData);
'e_field_ProtobufBroker.PrivatePosition_orderIds'([],
						  Bin, _TrUserData) ->
    Bin.

'e_field_ProtobufBroker.PrivatePosition_tradeIds'([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
						      Bin3, TrUserData);
'e_field_ProtobufBroker.PrivatePosition_tradeIds'([],
						  Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufBroker.Balances_balances'(Msg, Bin,
					    TrUserData) ->
    SubBin = 'encode_msg_ProtobufBroker.Balance'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufBroker.Balances_balances'([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufBroker.Balances_balances'(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    'e_field_ProtobufBroker.Balances_balances'(Rest, Bin3,
					       TrUserData);
'e_field_ProtobufBroker.Balances_balances'([], Bin,
					   _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.StreamMessage_authenticationResult'(Msg,
							     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.AuthenticationResult'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_subscriptionResult'(Msg,
							   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.SubscriptionResult'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_unsubscriptionResult'(Msg,
							     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.UnsubscriptionResult'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_missedMessages'(Msg,
						       Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufStream.MissedMessages'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_marketUpdate'(Msg,
						     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_pairUpdate'(Msg,
						   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_assetUpdate'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.AssetUpdateMessage'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.StreamMessage_indexUpdate'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.SubscriptionResult_subscribed'([Elem
							| Rest],
						       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufStream.SubscriptionResult_subscribed'(Rest,
							   Bin3, TrUserData);
'e_field_ProtobufStream.SubscriptionResult_subscribed'([],
						       Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.SubscriptionResult_failed'(Msg,
						    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufStream.SubscribeError'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.SubscriptionResult_failed'([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufStream.SubscriptionResult_failed'(id(Elem,
							       TrUserData),
							    Bin2, TrUserData),
    'e_field_ProtobufStream.SubscriptionResult_failed'(Rest,
						       Bin3, TrUserData);
'e_field_ProtobufStream.SubscriptionResult_failed'([],
						   Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.SubscriptionResult_status'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.SubscriptionStatus'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.SubscriptionResult_subscriptions'(Msg,
							   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.SubscriptionResult_subscriptions'([Elem
							   | Rest],
							  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_ProtobufStream.SubscriptionResult_subscriptions'(id(Elem,
								      TrUserData),
								   Bin2,
								   TrUserData),
    'e_field_ProtobufStream.SubscriptionResult_subscriptions'(Rest,
							      Bin3, TrUserData);
'e_field_ProtobufStream.SubscriptionResult_subscriptions'([],
							  Bin, _TrUserData) ->
    Bin.

'e_field_ProtobufStream.UnsubscriptionResult_unsubscribed'([Elem
							    | Rest],
							   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(Rest,
							       Bin3,
							       TrUserData);
'e_field_ProtobufStream.UnsubscriptionResult_unsubscribed'([],
							   Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.UnsubscriptionResult_failed'(Msg,
						      Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.UnsubscribeError'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.UnsubscriptionResult_failed'([Elem
						      | Rest],
						     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufStream.UnsubscriptionResult_failed'(id(Elem,
								 TrUserData),
							      Bin2, TrUserData),
    'e_field_ProtobufStream.UnsubscriptionResult_failed'(Rest,
							 Bin3, TrUserData);
'e_field_ProtobufStream.UnsubscriptionResult_failed'([],
						     Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.UnsubscriptionResult_status'(Msg,
						      Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufStream.SubscriptionStatus'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.UnsubscriptionResult_subscriptions'(Msg,
							     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.UnsubscriptionResult_subscriptions'([Elem
							     | Rest],
							    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	'e_mfield_ProtobufStream.UnsubscriptionResult_subscriptions'(id(Elem,
									TrUserData),
								     Bin2,
								     TrUserData),
    'e_field_ProtobufStream.UnsubscriptionResult_subscriptions'(Rest,
								Bin3,
								TrUserData);
'e_field_ProtobufStream.UnsubscriptionResult_subscriptions'([],
							    Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.SubscribeError_subscription'(Msg,
						      Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufStream.UnsubscribeError_subscription'(Msg,
							Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.SubscriptionStatus_keys'([Elem
						  | Rest],
						 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufStream.SubscriptionStatus_keys'(Rest,
						     Bin3, TrUserData);
'e_field_ProtobufStream.SubscriptionStatus_keys'([],
						 Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufStream.SubscriptionStatus_subscriptions'(Msg,
							   Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufStream.SubscriptionStatus_subscriptions'([Elem
							   | Rest],
							  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufStream.SubscriptionStatus_subscriptions'(id(Elem,
								      TrUserData),
								   Bin2,
								   TrUserData),
    'e_field_ProtobufStream.SubscriptionStatus_subscriptions'(Rest,
							      Bin3, TrUserData);
'e_field_ProtobufStream.SubscriptionStatus_subscriptions'([],
							  Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.ClientMessage_identification'(Msg,
						       Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientIdentificationMessage'(Msg,
								<<>>,
								TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientMessage_subscribe'(Msg,
						  Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscribeMessage'(Msg,
							   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientMessage_unsubscribe'(Msg,
						    Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientUnsubscribeMessage'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientMessage_webAuthentication'(Msg,
							  Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.WebAuthenticationMessage'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientMessage_apiAuthentication'(Msg,
							  Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.APIAuthenticationMessage'(Msg,
							     <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.ClientIdentificationMessage_subscriptions'([Elem
								    | Rest],
								   Bin,
								   TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(Rest,
								       Bin3,
								       TrUserData);
'e_field_ProtobufClient.ClientIdentificationMessage_subscriptions'([],
								   Bin,
								   _TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.WebAuthenticationMessage_identification'(Msg,
								  Bin,
								  TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientIdentificationMessage'(Msg,
								<<>>,
								TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.WebAuthenticationMessage_access_list'([Elem
							       | Rest],
							      Bin,
							      TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufClient.WebAuthenticationMessage_access_list'(Rest,
								  Bin3,
								  TrUserData);
'e_field_ProtobufClient.WebAuthenticationMessage_access_list'([],
							      Bin,
							      _TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.TradeSubscription_auth'(Msg,
						 Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.TradeSessionAuth'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientSubscription_stream_subscription'(Msg,
								 Bin,
								 TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.StreamSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientSubscription_trade_subscription'(Msg,
								Bin,
								TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.TradeSubscription'(Msg, <<>>,
						      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.APIAuthenticationMessage_subscriptions'([Elem
								 | Rest],
								Bin,
								TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(Rest,
								    Bin3,
								    TrUserData);
'e_field_ProtobufClient.APIAuthenticationMessage_subscriptions'([],
								Bin,
								_TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(Msg,
									Bin,
									TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'([Elem
									| Rest],
								       Bin,
								       TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 =
	'e_mfield_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(id(Elem,
										   TrUserData),
										Bin2,
										TrUserData),
    'e_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(Rest,
									   Bin3,
									   TrUserData);
'e_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'([],
								       Bin,
								       _TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.ClientSessionMessage_session'(Msg,
						       Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSessionMessage.Session'(Msg,
								 <<>>,
								 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(Msg,
								       Bin,
								       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Msg,
										 <<>>,
										 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'([Elem
								  | Rest],
								 Bin,
								 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(Rest,
								     Bin3,
								     TrUserData);
'e_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'([],
								 Bin,
								 _TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.ClientSubscribeMessage_subscriptions'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.ClientSubscribeMessage_subscriptions'([Elem
							       | Rest],
							      Bin,
							      TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufClient.ClientSubscribeMessage_subscriptions'(id(Elem,
									  TrUserData),
								       Bin2,
								       TrUserData),
    'e_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(Rest,
								  Bin3,
								  TrUserData);
'e_field_ProtobufClient.ClientSubscribeMessage_subscriptions'([],
							      Bin,
							      _TrUserData) ->
    Bin.

'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'([Elem
								    | Rest],
								   Bin,
								   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(Rest,
								       Bin3,
								       TrUserData);
'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'([],
								   Bin,
								   _TrUserData) ->
    Bin.

'e_mfield_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(Msg,
								 Bin,
								 TrUserData) ->
    SubBin =
	'encode_msg_ProtobufClient.ClientSubscription'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'([Elem
								 | Rest],
								Bin,
								TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(id(Elem,
									    TrUserData),
									 Bin2,
									 TrUserData),
    'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(Rest,
								    Bin3,
								    TrUserData);
'e_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'([],
								Bin,
								_TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_market'(Msg,
						      Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Market'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Msg,
								    Bin,
								    TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
							  <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Msg,
								     Bin,
								     TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
							   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Msg,
							    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.TradesUpdate'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Msg,
							     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookUpdate_bids'(Msg,
						Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookUpdate_bids'([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookUpdate_bids'(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    'e_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest,
						   Bin3, TrUserData);
'e_field_ProtobufMarkets.OrderBookUpdate_bids'([], Bin,
					       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookUpdate_asks'(Msg,
						Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookUpdate_asks'([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookUpdate_asks'(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    'e_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest,
						   Bin3, TrUserData);
'e_field_ProtobufMarkets.OrderBookUpdate_asks'([], Bin,
					       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Msg,
								Bin,
								TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'([Elem
								| Rest],
							       Bin,
							       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(id(Elem,
									   TrUserData),
									Bin2,
									TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
								   Bin3,
								   TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'([],
							       Bin,
							       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Msg,
								  Bin,
								  TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'([Elem
								  | Rest],
								 Bin,
								 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(id(Elem,
									     TrUserData),
									  Bin2,
									  TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
								     Bin3,
								     TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'([],
								 Bin,
								 _TrUserData) ->
    Bin.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'([Elem
								   | Rest],
								  Bin,
								  TrUserData) ->
    Bin2 = <<Bin/binary, 29>>,
    Bin3 = e_type_float(id(Elem, TrUserData), Bin2,
			TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								      Bin3,
								      TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'([],
								  Bin,
								  _TrUserData) ->
    Bin.

'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'([Elem
								      | Rest],
								     Bin,
								     TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									 Bin3,
									 TrUserData);
'e_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'([],
								     Bin,
								     _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Msg,
						     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								      <<>>,
								      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Msg,
						     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								      <<>>,
								      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Order'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.TradesUpdate_trades'(Msg, Bin,
					       TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Trade'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.TradesUpdate_trades'([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.TradesUpdate_trades'(id(Elem,
							  TrUserData),
						       Bin2, TrUserData),
    'e_field_ProtobufMarkets.TradesUpdate_trades'(Rest,
						  Bin3, TrUserData);
'e_field_ProtobufMarkets.TradesUpdate_trades'([], Bin,
					      _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.Interval_ohlc'(Msg, Bin,
					 TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Interval.OHLC'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IntervalsUpdate_intervals'(Msg,
						     Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Interval'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.IntervalsUpdate_intervals'([Elem
						     | Rest],
						    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.IntervalsUpdate_intervals'(id(Elem,
								TrUserData),
							     Bin2, TrUserData),
    'e_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							Bin3, TrUserData);
'e_field_ProtobufMarkets.IntervalsUpdate_intervals'([],
						    Bin, _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_index'(Msg,
						    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Index'(Msg, <<>>,
						TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Msg,
							   Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.TickerUpdate'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.IntervalsUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Msg,
							    Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.SummaryUpdate'(Msg,
							<<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.SparklineUpdate'(Msg, <<>>,
						     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.TickerUpdate_tickers'(Msg,
						Bin, TrUserData) ->
    SubBin = 'encode_msg_ProtobufMarkets.Ticker'(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ProtobufMarkets.TickerUpdate_tickers'([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_ProtobufMarkets.TickerUpdate_tickers'(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    'e_field_ProtobufMarkets.TickerUpdate_tickers'(Rest,
						   Bin3, TrUserData);
'e_field_ProtobufMarkets.TickerUpdate_tickers'([], Bin,
					       _TrUserData) ->
    Bin.

'e_mfield_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Msg,
							Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairVwapUpdate'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
							   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Msg,
							     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(Msg,
							      Bin,
							      TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Msg,
							  <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_ProtobufBroker.FundingType'('Spot', Bin,
				    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufBroker.FundingType'('Margin', Bin,
				    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufBroker.FundingType'(V, Bin,
				    _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ProtobufBroker.PrivateOrder.Type'('Market', Bin,
					  _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('Limit', Bin,
					  _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLoss',
					  Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfitLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfitLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLoss',
					  Bin, _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLossLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('StopLossAndLimit',
					  Bin, _TrUserData) ->
    <<Bin/binary, 10>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('FillOrKill',
					  Bin, _TrUserData) ->
    <<Bin/binary, 11>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'('SettlePosition',
					  Bin, _TrUserData) ->
    <<Bin/binary, 12>>;
'e_enum_ProtobufBroker.PrivateOrder.Type'(V, Bin,
					  _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'('AbsoluteValue',
						    Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'('OffsetValue',
						    Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'('PrecentageOffsetValue',
						    Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ProtobufBroker.PrivateOrder.PriceParamType'(V,
						    Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ProtobufStream.AuthenticationResult.Status'('UNKNOWN',
						    Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufStream.AuthenticationResult.Status'('AUTHENTICATED',
						    Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufStream.AuthenticationResult.Status'('BAD_NONCE',
						    Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ProtobufStream.AuthenticationResult.Status'('BAD_TOKEN',
						    Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_ProtobufStream.AuthenticationResult.Status'('TOKEN_EXPIRED',
						    Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_ProtobufStream.AuthenticationResult.Status'(V,
						    Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ProtobufClient.APIAuthenticationMessage.Source'('UNKNOWN',
							Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ProtobufClient.APIAuthenticationMessage.Source'('GOLANG_SDK',
							Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ProtobufClient.APIAuthenticationMessage.Source'('JAVASCRIPT_SDK',
							Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_ProtobufClient.APIAuthenticationMessage.Source'('NODE_SDK',
							Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_ProtobufClient.APIAuthenticationMessage.Source'('RUST_SDK',
							Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_ProtobufClient.APIAuthenticationMessage.Source'('CW_WEB',
							Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_ProtobufClient.APIAuthenticationMessage.Source'(V,
							Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ProtobufBroker.BrokerSessionMessage.Session',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.BrokerSessionMessage.Session'(Bin,
								TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Bin,
										TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.BrokerSessionMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.BrokerSessionMessage'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PlaceOrderRequest',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PlaceOrderRequest'(Bin,
						     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PlaceOrderResult',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PlaceOrderResult'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.CancelOrderRequest',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.CancelOrderRequest'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.CancelOrderResult',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.CancelOrderResult'(Bin,
						     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.ReplaceOrderRequest',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.ReplaceOrderRequest'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.ClosePositionRequest',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.ClosePositionRequest'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.SyncRequest', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.SyncRequest'(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.BrokerRequest', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.BrokerRequest'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.OrdersUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.OrdersUpdate'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.TradesUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.TradesUpdate'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PositionsUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PositionsUpdate'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.BalancesUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.BalancesUpdate'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.RequestResolutionUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.RequestResolutionUpdate'(Bin,
							   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.AnonymousSessionStatusUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Bin,
								TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.SessionStatusUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.SessionStatusUpdate'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PermissionsUpdate.Agreement',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Bin,
							       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PermissionsUpdate.LeverageLevels',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Bin,
								    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PermissionsUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PermissionsUpdate'(Bin,
						     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.APIAccessorStatusUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.APIAccessorStatusUpdate'(Bin,
							   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.BrokerUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.BrokerUpdateMessage'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivateOrder.PriceParam',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
							   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivateOrder', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivateOrder'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivateTrade', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivateTrade'(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.PrivatePosition', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.PrivatePosition'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.Balance', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.Balance'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufBroker.Balances', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufBroker.Balances'(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.StreamMessage', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufStream.StreamMessage'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.AuthenticationResult',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufStream.AuthenticationResult'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.SubscriptionResult',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufStream.SubscriptionResult'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.UnsubscriptionResult',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufStream.UnsubscriptionResult'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.SubscribeError', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufStream.SubscribeError'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.UnsubscribeError',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufStream.UnsubscribeError'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.SubscriptionStatus',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufStream.SubscriptionStatus'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufStream.MissedMessages', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufStream.MissedMessages'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientMessage', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufClient.ClientMessage'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientIdentificationMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientIdentificationMessage'(Bin,
							       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.WebAuthenticationMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.WebAuthenticationMessage'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.TradeSessionAuth',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.TradeSessionAuth'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.TradeSubscription',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.TradeSubscription'(Bin,
						     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.StreamSubscription',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.StreamSubscription'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientSubscription',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientSubscription'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.APIAuthenticationMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.APIAuthenticationMessage'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientSessionMessage.Session',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientSessionMessage.Session'(Bin,
								TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientSessionMessage.AnonymousTradingSession',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Bin,
										TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientSessionMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientSessionMessage'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientSubscribeMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientSubscribeMessage'(Bin,
							  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufClient.ClientUnsubscribeMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufClient.ClientUnsubscribeMessage'(Bin,
							    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Market', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Market'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Order', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Order'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Trade', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Trade'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.MarketUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.MarketUpdateMessage'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookUpdate'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
								     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookDeltaUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
							 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.OrderBookSpreadUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
							  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.TradesUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.TradesUpdate'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Interval.OHLC', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Interval.OHLC'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Interval', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Interval'(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.IntervalsUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.IntervalsUpdate'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.SummaryUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.SummaryUpdate'(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.SparklineUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.SparklineUpdate'(Bin,
						    TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Index', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Index'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.IndexUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.IndexUpdateMessage'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.TickerUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.TickerUpdate'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.Ticker', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.Ticker'(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairUpdateMessage'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairVwapUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairVwapUpdate'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairPerformanceUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairPerformanceUpdate'(Bin,
							  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairTrendlineUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairTrendlineUpdate'(Bin,
							TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.AssetUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.AssetUpdateMessage'(Bin,
						       TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.AssetUSDVolumeUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Bin,
							 TrUserData),
       TrUserData).



'decode_msg_ProtobufBroker.BrokerSessionMessage.Session'(Bin,
							 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Bin,
								     0, 0,
								     id([],
									TrUserData),
								     id(0,
									TrUserData),
								     id([],
									TrUserData),
								     id([],
									TrUserData),
								     TrUserData).

'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<10,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_userId'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<16,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_expires'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<26,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_token'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<34,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_mfaToken'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<>>,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, _) ->
    #'ProtobufBroker.BrokerSessionMessage.Session'{userId =
						       F@_1,
						   expires = F@_2, token = F@_3,
						   mfaToken = F@_4};
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Other,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Other,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData).

'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.Session_userId'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
      16 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.Session_expires'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
      26 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.Session_token'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
      34 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.Session_mfaToken'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    F@_3,
										    F@_4,
										    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
									 Key bsr
									   3,
									 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(<<>>,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, _) ->
    #'ProtobufBroker.BrokerSessionMessage.Session'{userId =
						       F@_1,
						   expires = F@_2, token = F@_3,
						   mfaToken = F@_4}.

'd_field_ProtobufBroker.BrokerSessionMessage.Session_userId'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_userId'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.Session_userId'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, _, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(RestF,
								     0, 0,
								     NewFValue,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage.Session_expires'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_expires'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.Session_expires'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1, _,
							      F@_3, F@_4,
							      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(RestF,
								     0, 0, F@_1,
								     NewFValue,
								     F@_3, F@_4,
								     TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage.Session_token'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_token'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.Session_token'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    _, F@_4,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(RestF,
								     0, 0, F@_1,
								     F@_2,
								     NewFValue,
								     F@_4,
								     TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage.Session_mfaToken'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.Session_mfaToken'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.Session_mfaToken'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, _,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(RestF,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     NewFValue,
								     TrUserData).

'skip_varint_ProtobufBroker.BrokerSessionMessage.Session'(<<1:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'skip_varint_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'skip_varint_ProtobufBroker.BrokerSessionMessage.Session'(<<0:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.Session'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.Session'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Rest2,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData).

'skip_group_ProtobufBroker.BrokerSessionMessage.Session'(Bin,
							 FNum, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								     0, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'skip_32_ProtobufBroker.BrokerSessionMessage.Session'(<<_:32,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'skip_64_ProtobufBroker.BrokerSessionMessage.Session'(<<_:64,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.Session'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'decode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Bin,
									 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Bin,
										     0,
										     0,
										     id([],
											TrUserData),
										     id([],
											TrUserData),
										     id(0,
											TrUserData),
										     TrUserData).

'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<10,
										   Rest/binary>>,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_exchange'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<18,
										   Rest/binary>>,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_token'(Rest,
										Z1,
										Z2,
										F@_1,
										F@_2,
										F@_3,
										TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<24,
										   Rest/binary>>,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_expiration'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<>>,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 _) ->
    #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
								       = F@_1,
								   token = F@_2,
								   expiration =
								       F@_3};
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Other,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Other,
										    Z1,
										    Z2,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData).

'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<1:1,
										  X:7,
										  Rest/binary>>,
										N,
										Acc,
										F@_1,
										F@_2,
										F@_3,
										TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										    N
										      +
										      7,
										    X
										      bsl
										      N
										      +
										      Acc,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData);
'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<0:1,
										  X:7,
										  Rest/binary>>,
										N,
										Acc,
										F@_1,
										F@_2,
										F@_3,
										TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_exchange'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
      18 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_token'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
      24 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_expiration'(Rest,
											   0,
											   0,
											   F@_1,
											   F@_2,
											   F@_3,
											   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  F@_3,
											  TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
												    0,
												    0,
												    F@_1,
												    F@_2,
												    F@_3,
												    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
											 Key
											   bsr
											   3,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<>>,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										_) ->
    #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
								       = F@_1,
								   token = F@_2,
								   expiration =
								       F@_3}.

'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_exchange'(<<1:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_exchange'(Rest,
										   N
										     +
										     7,
										   X
										     bsl
										     N
										     +
										     Acc,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_exchange'(<<0:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       _,
									       F@_2,
									       F@_3,
									       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(RestF,
										     0,
										     0,
										     NewFValue,
										     F@_2,
										     F@_3,
										     TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_token'(<<1:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_token'(Rest,
										N
										  +
										  7,
										X
										  bsl
										  N
										  +
										  Acc,
										F@_1,
										F@_2,
										F@_3,
										TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_token'(<<0:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    _,
									    F@_3,
									    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(RestF,
										     0,
										     0,
										     F@_1,
										     NewFValue,
										     F@_3,
										     TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_expiration'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_expiration'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession_expiration'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 _,
										 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(RestF,
										     0,
										     0,
										     F@_1,
										     F@_2,
										     NewFValue,
										     TrUserData).

'skip_varint_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<1:1,
									    _:7,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData) ->
    'skip_varint_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      F@_3,
									      TrUserData);
'skip_varint_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<0:1,
									    _:7,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<1:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
											N
											  +
											  7,
											X
											  bsl
											  N
											  +
											  Acc,
											F@_1,
											F@_2,
											F@_3,
											TrUserData);
'skip_length_delimited_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<0:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest2,
										     0,
										     0,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_group_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Bin,
									 FNum,
									 Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										     0,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_32_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<_:32,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_64_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(<<_:64,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'decode_msg_ProtobufBroker.BrokerSessionMessage'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Bin,
							     0, 0,
							     id(undefined,
								TrUserData),
							     id(0, TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage_session'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<24,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufBroker.BrokerSessionMessage_marketId'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<>>,
							 0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.BrokerSessionMessage'{'SessionConfig' =
					       F@_1,
					   marketId = F@_2};
'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Other,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'dg_read_field_def_ProtobufBroker.BrokerSessionMessage'(Other,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'dg_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.BrokerSessionMessage'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'dg_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage_session'(Rest,
								0, 0, F@_1,
								F@_2,
								TrUserData);
      18 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										TrUserData);
      24 ->
	  'd_field_ProtobufBroker.BrokerSessionMessage_marketId'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.BrokerSessionMessage'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.BrokerSessionMessage'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.BrokerSessionMessage'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.BrokerSessionMessage'(Rest,
								 Key bsr 3, 0,
								 F@_1, F@_2,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.BrokerSessionMessage'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.BrokerSessionMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.BrokerSessionMessage'{'SessionConfig' =
					       F@_1,
					   marketId = F@_2}.

'd_field_ProtobufBroker.BrokerSessionMessage_session'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage_session'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage_session'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, Prev, F@_2,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.BrokerSessionMessage.Session'(Bs,
											TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(RestF,
							     0, 0,
							     case Prev of
							       undefined ->
								   id({session,
								       NewFValue},
								      TrUserData);
							       {session,
								MVPrev} ->
								   id({session,
								       'merge_msg_ProtobufBroker.BrokerSessionMessage.Session'(MVPrev,
															       NewFValue,
															       TrUserData)},
								      TrUserData);
							       _ ->
								   id({session,
								       NewFValue},
								      TrUserData)
							     end,
							     F@_2, TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      F@_2,
								      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  F@_2,
									  TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage_anonymousTradingSession'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      Prev,
								      F@_2,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Bs,
													TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(RestF,
							     0, 0,
							     case Prev of
							       undefined ->
								   id({anonymousTradingSession,
								       NewFValue},
								      TrUserData);
							       {anonymousTradingSession,
								MVPrev} ->
								   id({anonymousTradingSession,
								       'merge_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(MVPrev,
																	       NewFValue,
																	       TrUserData)},
								      TrUserData);
							       _ ->
								   id({anonymousTradingSession,
								       NewFValue},
								      TrUserData)
							     end,
							     F@_2, TrUserData).

'd_field_ProtobufBroker.BrokerSessionMessage_marketId'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerSessionMessage_marketId'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_ProtobufBroker.BrokerSessionMessage_marketId'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, _,
						       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(RestF,
							     0, 0, F@_1,
							     NewFValue,
							     TrUserData).

'skip_varint_ProtobufBroker.BrokerSessionMessage'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'skip_varint_ProtobufBroker.BrokerSessionMessage'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'skip_varint_ProtobufBroker.BrokerSessionMessage'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'skip_length_delimited_ProtobufBroker.BrokerSessionMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.BrokerSessionMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'skip_length_delimited_ProtobufBroker.BrokerSessionMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Rest2,
							     0, 0, F@_1, F@_2,
							     TrUserData).

'skip_group_ProtobufBroker.BrokerSessionMessage'(Bin,
						 FNum, Z2, F@_1, F@_2,
						 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Rest,
							     0, Z2, F@_1, F@_2,
							     TrUserData).

'skip_32_ProtobufBroker.BrokerSessionMessage'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'skip_64_ProtobufBroker.BrokerSessionMessage'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerSessionMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'decode_msg_ProtobufBroker.PlaceOrderRequest'(Bin,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Bin,
							  0, 0,
							  id(undefined,
							     TrUserData),
							  id(undefined,
							     TrUserData),
							  TrUserData).

'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(<<18,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'd_field_ProtobufBroker.PlaceOrderRequest_order'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(<<26,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'd_field_ProtobufBroker.PlaceOrderRequest_closingOrder'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(<<>>,
						      0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.PlaceOrderRequest'{order = F@_1,
					closingOrder = F@_2};
'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Other,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PlaceOrderRequest'(Other,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData).

'dg_read_field_def_ProtobufBroker.PlaceOrderRequest'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PlaceOrderRequest'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'dg_read_field_def_ProtobufBroker.PlaceOrderRequest'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  'd_field_ProtobufBroker.PlaceOrderRequest_order'(Rest,
							   0, 0, F@_1, F@_2,
							   TrUserData);
      26 ->
	  'd_field_ProtobufBroker.PlaceOrderRequest_closingOrder'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PlaceOrderRequest'(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PlaceOrderRequest'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PlaceOrderRequest'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PlaceOrderRequest'(Rest,
							      Key bsr 3, 0,
							      F@_1, F@_2,
							      TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PlaceOrderRequest'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PlaceOrderRequest'(<<>>,
						     0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.PlaceOrderRequest'{order = F@_1,
					closingOrder = F@_2}.

'd_field_ProtobufBroker.PlaceOrderRequest_order'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PlaceOrderRequest_order'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'd_field_ProtobufBroker.PlaceOrderRequest_order'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, Prev, F@_2,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(RestF,
							  0, 0,
							  if Prev ==
							       undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_ProtobufBroker.PrivateOrder'(Prev,
													 NewFValue,
													 TrUserData)
							  end,
							  F@_2, TrUserData).

'd_field_ProtobufBroker.PlaceOrderRequest_closingOrder'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PlaceOrderRequest_closingOrder'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'd_field_ProtobufBroker.PlaceOrderRequest_closingOrder'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, Prev,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(RestF,
							  0, 0, F@_1,
							  if Prev ==
							       undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_ProtobufBroker.PrivateOrder'(Prev,
													 NewFValue,
													 TrUserData)
							  end,
							  TrUserData).

'skip_varint_ProtobufBroker.PlaceOrderRequest'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'skip_varint_ProtobufBroker.PlaceOrderRequest'(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
'skip_varint_ProtobufBroker.PlaceOrderRequest'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'skip_length_delimited_ProtobufBroker.PlaceOrderRequest'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PlaceOrderRequest'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'skip_length_delimited_ProtobufBroker.PlaceOrderRequest'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Rest2,
							  0, 0, F@_1, F@_2,
							  TrUserData).

'skip_group_ProtobufBroker.PlaceOrderRequest'(Bin, FNum,
					      Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Rest,
							  0, Z2, F@_1, F@_2,
							  TrUserData).

'skip_32_ProtobufBroker.PlaceOrderRequest'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'skip_64_ProtobufBroker.PlaceOrderRequest'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderRequest'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'decode_msg_ProtobufBroker.PlaceOrderResult'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Bin,
							 0, 0,
							 id(undefined,
							    TrUserData),
							 id([], TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'd_field_ProtobufBroker.PlaceOrderResult_order'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'd_field_ProtobufBroker.PlaceOrderResult_orderId'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(<<>>,
						     0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.PlaceOrderResult'{order = F@_1,
				       orderId = F@_2};
'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PlaceOrderResult'(Other,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'dg_read_field_def_ProtobufBroker.PlaceOrderResult'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PlaceOrderResult'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'dg_read_field_def_ProtobufBroker.PlaceOrderResult'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  'd_field_ProtobufBroker.PlaceOrderResult_order'(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      10 ->
	  'd_field_ProtobufBroker.PlaceOrderResult_orderId'(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PlaceOrderResult'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PlaceOrderResult'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PlaceOrderResult'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PlaceOrderResult'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PlaceOrderResult'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PlaceOrderResult'(<<>>,
						    0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.PlaceOrderResult'{order = F@_1,
				       orderId = F@_2}.

'd_field_ProtobufBroker.PlaceOrderResult_order'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PlaceOrderResult_order'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'd_field_ProtobufBroker.PlaceOrderResult_order'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, Prev, F@_2,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(RestF,
							 0, 0,
							 if Prev == undefined ->
								NewFValue;
							    true ->
								'merge_msg_ProtobufBroker.PrivateOrder'(Prev,
													NewFValue,
													TrUserData)
							 end,
							 F@_2, TrUserData).

'd_field_ProtobufBroker.PlaceOrderResult_orderId'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PlaceOrderResult_orderId'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'd_field_ProtobufBroker.PlaceOrderResult_orderId'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, _,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(RestF,
							 0, 0, F@_1, NewFValue,
							 TrUserData).

'skip_varint_ProtobufBroker.PlaceOrderResult'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_ProtobufBroker.PlaceOrderResult'(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
'skip_varint_ProtobufBroker.PlaceOrderResult'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData).

'skip_length_delimited_ProtobufBroker.PlaceOrderResult'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PlaceOrderResult'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'skip_length_delimited_ProtobufBroker.PlaceOrderResult'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Rest2,
							 0, 0, F@_1, F@_2,
							 TrUserData).

'skip_group_ProtobufBroker.PlaceOrderResult'(Bin, FNum,
					     Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Rest,
							 0, Z2, F@_1, F@_2,
							 TrUserData).

'skip_32_ProtobufBroker.PlaceOrderResult'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData).

'skip_64_ProtobufBroker.PlaceOrderResult'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PlaceOrderResult'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData).

'decode_msg_ProtobufBroker.CancelOrderRequest'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Bin,
							   0, 0,
							   id([], TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(<<18,
							 Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'd_field_ProtobufBroker.CancelOrderRequest_orderId'(Rest,
							Z1, Z2, F@_1,
							TrUserData);
'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(<<>>,
						       0, 0, F@_1, _) ->
    #'ProtobufBroker.CancelOrderRequest'{orderId = F@_1};
'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Other,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'dg_read_field_def_ProtobufBroker.CancelOrderRequest'(Other,
							  Z1, Z2, F@_1,
							  TrUserData).

'dg_read_field_def_ProtobufBroker.CancelOrderRequest'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.CancelOrderRequest'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'dg_read_field_def_ProtobufBroker.CancelOrderRequest'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  'd_field_ProtobufBroker.CancelOrderRequest_orderId'(Rest,
							      0, 0, F@_1,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.CancelOrderRequest'(Rest, 0,
								0, F@_1,
								TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.CancelOrderRequest'(Rest, 0, 0,
							    F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.CancelOrderRequest'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.CancelOrderRequest'(Rest,
							       Key bsr 3, 0,
							       F@_1,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.CancelOrderRequest'(Rest, 0, 0,
							    F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.CancelOrderRequest'(<<>>,
						      0, 0, F@_1, _) ->
    #'ProtobufBroker.CancelOrderRequest'{orderId = F@_1}.

'd_field_ProtobufBroker.CancelOrderRequest_orderId'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.CancelOrderRequest_orderId'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'd_field_ProtobufBroker.CancelOrderRequest_orderId'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(RestF,
							   0, 0, NewFValue,
							   TrUserData).

'skip_varint_ProtobufBroker.CancelOrderRequest'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.CancelOrderRequest'(Rest,
						    Z1, Z2, F@_1, TrUserData);
'skip_varint_ProtobufBroker.CancelOrderRequest'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'skip_length_delimited_ProtobufBroker.CancelOrderRequest'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.CancelOrderRequest'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, TrUserData);
'skip_length_delimited_ProtobufBroker.CancelOrderRequest'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Rest2,
							   0, 0, F@_1,
							   TrUserData).

'skip_group_ProtobufBroker.CancelOrderRequest'(Bin,
					       FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Rest,
							   0, Z2, F@_1,
							   TrUserData).

'skip_32_ProtobufBroker.CancelOrderRequest'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'skip_64_ProtobufBroker.CancelOrderRequest'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderRequest'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'decode_msg_ProtobufBroker.CancelOrderResult'(Bin,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Bin,
							  0, 0,
							  id([], TrUserData),
							  TrUserData).

'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(<<10,
							Rest/binary>>,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'd_field_ProtobufBroker.CancelOrderResult_orderId'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(<<>>,
						      0, 0, F@_1, _) ->
    #'ProtobufBroker.CancelOrderResult'{orderId = F@_1};
'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Other,
						      Z1, Z2, F@_1,
						      TrUserData) ->
    'dg_read_field_def_ProtobufBroker.CancelOrderResult'(Other,
							 Z1, Z2, F@_1,
							 TrUserData).

'dg_read_field_def_ProtobufBroker.CancelOrderResult'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.CancelOrderResult'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'dg_read_field_def_ProtobufBroker.CancelOrderResult'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.CancelOrderResult_orderId'(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.CancelOrderResult'(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.CancelOrderResult'(Rest, 0, 0,
							   F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.CancelOrderResult'(Rest,
									 0, 0,
									 F@_1,
									 TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.CancelOrderResult'(Rest,
							      Key bsr 3, 0,
							      F@_1, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.CancelOrderResult'(Rest, 0, 0,
							   F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.CancelOrderResult'(<<>>,
						     0, 0, F@_1, _) ->
    #'ProtobufBroker.CancelOrderResult'{orderId = F@_1}.

'd_field_ProtobufBroker.CancelOrderResult_orderId'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.CancelOrderResult_orderId'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
'd_field_ProtobufBroker.CancelOrderResult_orderId'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(RestF,
							  0, 0, NewFValue,
							  TrUserData).

'skip_varint_ProtobufBroker.CancelOrderResult'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.CancelOrderResult'(Rest, Z1,
						   Z2, F@_1, TrUserData);
'skip_varint_ProtobufBroker.CancelOrderResult'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData).

'skip_length_delimited_ProtobufBroker.CancelOrderResult'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.CancelOrderResult'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, TrUserData);
'skip_length_delimited_ProtobufBroker.CancelOrderResult'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Rest2,
							  0, 0, F@_1,
							  TrUserData).

'skip_group_ProtobufBroker.CancelOrderResult'(Bin, FNum,
					      Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Rest,
							  0, Z2, F@_1,
							  TrUserData).

'skip_32_ProtobufBroker.CancelOrderResult'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData).

'skip_64_ProtobufBroker.CancelOrderResult'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.CancelOrderResult'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData).

'decode_msg_ProtobufBroker.ReplaceOrderRequest'(Bin,
						TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Bin,
							    0, 0,
							    id([], TrUserData),
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<10,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'd_field_ProtobufBroker.ReplaceOrderRequest_orderId'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<18,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'd_field_ProtobufBroker.ReplaceOrderRequest_replacement'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<26,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'd_field_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 TrUserData);
'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<>>,
							0, 0, F@_1, F@_2, F@_3,
							_) ->
    #'ProtobufBroker.ReplaceOrderRequest'{orderId = F@_1,
					  replacement = F@_2,
					  replacementClosingOrder = F@_3};
'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Other,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData).

'dg_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   TrUserData);
'dg_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.ReplaceOrderRequest_orderId'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
      18 ->
	  'd_field_ProtobufBroker.ReplaceOrderRequest_replacement'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
      26 ->
	  'd_field_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.ReplaceOrderRequest'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.ReplaceOrderRequest'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.ReplaceOrderRequest'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.ReplaceOrderRequest'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								F@_3,
								TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.ReplaceOrderRequest'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.ReplaceOrderRequest'(<<>>,
						       0, 0, F@_1, F@_2, F@_3,
						       _) ->
    #'ProtobufBroker.ReplaceOrderRequest'{orderId = F@_1,
					  replacement = F@_2,
					  replacementClosingOrder = F@_3}.

'd_field_ProtobufBroker.ReplaceOrderRequest_orderId'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.ReplaceOrderRequest_orderId'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
'd_field_ProtobufBroker.ReplaceOrderRequest_orderId'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2, F@_3,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(RestF,
							    0, 0, NewFValue,
							    F@_2, F@_3,
							    TrUserData).

'd_field_ProtobufBroker.ReplaceOrderRequest_replacement'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.ReplaceOrderRequest_replacement'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     TrUserData);
'd_field_ProtobufBroker.ReplaceOrderRequest_replacement'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, Prev,
							 F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(RestF,
							    0, 0, F@_1,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_ProtobufBroker.PrivateOrder'(Prev,
													   NewFValue,
													   TrUserData)
							    end,
							    F@_3, TrUserData).

'd_field_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 TrUserData);
'd_field_ProtobufBroker.ReplaceOrderRequest_replacementClosingOrder'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(RestF,
							    0, 0, F@_1, F@_2,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_ProtobufBroker.PrivateOrder'(Prev,
													   NewFValue,
													   TrUserData)
							    end,
							    TrUserData).

'skip_varint_ProtobufBroker.ReplaceOrderRequest'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'skip_varint_ProtobufBroker.ReplaceOrderRequest'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
'skip_varint_ProtobufBroker.ReplaceOrderRequest'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData).

'skip_length_delimited_ProtobufBroker.ReplaceOrderRequest'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.ReplaceOrderRequest'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
'skip_length_delimited_ProtobufBroker.ReplaceOrderRequest'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Rest2,
							    0, 0, F@_1, F@_2,
							    F@_3, TrUserData).

'skip_group_ProtobufBroker.ReplaceOrderRequest'(Bin,
						FNum, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Rest,
							    0, Z2, F@_1, F@_2,
							    F@_3, TrUserData).

'skip_32_ProtobufBroker.ReplaceOrderRequest'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData).

'skip_64_ProtobufBroker.ReplaceOrderRequest'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ReplaceOrderRequest'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData).

'decode_msg_ProtobufBroker.ClosePositionRequest'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Bin,
							     0, 0,
							     id([], TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'd_field_ProtobufBroker.ClosePositionRequest_positionId'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData);
'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(<<>>,
							 0, 0, F@_1, _) ->
    #'ProtobufBroker.ClosePositionRequest'{positionId =
					       F@_1};
'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Other,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'dg_read_field_def_ProtobufBroker.ClosePositionRequest'(Other,
							    Z1, Z2, F@_1,
							    TrUserData).

'dg_read_field_def_ProtobufBroker.ClosePositionRequest'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.ClosePositionRequest'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    TrUserData);
'dg_read_field_def_ProtobufBroker.ClosePositionRequest'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      18 ->
	  'd_field_ProtobufBroker.ClosePositionRequest_positionId'(Rest,
								   0, 0, F@_1,
								   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.ClosePositionRequest'(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.ClosePositionRequest'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.ClosePositionRequest'(Rest,
									    0,
									    0,
									    F@_1,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.ClosePositionRequest'(Rest,
								 Key bsr 3, 0,
								 F@_1,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.ClosePositionRequest'(Rest, 0,
							      0, F@_1,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.ClosePositionRequest'(<<>>,
							0, 0, F@_1, _) ->
    #'ProtobufBroker.ClosePositionRequest'{positionId =
					       F@_1}.

'd_field_ProtobufBroker.ClosePositionRequest_positionId'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.ClosePositionRequest_positionId'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, TrUserData);
'd_field_ProtobufBroker.ClosePositionRequest_positionId'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(RestF,
							     0, 0, NewFValue,
							     TrUserData).

'skip_varint_ProtobufBroker.ClosePositionRequest'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.ClosePositionRequest'(Rest,
						      Z1, Z2, F@_1, TrUserData);
'skip_varint_ProtobufBroker.ClosePositionRequest'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_length_delimited_ProtobufBroker.ClosePositionRequest'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.ClosePositionRequest'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'skip_length_delimited_ProtobufBroker.ClosePositionRequest'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Rest2,
							     0, 0, F@_1,
							     TrUserData).

'skip_group_ProtobufBroker.ClosePositionRequest'(Bin,
						 FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Rest,
							     0, Z2, F@_1,
							     TrUserData).

'skip_32_ProtobufBroker.ClosePositionRequest'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_64_ProtobufBroker.ClosePositionRequest'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.ClosePositionRequest'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'decode_msg_ProtobufBroker.SyncRequest'(Bin,
					TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SyncRequest'(Bin, 0,
						    0, TrUserData).

'dfp_read_field_def_ProtobufBroker.SyncRequest'(<<>>, 0,
						0, _) ->
    #'ProtobufBroker.SyncRequest'{};
'dfp_read_field_def_ProtobufBroker.SyncRequest'(Other,
						Z1, Z2, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.SyncRequest'(Other,
						   Z1, Z2, TrUserData).

'dg_read_field_def_ProtobufBroker.SyncRequest'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.SyncRequest'(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
'dg_read_field_def_ProtobufBroker.SyncRequest'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  'skip_varint_ProtobufBroker.SyncRequest'(Rest, 0, 0,
						   TrUserData);
      1 ->
	  'skip_64_ProtobufBroker.SyncRequest'(Rest, 0, 0,
					       TrUserData);
      2 ->
	  'skip_length_delimited_ProtobufBroker.SyncRequest'(Rest,
							     0, 0, TrUserData);
      3 ->
	  'skip_group_ProtobufBroker.SyncRequest'(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  'skip_32_ProtobufBroker.SyncRequest'(Rest, 0, 0,
					       TrUserData)
    end;
'dg_read_field_def_ProtobufBroker.SyncRequest'(<<>>, 0,
					       0, _) ->
    #'ProtobufBroker.SyncRequest'{}.

'skip_varint_ProtobufBroker.SyncRequest'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    'skip_varint_ProtobufBroker.SyncRequest'(Rest, Z1, Z2,
					     TrUserData);
'skip_varint_ProtobufBroker.SyncRequest'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SyncRequest'(Rest,
						    Z1, Z2, TrUserData).

'skip_length_delimited_ProtobufBroker.SyncRequest'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.SyncRequest'(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
'skip_length_delimited_ProtobufBroker.SyncRequest'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.SyncRequest'(Rest2,
						    0, 0, TrUserData).

'skip_group_ProtobufBroker.SyncRequest'(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.SyncRequest'(Rest, 0,
						    Z2, TrUserData).

'skip_32_ProtobufBroker.SyncRequest'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SyncRequest'(Rest,
						    Z1, Z2, TrUserData).

'skip_64_ProtobufBroker.SyncRequest'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SyncRequest'(Rest,
						    Z1, Z2, TrUserData).

'decode_msg_ProtobufBroker.BrokerRequest'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Bin,
						      0, 0, id([], TrUserData),
						      id(0, TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_id'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<56,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_marketId'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_placeOrderRequest'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<26,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_cancelOrderRequest'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3,
							      TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<50,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_replaceOrderRequest'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<34,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_syncRequest'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<42,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'd_field_ProtobufBroker.BrokerRequest_closePositionRequest'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(<<>>,
						  0, 0, F@_1, F@_2, F@_3, _) ->
    #'ProtobufBroker.BrokerRequest'{id = F@_1,
				    marketId = F@_2, 'Request' = F@_3};
'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Other,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    'dg_read_field_def_ProtobufBroker.BrokerRequest'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

'dg_read_field_def_ProtobufBroker.BrokerRequest'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.BrokerRequest'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
'dg_read_field_def_ProtobufBroker.BrokerRequest'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.BrokerRequest_id'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      56 ->
	  'd_field_ProtobufBroker.BrokerRequest_marketId'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  TrUserData);
      18 ->
	  'd_field_ProtobufBroker.BrokerRequest_placeOrderRequest'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   TrUserData);
      26 ->
	  'd_field_ProtobufBroker.BrokerRequest_cancelOrderRequest'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
      50 ->
	  'd_field_ProtobufBroker.BrokerRequest_replaceOrderRequest'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
      34 ->
	  'd_field_ProtobufBroker.BrokerRequest_syncRequest'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      42 ->
	  'd_field_ProtobufBroker.BrokerRequest_closePositionRequest'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.BrokerRequest'(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.BrokerRequest'(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.BrokerRequest'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.BrokerRequest'(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, F@_3,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.BrokerRequest'(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.BrokerRequest'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, _) ->
    #'ProtobufBroker.BrokerRequest'{id = F@_1,
				    marketId = F@_2, 'Request' = F@_3}.

'd_field_ProtobufBroker.BrokerRequest_id'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_id'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
'd_field_ProtobufBroker.BrokerRequest_id'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, NewFValue, F@_2,
						      F@_3, TrUserData).

'd_field_ProtobufBroker.BrokerRequest_marketId'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_marketId'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, TrUserData);
'd_field_ProtobufBroker.BrokerRequest_marketId'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3,
						TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, F@_1, NewFValue,
						      F@_3, TrUserData).

'd_field_ProtobufBroker.BrokerRequest_placeOrderRequest'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_placeOrderRequest'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     TrUserData);
'd_field_ProtobufBroker.BrokerRequest_placeOrderRequest'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PlaceOrderRequest'(Bs,
									     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, F@_1, F@_2,
						      case Prev of
							undefined ->
							    id({placeOrderRequest,
								NewFValue},
							       TrUserData);
							{placeOrderRequest,
							 MVPrev} ->
							    id({placeOrderRequest,
								'merge_msg_ProtobufBroker.PlaceOrderRequest'(MVPrev,
													     NewFValue,
													     TrUserData)},
							       TrUserData);
							_ ->
							    id({placeOrderRequest,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufBroker.BrokerRequest_cancelOrderRequest'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_cancelOrderRequest'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      TrUserData);
'd_field_ProtobufBroker.BrokerRequest_cancelOrderRequest'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.CancelOrderRequest'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, F@_1, F@_2,
						      case Prev of
							undefined ->
							    id({cancelOrderRequest,
								NewFValue},
							       TrUserData);
							{cancelOrderRequest,
							 MVPrev} ->
							    id({cancelOrderRequest,
								'merge_msg_ProtobufBroker.CancelOrderRequest'(MVPrev,
													      NewFValue,
													      TrUserData)},
							       TrUserData);
							_ ->
							    id({cancelOrderRequest,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufBroker.BrokerRequest_replaceOrderRequest'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_replaceOrderRequest'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
'd_field_ProtobufBroker.BrokerRequest_replaceOrderRequest'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.ReplaceOrderRequest'(Bs,
									       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, F@_1, F@_2,
						      case Prev of
							undefined ->
							    id({replaceOrderRequest,
								NewFValue},
							       TrUserData);
							{replaceOrderRequest,
							 MVPrev} ->
							    id({replaceOrderRequest,
								'merge_msg_ProtobufBroker.ReplaceOrderRequest'(MVPrev,
													       NewFValue,
													       TrUserData)},
							       TrUserData);
							_ ->
							    id({replaceOrderRequest,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufBroker.BrokerRequest_syncRequest'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_syncRequest'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
'd_field_ProtobufBroker.BrokerRequest_syncRequest'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, Prev,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.SyncRequest'(Bs,
								       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, F@_1, F@_2,
						      case Prev of
							undefined ->
							    id({syncRequest,
								NewFValue},
							       TrUserData);
							{syncRequest, MVPrev} ->
							    id({syncRequest,
								'merge_msg_ProtobufBroker.SyncRequest'(MVPrev,
												       NewFValue,
												       TrUserData)},
							       TrUserData);
							_ ->
							    id({syncRequest,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufBroker.BrokerRequest_closePositionRequest'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerRequest_closePositionRequest'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3,
								TrUserData);
'd_field_ProtobufBroker.BrokerRequest_closePositionRequest'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.ClosePositionRequest'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(RestF,
						      0, 0, F@_1, F@_2,
						      case Prev of
							undefined ->
							    id({closePositionRequest,
								NewFValue},
							       TrUserData);
							{closePositionRequest,
							 MVPrev} ->
							    id({closePositionRequest,
								'merge_msg_ProtobufBroker.ClosePositionRequest'(MVPrev,
														NewFValue,
														TrUserData)},
							       TrUserData);
							_ ->
							    id({closePositionRequest,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'skip_varint_ProtobufBroker.BrokerRequest'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    'skip_varint_ProtobufBroker.BrokerRequest'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
'skip_varint_ProtobufBroker.BrokerRequest'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

'skip_length_delimited_ProtobufBroker.BrokerRequest'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.BrokerRequest'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
'skip_length_delimited_ProtobufBroker.BrokerRequest'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Rest2,
						      0, 0, F@_1, F@_2, F@_3,
						      TrUserData).

'skip_group_ProtobufBroker.BrokerRequest'(Bin, FNum, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Rest,
						      0, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

'skip_32_ProtobufBroker.BrokerRequest'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

'skip_64_ProtobufBroker.BrokerRequest'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerRequest'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

'decode_msg_ProtobufBroker.OrdersUpdate'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Bin, 0,
						     0, id([], TrUserData),
						     TrUserData).

'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufBroker.OrdersUpdate_orders'(Rest, Z1,
						 Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(<<>>,
						 0, 0, R1, TrUserData) ->
    #'ProtobufBroker.OrdersUpdate'{orders =
				       lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Other,
						 Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.OrdersUpdate'(Other,
						    Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufBroker.OrdersUpdate'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.OrdersUpdate'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
'dg_read_field_def_ProtobufBroker.OrdersUpdate'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.OrdersUpdate_orders'(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.OrdersUpdate'(Rest, 0, 0,
							  F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.OrdersUpdate'(Rest, 0, 0, F@_1,
						      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.OrdersUpdate'(Rest,
								    0, 0, F@_1,
								    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.OrdersUpdate'(Rest,
							 Key bsr 3, 0, F@_1,
							 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.OrdersUpdate'(Rest, 0, 0, F@_1,
						      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.OrdersUpdate'(<<>>, 0,
						0, R1, TrUserData) ->
    #'ProtobufBroker.OrdersUpdate'{orders =
				       lists_reverse(R1, TrUserData)}.

'd_field_ProtobufBroker.OrdersUpdate_orders'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.OrdersUpdate_orders'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
'd_field_ProtobufBroker.OrdersUpdate_orders'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(RestF,
						     0, 0,
						     cons(NewFValue, Prev,
							  TrUserData),
						     TrUserData).

'skip_varint_ProtobufBroker.OrdersUpdate'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.OrdersUpdate'(Rest, Z1, Z2,
					      F@_1, TrUserData);
'skip_varint_ProtobufBroker.OrdersUpdate'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Rest,
						     Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufBroker.OrdersUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.OrdersUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'skip_length_delimited_ProtobufBroker.OrdersUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Rest2,
						     0, 0, F@_1, TrUserData).

'skip_group_ProtobufBroker.OrdersUpdate'(Bin, FNum, Z2,
					 F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Rest,
						     0, Z2, F@_1, TrUserData).

'skip_32_ProtobufBroker.OrdersUpdate'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Rest,
						     Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufBroker.OrdersUpdate'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.OrdersUpdate'(Rest,
						     Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufBroker.TradesUpdate'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Bin, 0,
						     0, id([], TrUserData),
						     TrUserData).

'dfp_read_field_def_ProtobufBroker.TradesUpdate'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufBroker.TradesUpdate_trades'(Rest, Z1,
						 Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufBroker.TradesUpdate'(<<>>,
						 0, 0, R1, TrUserData) ->
    #'ProtobufBroker.TradesUpdate'{trades =
				       lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Other,
						 Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.TradesUpdate'(Other,
						    Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufBroker.TradesUpdate'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.TradesUpdate'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
'dg_read_field_def_ProtobufBroker.TradesUpdate'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.TradesUpdate_trades'(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.TradesUpdate'(Rest, 0, 0,
							  F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.TradesUpdate'(Rest, 0, 0, F@_1,
						      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.TradesUpdate'(Rest,
								    0, 0, F@_1,
								    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.TradesUpdate'(Rest,
							 Key bsr 3, 0, F@_1,
							 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.TradesUpdate'(Rest, 0, 0, F@_1,
						      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.TradesUpdate'(<<>>, 0,
						0, R1, TrUserData) ->
    #'ProtobufBroker.TradesUpdate'{trades =
				       lists_reverse(R1, TrUserData)}.

'd_field_ProtobufBroker.TradesUpdate_trades'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.TradesUpdate_trades'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
'd_field_ProtobufBroker.TradesUpdate_trades'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateTrade'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(RestF,
						     0, 0,
						     cons(NewFValue, Prev,
							  TrUserData),
						     TrUserData).

'skip_varint_ProtobufBroker.TradesUpdate'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.TradesUpdate'(Rest, Z1, Z2,
					      F@_1, TrUserData);
'skip_varint_ProtobufBroker.TradesUpdate'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Rest,
						     Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufBroker.TradesUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.TradesUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'skip_length_delimited_ProtobufBroker.TradesUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Rest2,
						     0, 0, F@_1, TrUserData).

'skip_group_ProtobufBroker.TradesUpdate'(Bin, FNum, Z2,
					 F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Rest,
						     0, Z2, F@_1, TrUserData).

'skip_32_ProtobufBroker.TradesUpdate'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Rest,
						     Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufBroker.TradesUpdate'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.TradesUpdate'(Rest,
						     Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufBroker.PositionsUpdate'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Bin,
							0, 0,
							id([], TrUserData),
							TrUserData).

'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufBroker.PositionsUpdate_positions'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(<<>>,
						    0, 0, R1, TrUserData) ->
    #'ProtobufBroker.PositionsUpdate'{positions =
					  lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Other,
						    Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PositionsUpdate'(Other,
						       Z1, Z2, F@_1,
						       TrUserData).

'dg_read_field_def_ProtobufBroker.PositionsUpdate'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PositionsUpdate'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
'dg_read_field_def_ProtobufBroker.PositionsUpdate'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PositionsUpdate_positions'(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PositionsUpdate'(Rest, 0, 0,
							     F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PositionsUpdate'(Rest, 0, 0,
							 F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PositionsUpdate'(Rest,
								       0, 0,
								       F@_1,
								       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PositionsUpdate'(Rest,
							    Key bsr 3, 0, F@_1,
							    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PositionsUpdate'(Rest, 0, 0,
							 F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PositionsUpdate'(<<>>,
						   0, 0, R1, TrUserData) ->
    #'ProtobufBroker.PositionsUpdate'{positions =
					  lists_reverse(R1, TrUserData)}.

'd_field_ProtobufBroker.PositionsUpdate_positions'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PositionsUpdate_positions'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
'd_field_ProtobufBroker.PositionsUpdate_positions'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivatePosition'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(RestF,
							0, 0,
							cons(NewFValue, Prev,
							     TrUserData),
							TrUserData).

'skip_varint_ProtobufBroker.PositionsUpdate'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.PositionsUpdate'(Rest, Z1,
						 Z2, F@_1, TrUserData);
'skip_varint_ProtobufBroker.PositionsUpdate'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Rest,
							Z1, Z2, F@_1,
							TrUserData).

'skip_length_delimited_ProtobufBroker.PositionsUpdate'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PositionsUpdate'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, TrUserData);
'skip_length_delimited_ProtobufBroker.PositionsUpdate'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Rest2,
							0, 0, F@_1, TrUserData).

'skip_group_ProtobufBroker.PositionsUpdate'(Bin, FNum,
					    Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Rest,
							0, Z2, F@_1,
							TrUserData).

'skip_32_ProtobufBroker.PositionsUpdate'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Rest,
							Z1, Z2, F@_1,
							TrUserData).

'skip_64_ProtobufBroker.PositionsUpdate'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PositionsUpdate'(Rest,
							Z1, Z2, F@_1,
							TrUserData).

'decode_msg_ProtobufBroker.BalancesUpdate'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Bin,
						       0, 0, id([], TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufBroker.BalancesUpdate_balances'(Rest,
						     Z1, Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(<<>>,
						   0, 0, R1, TrUserData) ->
    #'ProtobufBroker.BalancesUpdate'{balances =
					 lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Other,
						   Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.BalancesUpdate'(Other,
						      Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufBroker.BalancesUpdate'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.BalancesUpdate'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
'dg_read_field_def_ProtobufBroker.BalancesUpdate'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.BalancesUpdate_balances'(Rest,
							   0, 0, F@_1,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.BalancesUpdate'(Rest, 0, 0,
							    F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.BalancesUpdate'(Rest, 0, 0,
							F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.BalancesUpdate'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.BalancesUpdate'(Rest,
							   Key bsr 3, 0, F@_1,
							   TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.BalancesUpdate'(Rest, 0, 0,
							F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.BalancesUpdate'(<<>>,
						  0, 0, R1, TrUserData) ->
    #'ProtobufBroker.BalancesUpdate'{balances =
					 lists_reverse(R1, TrUserData)}.

'd_field_ProtobufBroker.BalancesUpdate_balances'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BalancesUpdate_balances'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'd_field_ProtobufBroker.BalancesUpdate_balances'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.Balances'(Bs,
								    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(RestF,
						       0, 0,
						       cons(NewFValue, Prev,
							    TrUserData),
						       TrUserData).

'skip_varint_ProtobufBroker.BalancesUpdate'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufBroker.BalancesUpdate'(Rest, Z1,
						Z2, F@_1, TrUserData);
'skip_varint_ProtobufBroker.BalancesUpdate'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'skip_length_delimited_ProtobufBroker.BalancesUpdate'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.BalancesUpdate'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'skip_length_delimited_ProtobufBroker.BalancesUpdate'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Rest2,
						       0, 0, F@_1, TrUserData).

'skip_group_ProtobufBroker.BalancesUpdate'(Bin, FNum,
					   Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Rest,
						       0, Z2, F@_1, TrUserData).

'skip_32_ProtobufBroker.BalancesUpdate'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'skip_64_ProtobufBroker.BalancesUpdate'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BalancesUpdate'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'decode_msg_ProtobufBroker.RequestResolutionUpdate'(Bin,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Bin,
								0, 0,
								id([],
								   TrUserData),
								id(0,
								   TrUserData),
								id([],
								   TrUserData),
								id(undefined,
								   TrUserData),
								TrUserData).

'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<10,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_id'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<16,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_error'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<26,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_message'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<34,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<42,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, _) ->
    #'ProtobufBroker.RequestResolutionUpdate'{id = F@_1,
					      error = F@_2, message = F@_3,
					      'Result' = F@_4};
'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    'dg_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Other,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData).

'dg_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       F@_4,
							       TrUserData);
'dg_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.RequestResolutionUpdate_id'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
      16 ->
	  'd_field_ProtobufBroker.RequestResolutionUpdate_error'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
      26 ->
	  'd_field_ProtobufBroker.RequestResolutionUpdate_message'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
      34 ->
	  'd_field_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
      42 ->
	  'd_field_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.RequestResolutionUpdate'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.RequestResolutionUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.RequestResolutionUpdate'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.RequestResolutionUpdate'(Rest,
								    Key bsr 3,
								    0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.RequestResolutionUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.RequestResolutionUpdate'(<<>>,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, _) ->
    #'ProtobufBroker.RequestResolutionUpdate'{id = F@_1,
					      error = F@_2, message = F@_3,
					      'Result' = F@_4}.

'd_field_ProtobufBroker.RequestResolutionUpdate_id'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_id'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
'd_field_ProtobufBroker.RequestResolutionUpdate_id'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, _, F@_2, F@_3, F@_4,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(RestF,
								0, 0, NewFValue,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'd_field_ProtobufBroker.RequestResolutionUpdate_error'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_error'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
'd_field_ProtobufBroker.RequestResolutionUpdate_error'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, _, F@_3,
						       F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(RestF,
								0, 0, F@_1,
								NewFValue, F@_3,
								F@_4,
								TrUserData).

'd_field_ProtobufBroker.RequestResolutionUpdate_message'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_message'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
'd_field_ProtobufBroker.RequestResolutionUpdate_message'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2, _,
							 F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(RestF,
								0, 0, F@_1,
								F@_2, NewFValue,
								F@_4,
								TrUserData).

'd_field_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'd_field_ProtobufBroker.RequestResolutionUpdate_placeOrderResult'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2, F@_3,
								  Prev,
								  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PlaceOrderResult'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(RestF,
								0, 0, F@_1,
								F@_2, F@_3,
								case Prev of
								  undefined ->
								      id({placeOrderResult,
									  NewFValue},
									 TrUserData);
								  {placeOrderResult,
								   MVPrev} ->
								      id({placeOrderResult,
									  'merge_msg_ProtobufBroker.PlaceOrderResult'(MVPrev,
														      NewFValue,
														      TrUserData)},
									 TrUserData);
								  _ ->
								      id({placeOrderResult,
									  NewFValue},
									 TrUserData)
								end,
								TrUserData).

'd_field_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
'd_field_ProtobufBroker.RequestResolutionUpdate_cancelOrderResult'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.CancelOrderResult'(Bs,
									     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(RestF,
								0, 0, F@_1,
								F@_2, F@_3,
								case Prev of
								  undefined ->
								      id({cancelOrderResult,
									  NewFValue},
									 TrUserData);
								  {cancelOrderResult,
								   MVPrev} ->
								      id({cancelOrderResult,
									  'merge_msg_ProtobufBroker.CancelOrderResult'(MVPrev,
														       NewFValue,
														       TrUserData)},
									 TrUserData);
								  _ ->
								      id({cancelOrderResult,
									  NewFValue},
									 TrUserData)
								end,
								TrUserData).

'skip_varint_ProtobufBroker.RequestResolutionUpdate'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'skip_varint_ProtobufBroker.RequestResolutionUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'skip_varint_ProtobufBroker.RequestResolutionUpdate'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'skip_length_delimited_ProtobufBroker.RequestResolutionUpdate'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.RequestResolutionUpdate'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   TrUserData);
'skip_length_delimited_ProtobufBroker.RequestResolutionUpdate'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Rest2,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'skip_group_ProtobufBroker.RequestResolutionUpdate'(Bin,
						    FNum, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Rest,
								0, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'skip_32_ProtobufBroker.RequestResolutionUpdate'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'skip_64_ProtobufBroker.RequestResolutionUpdate'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.RequestResolutionUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'decode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Bin,
							 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Bin,
								     0, 0,
								     id(0,
									TrUserData),
								     id([],
									TrUserData),
								     TrUserData).

'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(<<8,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData) ->
    'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_expiration'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData);
'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(<<18,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData) ->
    'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_token'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(<<>>,
								 0, 0, F@_1,
								 F@_2, _) ->
    #'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
						       = F@_1,
						   token = F@_2};
'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Other,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData) ->
    'dg_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Other,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'dg_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'dg_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_expiration'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
      18 ->
	  'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_token'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
									 Key bsr
									   3,
									 0,
									 F@_1,
									 F@_2,
									 TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(<<>>,
								0, 0, F@_1,
								F@_2, _) ->
    #'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
						       = F@_1,
						   token = F@_2}.

'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_expiration'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_expiration'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_expiration'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, _,
								 F@_2,
								 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(RestF,
								     0, 0,
								     NewFValue,
								     F@_2,
								     TrUserData).

'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_token'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_token'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_ProtobufBroker.AnonymousSessionStatusUpdate_token'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, _,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(RestF,
								     0, 0, F@_1,
								     NewFValue,
								     TrUserData).

'skip_varint_ProtobufBroker.AnonymousSessionStatusUpdate'(<<1:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'skip_varint_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'skip_varint_ProtobufBroker.AnonymousSessionStatusUpdate'(<<0:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData).

'skip_length_delimited_ProtobufBroker.AnonymousSessionStatusUpdate'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									TrUserData);
'skip_length_delimited_ProtobufBroker.AnonymousSessionStatusUpdate'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest2,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData).

'skip_group_ProtobufBroker.AnonymousSessionStatusUpdate'(Bin,
							 FNum, Z2, F@_1, F@_2,
							 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								     0, Z2,
								     F@_1, F@_2,
								     TrUserData).

'skip_32_ProtobufBroker.AnonymousSessionStatusUpdate'(<<_:32,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData).

'skip_64_ProtobufBroker.AnonymousSessionStatusUpdate'(<<_:64,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.AnonymousSessionStatusUpdate'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData).

'decode_msg_ProtobufBroker.SessionStatusUpdate'(Bin,
						TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Bin,
							    0, 0,
							    id(false,
							       TrUserData),
							    id(false,
							       TrUserData),
							    id(0, TrUserData),
							    id(0, TrUserData),
							    TrUserData).

'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<8,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    'd_field_ProtobufBroker.SessionStatusUpdate_initialized'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<16,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    'd_field_ProtobufBroker.SessionStatusUpdate_syncing'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<24,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    'd_field_ProtobufBroker.SessionStatusUpdate_lastSyncTime'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<32,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    'd_field_ProtobufBroker.SessionStatusUpdate_syncError'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<>>,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, _) ->
    #'ProtobufBroker.SessionStatusUpdate'{initialized =
					      F@_1,
					  syncing = F@_2, lastSyncTime = F@_3,
					  syncError = F@_4};
'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    'dg_read_field_def_ProtobufBroker.SessionStatusUpdate'(Other,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData).

'dg_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.SessionStatusUpdate'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
'dg_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufBroker.SessionStatusUpdate_initialized'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
      16 ->
	  'd_field_ProtobufBroker.SessionStatusUpdate_syncing'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      24 ->
	  'd_field_ProtobufBroker.SessionStatusUpdate_lastSyncTime'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
      32 ->
	  'd_field_ProtobufBroker.SessionStatusUpdate_syncError'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.SessionStatusUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.SessionStatusUpdate'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.SessionStatusUpdate'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.SessionStatusUpdate'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.SessionStatusUpdate'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.SessionStatusUpdate'(<<>>,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, _) ->
    #'ProtobufBroker.SessionStatusUpdate'{initialized =
					      F@_1,
					  syncing = F@_2, lastSyncTime = F@_3,
					  syncError = F@_4}.

'd_field_ProtobufBroker.SessionStatusUpdate_initialized'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.SessionStatusUpdate_initialized'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
'd_field_ProtobufBroker.SessionStatusUpdate_initialized'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _, F@_2, F@_3,
							 F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(RestF,
							    0, 0, NewFValue,
							    F@_2, F@_3, F@_4,
							    TrUserData).

'd_field_ProtobufBroker.SessionStatusUpdate_syncing'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.SessionStatusUpdate_syncing'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufBroker.SessionStatusUpdate_syncing'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, _, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(RestF,
							    0, 0, F@_1,
							    NewFValue, F@_3,
							    F@_4, TrUserData).

'd_field_ProtobufBroker.SessionStatusUpdate_lastSyncTime'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.SessionStatusUpdate_lastSyncTime'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, TrUserData);
'd_field_ProtobufBroker.SessionStatusUpdate_lastSyncTime'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2, _,
							  F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(RestF,
							    0, 0, F@_1, F@_2,
							    NewFValue, F@_4,
							    TrUserData).

'd_field_ProtobufBroker.SessionStatusUpdate_syncError'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.SessionStatusUpdate_syncError'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
'd_field_ProtobufBroker.SessionStatusUpdate_syncError'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(RestF,
							    0, 0, F@_1, F@_2,
							    F@_3, NewFValue,
							    TrUserData).

'skip_varint_ProtobufBroker.SessionStatusUpdate'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'skip_varint_ProtobufBroker.SessionStatusUpdate'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData);
'skip_varint_ProtobufBroker.SessionStatusUpdate'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'skip_length_delimited_ProtobufBroker.SessionStatusUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.SessionStatusUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       F@_4,
							       TrUserData);
'skip_length_delimited_ProtobufBroker.SessionStatusUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Rest2,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'skip_group_ProtobufBroker.SessionStatusUpdate'(Bin,
						FNum, Z2, F@_1, F@_2, F@_3,
						F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Rest,
							    0, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'skip_32_ProtobufBroker.SessionStatusUpdate'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'skip_64_ProtobufBroker.SessionStatusUpdate'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.SessionStatusUpdate'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'decode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Bin,
							TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Bin,
								    0, 0,
								    id([],
								       TrUserData),
								    id([],
								       TrUserData),
								    TrUserData).

'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(<<10,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate.Agreement_key'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(<<18,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate.Agreement_body'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(<<>>,
								0, 0, F@_1,
								F@_2, _) ->
    #'ProtobufBroker.PermissionsUpdate.Agreement'{key =
						      F@_1,
						  body = F@_2};
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Other,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Other,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData).

'dg_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   TrUserData);
'dg_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2,
							       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PermissionsUpdate.Agreement_key'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
      18 ->
	  'd_field_ProtobufBroker.PermissionsUpdate.Agreement_body'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
									Key bsr
									  3,
									0, F@_1,
									F@_2,
									TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(<<>>,
							       0, 0, F@_1, F@_2,
							       _) ->
    #'ProtobufBroker.PermissionsUpdate.Agreement'{key =
						      F@_1,
						  body = F@_2}.

'd_field_ProtobufBroker.PermissionsUpdate.Agreement_key'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate.Agreement_key'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate.Agreement_key'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _, F@_2,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(RestF,
								    0, 0,
								    NewFValue,
								    F@_2,
								    TrUserData).

'd_field_ProtobufBroker.PermissionsUpdate.Agreement_body'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate.Agreement_body'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate.Agreement_body'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, _,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(RestF,
								    0, 0, F@_1,
								    NewFValue,
								    TrUserData).

'skip_varint_ProtobufBroker.PermissionsUpdate.Agreement'(<<1:1,
							   _:7, Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'skip_varint_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
'skip_varint_ProtobufBroker.PermissionsUpdate.Agreement'(<<0:1,
							   _:7, Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'skip_length_delimited_ProtobufBroker.PermissionsUpdate.Agreement'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
'skip_length_delimited_ProtobufBroker.PermissionsUpdate.Agreement'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Rest2,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData).

'skip_group_ProtobufBroker.PermissionsUpdate.Agreement'(Bin,
							FNum, Z2, F@_1, F@_2,
							TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								    0, Z2, F@_1,
								    F@_2,
								    TrUserData).

'skip_32_ProtobufBroker.PermissionsUpdate.Agreement'(<<_:32,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'skip_64_ProtobufBroker.PermissionsUpdate.Agreement'(<<_:64,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.Agreement'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData).

'decode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Bin,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Bin,
									 0, 0,
									 id([],
									    TrUserData),
									 id([],
									    TrUserData),
									 TrUserData).

'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<10,
								       Rest/binary>>,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<18,
								       Rest/binary>>,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(Rest,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<>>,
								     0, 0, R1,
								     R2,
								     TrUserData) ->
    #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy =
							   lists_reverse(R1,
									 TrUserData),
						       sell =
							   lists_reverse(R2,
									 TrUserData)};
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Other,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Other,
									Z1, Z2,
									F@_1,
									F@_2,
									TrUserData).

'dg_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									TrUserData);
'dg_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      18 ->
	  'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
											0,
											0,
											F@_1,
											F@_2,
											TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									     Key
									       bsr
									       3,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<>>,
								    0, 0, R1,
								    R2,
								    TrUserData) ->
    #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy =
							   lists_reverse(R1,
									 TrUserData),
						       sell =
							   lists_reverse(R2,
									 TrUserData)}.

'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_buy'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, Prev,
							      F@_2,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(RestF,
									 0, 0,
									 cons(NewFValue,
									      Prev,
									      TrUserData),
									 F@_2,
									 TrUserData).

'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate.LeverageLevels_sell'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       Prev,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(RestF,
									 0, 0,
									 F@_1,
									 cons(NewFValue,
									      Prev,
									      TrUserData),
									 TrUserData).

'skip_varint_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<1:1,
								_:7,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'skip_varint_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'skip_varint_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<0:1,
								_:7,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_length_delimited_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<1:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									    N +
									      7,
									    X
									      bsl
									      N
									      +
									      Acc,
									    F@_1,
									    F@_2,
									    TrUserData);
'skip_length_delimited_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<0:1,
									  X:7,
									  Rest/binary>>,
									N, Acc,
									F@_1,
									F@_2,
									TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest2,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_group_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Bin,
							     FNum, Z2, F@_1,
							     F@_2,
							     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									 0, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_32_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<_:32,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'skip_64_ProtobufBroker.PermissionsUpdate.LeverageLevels'(<<_:64,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData).

'decode_msg_ProtobufBroker.PermissionsUpdate'(Bin,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Bin,
							  0, 0,
							  id([], TrUserData),
							  id([], TrUserData),
							  id([], TrUserData),
							  id(false, TrUserData),
							  id(undefined,
							     TrUserData),
							  id(false, TrUserData),
							  TrUserData).

'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<10,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_pfield_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<8,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<18,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_pfield_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<16,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<34,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate_agreements'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<40,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate_currencyPairAllowed'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<50,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate_leverageLevels'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6,
							      TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<56,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'd_field_ProtobufBroker.PermissionsUpdate_supportsOrderExpiry'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData);
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(<<>>,
						      0, 0, R1, R2, R3, F@_4,
						      F@_5, F@_6, TrUserData) ->
    #'ProtobufBroker.PermissionsUpdate'{orderTypes =
					    lists_reverse(R1, TrUserData),
					fundingTypes =
					    lists_reverse(R2, TrUserData),
					agreements =
					    lists_reverse(R3, TrUserData),
					currencyPairAllowed = F@_4,
					leverageLevels = F@_5,
					supportsOrderExpiry = F@_6};
'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PermissionsUpdate'(Other,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 TrUserData).

'dg_read_field_def_ProtobufBroker.PermissionsUpdate'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6,
							 TrUserData);
'dg_read_field_def_ProtobufBroker.PermissionsUpdate'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_pfield_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 TrUserData);
      8 ->
	  'd_field_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6,
								TrUserData);
      18 ->
	  'd_pfield_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6,
								   TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6,
								  TrUserData);
      34 ->
	  'd_field_ProtobufBroker.PermissionsUpdate_agreements'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6,
								TrUserData);
      40 ->
	  'd_field_ProtobufBroker.PermissionsUpdate_currencyPairAllowed'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 TrUserData);
      50 ->
	  'd_field_ProtobufBroker.PermissionsUpdate_leverageLevels'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6,
								    TrUserData);
      56 ->
	  'd_field_ProtobufBroker.PermissionsUpdate_supportsOrderExpiry'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PermissionsUpdate'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       F@_6,
							       TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PermissionsUpdate'(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PermissionsUpdate'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 F@_6,
									 TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PermissionsUpdate'(Rest,
							      Key bsr 3, 0,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PermissionsUpdate'(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PermissionsUpdate'(<<>>,
						     0, 0, R1, R2, R3, F@_4,
						     F@_5, F@_6, TrUserData) ->
    #'ProtobufBroker.PermissionsUpdate'{orderTypes =
					    lists_reverse(R1, TrUserData),
					fundingTypes =
					    lists_reverse(R2, TrUserData),
					agreements =
					    lists_reverse(R3, TrUserData),
					currencyPairAllowed = F@_4,
					leverageLevels = F@_5,
					supportsOrderExpiry = F@_6}.

'd_field_ProtobufBroker.PermissionsUpdate_orderTypes'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate_orderTypes'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, Prev, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(RestF,
							  0, 0,
							  cons(NewFValue, Prev,
							       TrUserData),
							  F@_2, F@_3, F@_4,
							  F@_5, F@_6,
							  TrUserData).

'd_pfield_ProtobufBroker.PermissionsUpdate_orderTypes'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       TrUserData)
    when N < 57 ->
    'd_pfield_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   TrUserData);
'd_pfield_ProtobufBroker.PermissionsUpdate_orderTypes'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, E, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_ProtobufBroker.PermissionsUpdate_orderTypes'(PackedBytes,
								     0, 0, E,
								     TrUserData),
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest2,
							  0, 0, NewSeq, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'd_packed_field_ProtobufBroker.PermissionsUpdate_orderTypes'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, AccSeq,
							     TrUserData)
    when N < 57 ->
    'd_packed_field_ProtobufBroker.PermissionsUpdate_orderTypes'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 AccSeq,
								 TrUserData);
'd_packed_field_ProtobufBroker.PermissionsUpdate_orderTypes'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, AccSeq,
							     TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'd_packed_field_ProtobufBroker.PermissionsUpdate_orderTypes'(RestF,
								 0, 0,
								 [NewFValue
								  | AccSeq],
								 TrUserData);
'd_packed_field_ProtobufBroker.PermissionsUpdate_orderTypes'(<<>>,
							     0, 0, AccSeq, _) ->
    AccSeq.

'd_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6,
							    TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, Prev,
							F@_3, F@_4, F@_5, F@_6,
							TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.FundingType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(RestF,
							  0, 0, F@_1,
							  cons(NewFValue, Prev,
							       TrUserData),
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'd_pfield_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 TrUserData)
    when N < 57 ->
    'd_pfield_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     TrUserData);
'd_pfield_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, E, F@_3,
							 F@_4, F@_5, F@_6,
							 TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(PackedBytes,
								       0, 0, E,
								       TrUserData),
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest2,
							  0, 0, F@_1, NewSeq,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'd_packed_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, AccSeq,
							       TrUserData)
    when N < 57 ->
    'd_packed_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   AccSeq,
								   TrUserData);
'd_packed_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, AccSeq,
							       TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.FundingType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    'd_packed_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(RestF,
								   0, 0,
								   [NewFValue
								    | AccSeq],
								   TrUserData);
'd_packed_field_ProtobufBroker.PermissionsUpdate_fundingTypes'(<<>>,
							       0, 0, AccSeq,
							       _) ->
    AccSeq.

'd_field_ProtobufBroker.PermissionsUpdate_agreements'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6,
						      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate_agreements'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate_agreements'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, Prev,
						      F@_4, F@_5, F@_6,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Bs,
										       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(RestF,
							  0, 0, F@_1, F@_2,
							  cons(NewFValue, Prev,
							       TrUserData),
							  F@_4, F@_5, F@_6,
							  TrUserData).

'd_field_ProtobufBroker.PermissionsUpdate_currencyPairAllowed'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5, F@_6,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate_currencyPairAllowed'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   F@_5, F@_6,
								   TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate_currencyPairAllowed'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, _,
							       F@_5, F@_6,
							       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(RestF,
							  0, 0, F@_1, F@_2,
							  F@_3, NewFValue, F@_5,
							  F@_6, TrUserData).

'd_field_ProtobufBroker.PermissionsUpdate_leverageLevels'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate_leverageLevels'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate_leverageLevels'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, Prev,
							  F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Bs,
											    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(RestF,
							  0, 0, F@_1, F@_2,
							  F@_3, F@_4,
							  if Prev ==
							       undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Prev,
															     NewFValue,
															     TrUserData)
							  end,
							  F@_6, TrUserData).

'd_field_ProtobufBroker.PermissionsUpdate_supportsOrderExpiry'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5, F@_6,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PermissionsUpdate_supportsOrderExpiry'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   F@_5, F@_6,
								   TrUserData);
'd_field_ProtobufBroker.PermissionsUpdate_supportsOrderExpiry'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5, _,
							       TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(RestF,
							  0, 0, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  NewFValue,
							  TrUserData).

'skip_varint_ProtobufBroker.PermissionsUpdate'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData) ->
    'skip_varint_ProtobufBroker.PermissionsUpdate'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, TrUserData);
'skip_varint_ProtobufBroker.PermissionsUpdate'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'skip_length_delimited_ProtobufBroker.PermissionsUpdate'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PermissionsUpdate'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     TrUserData);
'skip_length_delimited_ProtobufBroker.PermissionsUpdate'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest2,
							  0, 0, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'skip_group_ProtobufBroker.PermissionsUpdate'(Bin, FNum,
					      Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest,
							  0, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'skip_32_ProtobufBroker.PermissionsUpdate'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'skip_64_ProtobufBroker.PermissionsUpdate'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PermissionsUpdate'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, TrUserData).

'decode_msg_ProtobufBroker.APIAccessorStatusUpdate'(Bin,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Bin,
								0, 0,
								id(false,
								   TrUserData),
								id(0,
								   TrUserData),
								id([],
								   TrUserData),
								TrUserData).

'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<8,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.APIAccessorStatusUpdate_hasAccess'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData);
'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<16,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.APIAccessorStatusUpdate_status'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<26,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.APIAccessorStatusUpdate_statusString'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  TrUserData);
'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, _) ->
    #'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess =
						  F@_1,
					      status = F@_2,
					      statusString = F@_3};
'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Other,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'dg_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
'dg_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufBroker.APIAccessorStatusUpdate_hasAccess'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
      16 ->
	  'd_field_ProtobufBroker.APIAccessorStatusUpdate_status'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  TrUserData);
      26 ->
	  'd_field_ProtobufBroker.APIAccessorStatusUpdate_statusString'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								    Key bsr 3,
								    0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(<<>>,
							   0, 0, F@_1, F@_2,
							   F@_3, _) ->
    #'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess =
						  F@_1,
					      status = F@_2,
					      statusString = F@_3}.

'd_field_ProtobufBroker.APIAccessorStatusUpdate_hasAccess'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.APIAccessorStatusUpdate_hasAccess'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
'd_field_ProtobufBroker.APIAccessorStatusUpdate_hasAccess'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, _, F@_2,
							   F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(RestF,
								0, 0, NewFValue,
								F@_2, F@_3,
								TrUserData).

'd_field_ProtobufBroker.APIAccessorStatusUpdate_status'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.APIAccessorStatusUpdate_status'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
'd_field_ProtobufBroker.APIAccessorStatusUpdate_status'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, _, F@_3,
							TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(RestF,
								0, 0, F@_1,
								NewFValue, F@_3,
								TrUserData).

'd_field_ProtobufBroker.APIAccessorStatusUpdate_statusString'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.APIAccessorStatusUpdate_statusString'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3,
								  TrUserData);
'd_field_ProtobufBroker.APIAccessorStatusUpdate_statusString'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, _,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(RestF,
								0, 0, F@_1,
								F@_2, NewFValue,
								TrUserData).

'skip_varint_ProtobufBroker.APIAccessorStatusUpdate'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'skip_varint_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
'skip_varint_ProtobufBroker.APIAccessorStatusUpdate'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_length_delimited_ProtobufBroker.APIAccessorStatusUpdate'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3,
							       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3,
								   TrUserData);
'skip_length_delimited_ProtobufBroker.APIAccessorStatusUpdate'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Rest2,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_group_ProtobufBroker.APIAccessorStatusUpdate'(Bin,
						    FNum, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								0, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_32_ProtobufBroker.APIAccessorStatusUpdate'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_64_ProtobufBroker.APIAccessorStatusUpdate'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.APIAccessorStatusUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'decode_msg_ProtobufBroker.BrokerUpdateMessage'(Bin,
						TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Bin,
							    0, 0,
							    id(0, TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<88,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_marketId'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<10,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<18,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<26,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<66,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<34,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<42,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<50,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(Rest,
								   Z1, Z2, F@_1,
								   F@_2,
								   TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<58,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<74,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<82,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<98,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData);
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.BrokerUpdateMessage'{marketId = F@_1,
					  'Update' = F@_2};
'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Other,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'dg_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'dg_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'dg_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      88 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_marketId'(Rest,
								0, 0, F@_1,
								F@_2,
								TrUserData);
      10 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      18 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      26 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      66 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      34 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData);
      42 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    TrUserData);
      50 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData);
      58 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
      74 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       TrUserData);
      82 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    TrUserData);
      98 ->
	  'd_field_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.BrokerUpdateMessage'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.BrokerUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.BrokerUpdateMessage'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.BrokerUpdateMessage'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.BrokerUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.BrokerUpdateMessage'(<<>>,
						       0, 0, F@_1, F@_2, _) ->
    #'ProtobufBroker.BrokerUpdateMessage'{marketId = F@_1,
					  'Update' = F@_2}.

'd_field_ProtobufBroker.BrokerUpdateMessage_marketId'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_marketId'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_marketId'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, F@_2,
						      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, NewFValue,
							    F@_2, TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_ordersUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.OrdersUpdate'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({ordersUpdate,
								      NewFValue},
								     TrUserData);
							      {ordersUpdate,
							       MVPrev} ->
								  id({ordersUpdate,
								      'merge_msg_ProtobufBroker.OrdersUpdate'(MVPrev,
													      NewFValue,
													      TrUserData)},
								     TrUserData);
							      _ ->
								  id({ordersUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_tradesUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.TradesUpdate'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({tradesUpdate,
								      NewFValue},
								     TrUserData);
							      {tradesUpdate,
							       MVPrev} ->
								  id({tradesUpdate,
								      'merge_msg_ProtobufBroker.TradesUpdate'(MVPrev,
													      NewFValue,
													      TrUserData)},
								     TrUserData);
							      _ ->
								  id({tradesUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_balancesUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.BalancesUpdate'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({balancesUpdate,
								      NewFValue},
								     TrUserData);
							      {balancesUpdate,
							       MVPrev} ->
								  id({balancesUpdate,
								      'merge_msg_ProtobufBroker.BalancesUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								     TrUserData);
							      _ ->
								  id({balancesUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_positionsUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PositionsUpdate'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({positionsUpdate,
								      NewFValue},
								     TrUserData);
							      {positionsUpdate,
							       MVPrev} ->
								  id({positionsUpdate,
								      'merge_msg_ProtobufBroker.PositionsUpdate'(MVPrev,
														 NewFValue,
														 TrUserData)},
								     TrUserData);
							      _ ->
								  id({positionsUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_requestResolutionUpdate'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.RequestResolutionUpdate'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({requestResolutionUpdate,
								      NewFValue},
								     TrUserData);
							      {requestResolutionUpdate,
							       MVPrev} ->
								  id({requestResolutionUpdate,
								      'merge_msg_ProtobufBroker.RequestResolutionUpdate'(MVPrev,
															 NewFValue,
															 TrUserData)},
								     TrUserData);
							      _ ->
								  id({requestResolutionUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(<<1:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  F@_2,
									  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(Rest,
									      N
										+
										7,
									      X
										bsl
										N
										+
										Acc,
									      F@_1,
									      F@_2,
									      TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_anonymousSessionStatusUpdate'(<<0:1,
									    X:7,
									    Rest/binary>>,
									  N,
									  Acc,
									  F@_1,
									  Prev,
									  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Bs,
											TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({anonymousSessionStatusUpdate,
								      NewFValue},
								     TrUserData);
							      {anonymousSessionStatusUpdate,
							       MVPrev} ->
								  id({anonymousSessionStatusUpdate,
								      'merge_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(MVPrev,
															      NewFValue,
															      TrUserData)},
								     TrUserData);
							      _ ->
								  id({anonymousSessionStatusUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_permissionsUpdate'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       Prev,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PermissionsUpdate'(Bs,
									     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({permissionsUpdate,
								      NewFValue},
								     TrUserData);
							      {permissionsUpdate,
							       MVPrev} ->
								  id({permissionsUpdate,
								      'merge_msg_ProtobufBroker.PermissionsUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								     TrUserData);
							      _ ->
								  id({permissionsUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_sessionStatusUpdate'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 Prev,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.SessionStatusUpdate'(Bs,
									       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({sessionStatusUpdate,
								      NewFValue},
								     TrUserData);
							      {sessionStatusUpdate,
							       MVPrev} ->
								  id({sessionStatusUpdate,
								      'merge_msg_ProtobufBroker.SessionStatusUpdate'(MVPrev,
														     NewFValue,
														     TrUserData)},
								     TrUserData);
							      _ ->
								  id({sessionStatusUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_apiAccessorStatusUpdate'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.APIAccessorStatusUpdate'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({apiAccessorStatusUpdate,
								      NewFValue},
								     TrUserData);
							      {apiAccessorStatusUpdate,
							       MVPrev} ->
								  id({apiAccessorStatusUpdate,
								      'merge_msg_ProtobufBroker.APIAccessorStatusUpdate'(MVPrev,
															 NewFValue,
															 TrUserData)},
								     TrUserData);
							      _ ->
								  id({apiAccessorStatusUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(<<1:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  F@_2,
								  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(Rest,
								      N + 7,
								      X bsl N +
									Acc,
								      F@_1,
								      F@_2,
								      TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_authenticationResult'(<<0:1,
								    X:7,
								    Rest/binary>>,
								  N, Acc, F@_1,
								  Prev,
								  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.AuthenticationResult'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({authenticationResult,
								      NewFValue},
								     TrUserData);
							      {authenticationResult,
							       MVPrev} ->
								  id({authenticationResult,
								      'merge_msg_ProtobufStream.AuthenticationResult'(MVPrev,
														      NewFValue,
														      TrUserData)},
								     TrUserData);
							      _ ->
								  id({authenticationResult,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'd_field_ProtobufBroker.BrokerUpdateMessage_subscriptionResult'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								Prev,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.SubscriptionResult'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({subscriptionResult,
								      NewFValue},
								     TrUserData);
							      {subscriptionResult,
							       MVPrev} ->
								  id({subscriptionResult,
								      'merge_msg_ProtobufStream.SubscriptionResult'(MVPrev,
														    NewFValue,
														    TrUserData)},
								     TrUserData);
							      _ ->
								  id({subscriptionResult,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'skip_varint_ProtobufBroker.BrokerUpdateMessage'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'skip_varint_ProtobufBroker.BrokerUpdateMessage'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'skip_varint_ProtobufBroker.BrokerUpdateMessage'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_length_delimited_ProtobufBroker.BrokerUpdateMessage'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.BrokerUpdateMessage'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'skip_length_delimited_ProtobufBroker.BrokerUpdateMessage'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Rest2,
							    0, 0, F@_1, F@_2,
							    TrUserData).

'skip_group_ProtobufBroker.BrokerUpdateMessage'(Bin,
						FNum, Z2, F@_1, F@_2,
						TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Rest,
							    0, Z2, F@_1, F@_2,
							    TrUserData).

'skip_32_ProtobufBroker.BrokerUpdateMessage'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_64_ProtobufBroker.BrokerUpdateMessage'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.BrokerUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
								0, 0,
								id(0.0,
								   TrUserData),
								id([],
								   TrUserData),
								id('AbsoluteValue',
								   TrUserData),
								TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<13,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<26,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<16,
							      Rest/binary>>,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, _) ->
    #'ProtobufBroker.PrivateOrder.PriceParam'{value = F@_1,
					      valueString = F@_2, type = F@_3};
'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Other,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       TrUserData);
'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
      26 ->
	  'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								    Key bsr 3,
								    0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(<<>>,
							   0, 0, F@_1, F@_2,
							   F@_3, _) ->
    #'ProtobufBroker.PrivateOrder.PriceParam'{value = F@_1,
					      valueString = F@_2, type = F@_3}.

'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<0:16,
							 128, 127,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id(infinity,
								   TrUserData),
								F@_2, F@_3,
								TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<0:16,
							 128, 255,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id('-infinity',
								   TrUserData),
								F@_2, F@_3,
								TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<_:16,
							 1:1, _:7, _:1, 127:7,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id(nan,
								   TrUserData),
								F@_2, F@_3,
								TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_value'(<<Value:32/little-float,
							 Rest/binary>>,
						       Z1, Z2, _, F@_2, F@_3,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2,
								id(Value,
								   TrUserData),
								F@_2, F@_3,
								TrUserData).

'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3,
								 TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_valueString'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, _,
							     F@_3,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(RestF,
								0, 0, F@_1,
								NewFValue, F@_3,
								TrUserData).

'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
'd_field_ProtobufBroker.PrivateOrder.PriceParam_type'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, _,
						      TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.PriceParamType'(begin
								  <<Res:32/signed-native>> =
								      <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
								  id(Res,
								     TrUserData)
								end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(RestF,
								0, 0, F@_1,
								F@_2, NewFValue,
								TrUserData).

'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(<<1:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
'skip_varint_ProtobufBroker.PrivateOrder.PriceParam'(<<0:1,
						       _:7, Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3,
							       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3,
								   TrUserData);
'skip_length_delimited_ProtobufBroker.PrivateOrder.PriceParam'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3,
							       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest2,
								0, 0, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_group_ProtobufBroker.PrivateOrder.PriceParam'(Bin,
						    FNum, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								0, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_32_ProtobufBroker.PrivateOrder.PriceParam'(<<_:32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'skip_64_ProtobufBroker.PrivateOrder.PriceParam'(<<_:64,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder.PriceParam'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								TrUserData).

'decode_msg_ProtobufBroker.PrivateOrder'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Bin, 0,
						     0, id([], TrUserData),
						     id(0, TrUserData),
						     id(0.0, TrUserData),
						     id(0.0, TrUserData),
						     id(0, TrUserData),
						     id('Market', TrUserData),
						     id('Spot', TrUserData),
						     id([], TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     id(0.0, TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id([], TrUserData),
						     id(0, TrUserData),
						     id(0, TrUserData),
						     id(0.0, TrUserData),
						     id(false, TrUserData),
						     id('Market', TrUserData),
						     id([], TrUserData),
						     TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_id'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, F@_14, F@_15, F@_16,
					     F@_17, F@_18, F@_19, F@_20, F@_21,
					     F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<16,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_time'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<29,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_price'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<37,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amount'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<40,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_side'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<48,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_type'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<56,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_fundingType'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<66,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<77,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amountParam'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<130,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amountParamString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<138,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<82,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_leverage'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<93,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_currentStop'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<101,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_initialStop'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<146,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_currentStopString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<154,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_initialStopString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<104,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_startTime'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<112,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_expireTime'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<125,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_rate'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<160,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, F@_16, F@_17,
							  F@_18, F@_19, F@_20,
							  F@_21, F@_22,
							  TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<168,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, F@_16, F@_17,
							   F@_18, F@_19, F@_20,
							   F@_21, F@_22,
							   TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<178,
						   1, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, R1, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21, R2,
						 TrUserData) ->
    #'ProtobufBroker.PrivateOrder'{id = F@_1, time = F@_2,
				   price = F@_3, amount = F@_4, side = F@_5,
				   type = F@_6, fundingType = F@_7,
				   priceParams = lists_reverse(R1, TrUserData),
				   amountParam = F@_9,
				   amountParamString = F@_10,
				   amountFilledString = F@_11, leverage = F@_12,
				   currentStop = F@_13, initialStop = F@_14,
				   currentStopString = F@_15,
				   initialStopString = F@_16, startTime = F@_17,
				   expireTime = F@_18, rate = F@_19,
				   hasClosingOrder = F@_20,
				   closingOrderType = F@_21,
				   closingOrderPriceParams =
				       lists_reverse(R2, TrUserData)};
'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Other,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData).

'dg_read_field_def_ProtobufBroker.PrivateOrder'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, F@_16, F@_17,
						    F@_18, F@_19, F@_20, F@_21,
						    F@_22, TrUserData);
'dg_read_field_def_ProtobufBroker.PrivateOrder'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PrivateOrder_id'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16, F@_17,
						   F@_18, F@_19, F@_20, F@_21,
						   F@_22, TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivateOrder_time'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      29 ->
	  'd_field_ProtobufBroker.PrivateOrder_price'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
      37 ->
	  'd_field_ProtobufBroker.PrivateOrder_amount'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22,
						       TrUserData);
      40 ->
	  'd_field_ProtobufBroker.PrivateOrder_side'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      48 ->
	  'd_field_ProtobufBroker.PrivateOrder_type'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      56 ->
	  'd_field_ProtobufBroker.PrivateOrder_fundingType'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      66 ->
	  'd_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      77 ->
	  'd_field_ProtobufBroker.PrivateOrder_amountParam'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      130 ->
	  'd_field_ProtobufBroker.PrivateOrder_amountParamString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
      138 ->
	  'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10, F@_11,
								   F@_12, F@_13,
								   F@_14, F@_15,
								   F@_16, F@_17,
								   F@_18, F@_19,
								   F@_20, F@_21,
								   F@_22,
								   TrUserData);
      82 ->
	  'd_field_ProtobufBroker.PrivateOrder_leverage'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 TrUserData);
      93 ->
	  'd_field_ProtobufBroker.PrivateOrder_currentStop'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      101 ->
	  'd_field_ProtobufBroker.PrivateOrder_initialStop'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, F@_16, F@_17,
							    F@_18, F@_19, F@_20,
							    F@_21, F@_22,
							    TrUserData);
      146 ->
	  'd_field_ProtobufBroker.PrivateOrder_currentStopString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
      154 ->
	  'd_field_ProtobufBroker.PrivateOrder_initialStopString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  F@_12, F@_13,
								  F@_14, F@_15,
								  F@_16, F@_17,
								  F@_18, F@_19,
								  F@_20, F@_21,
								  F@_22,
								  TrUserData);
      104 ->
	  'd_field_ProtobufBroker.PrivateOrder_startTime'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, TrUserData);
      112 ->
	  'd_field_ProtobufBroker.PrivateOrder_expireTime'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, F@_16, F@_17,
							   F@_18, F@_19, F@_20,
							   F@_21, F@_22,
							   TrUserData);
      125 ->
	  'd_field_ProtobufBroker.PrivateOrder_rate'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
      160 ->
	  'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								F@_12, F@_13,
								F@_14, F@_15,
								F@_16, F@_17,
								F@_18, F@_19,
								F@_20, F@_21,
								F@_22,
								TrUserData);
      168 ->
	  'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10, F@_11,
								 F@_12, F@_13,
								 F@_14, F@_15,
								 F@_16, F@_17,
								 F@_18, F@_19,
								 F@_20, F@_21,
								 F@_22,
								 TrUserData);
      178 ->
	  'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									F@_6,
									F@_7,
									F@_8,
									F@_9,
									F@_10,
									F@_11,
									F@_12,
									F@_13,
									F@_14,
									F@_15,
									F@_16,
									F@_17,
									F@_18,
									F@_19,
									F@_20,
									F@_21,
									F@_22,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivateOrder'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivateOrder'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivateOrder'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    F@_11,
								    F@_12,
								    F@_13,
								    F@_14,
								    F@_15,
								    F@_16,
								    F@_17,
								    F@_18,
								    F@_19,
								    F@_20,
								    F@_21,
								    F@_22,
								    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivateOrder'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3, F@_4, F@_5,
							 F@_6, F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, F@_14, F@_15,
							 F@_16, F@_17, F@_18,
							 F@_19, F@_20, F@_21,
							 F@_22, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivateOrder'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivateOrder'(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, R1, F@_9, F@_10,
						F@_11, F@_12, F@_13, F@_14,
						F@_15, F@_16, F@_17, F@_18,
						F@_19, F@_20, F@_21, R2,
						TrUserData) ->
    #'ProtobufBroker.PrivateOrder'{id = F@_1, time = F@_2,
				   price = F@_3, amount = F@_4, side = F@_5,
				   type = F@_6, fundingType = F@_7,
				   priceParams = lists_reverse(R1, TrUserData),
				   amountParam = F@_9,
				   amountParamString = F@_10,
				   amountFilledString = F@_11, leverage = F@_12,
				   currentStop = F@_13, initialStop = F@_14,
				   currentStopString = F@_15,
				   initialStopString = F@_16, startTime = F@_17,
				   expireTime = F@_18, rate = F@_19,
				   hasClosingOrder = F@_20,
				   closingOrderType = F@_21,
				   closingOrderPriceParams =
				       lists_reverse(R2, TrUserData)}.

'd_field_ProtobufBroker.PrivateOrder_id'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_id'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, F@_17, F@_18, F@_19,
					     F@_20, F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_id'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 F@_17, F@_18, F@_19, F@_20, F@_21,
					 F@_22, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_time'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_time'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_time'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_price'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id(infinity, TrUserData),
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_price'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id('-infinity',
							TrUserData),
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_price'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id(nan, TrUserData), F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_price'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    F@_16, F@_17, F@_18, F@_19, F@_20,
					    F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     id(Value, TrUserData),
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amount'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id(infinity, TrUserData),
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amount'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id('-infinity',
							TrUserData),
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amount'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id(nan, TrUserData), F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amount'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, _, F@_5,
					     F@_6, F@_7, F@_8, F@_9, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     F@_16, F@_17, F@_18, F@_19, F@_20,
					     F@_21, F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     id(Value, TrUserData),
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_side'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_side'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_side'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, NewFValue, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_type'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_type'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_type'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   _, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, F@_19, F@_20, F@_21,
					   F@_22, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, NewFValue,
						     F@_7, F@_8, F@_9, F@_10,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_fundingType'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_fundingType'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_fundingType'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, _, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.FundingType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     NewFValue, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_priceParams'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_priceParams'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      F@_16, F@_17, F@_18,
						      F@_19, F@_20, F@_21,
						      F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_priceParams'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, Prev,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15, F@_16,
						  F@_17, F@_18, F@_19, F@_20,
						  F@_21, F@_22, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     cons(NewFValue, Prev,
							  TrUserData),
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, F@_14, F@_15, F@_16,
						     F@_17, F@_18, F@_19, F@_20,
						     F@_21, F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8,
						     id(infinity, TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8,
						     id('-infinity',
							TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, id(nan, TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParam'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  _, F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8,
						     id(Value, TrUserData),
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amountParamString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_amountParamString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    F@_14, F@_15, F@_16,
							    F@_17, F@_18, F@_19,
							    F@_20, F@_21, F@_22,
							    TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountParamString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, _,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, NewFValue,
						     F@_11, F@_12, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, F@_14, F@_15,
							 F@_16, F@_17, F@_18,
							 F@_19, F@_20, F@_21,
							 F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     F@_16, F@_17,
							     F@_18, F@_19,
							     F@_20, F@_21,
							     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_amountFilledString'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, _, F@_12, F@_13,
							 F@_14, F@_15, F@_16,
							 F@_17, F@_18, F@_19,
							 F@_20, F@_21, F@_22,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     NewFValue, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_leverage'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, F@_16, F@_17,
					       F@_18, F@_19, F@_20, F@_21,
					       F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_leverage'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, F@_16, F@_17, F@_18,
						   F@_19, F@_20, F@_21, F@_22,
						   TrUserData);
'd_field_ProtobufBroker.PrivateOrder_leverage'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, _, F@_13, F@_14,
					       F@_15, F@_16, F@_17, F@_18,
					       F@_19, F@_20, F@_21, F@_22,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     NewFValue, F@_13, F@_14,
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12,
						     id(infinity, TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12,
						     id('-infinity',
							TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, id(nan, TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStop'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12, _,
						  F@_14, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12,
						     id(Value, TrUserData),
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id(infinity, TrUserData),
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id('-infinity',
							TrUserData),
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id(nan, TrUserData), F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStop'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, _, F@_15, F@_16, F@_17,
						  F@_18, F@_19, F@_20, F@_21,
						  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13,
						     id(Value, TrUserData),
						     F@_15, F@_16, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_currentStopString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_currentStopString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    F@_14, F@_15, F@_16,
							    F@_17, F@_18, F@_19,
							    F@_20, F@_21, F@_22,
							    TrUserData);
'd_field_ProtobufBroker.PrivateOrder_currentStopString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, _, F@_16, F@_17,
							F@_18, F@_19, F@_20,
							F@_21, F@_22,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14,
						     NewFValue, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData).

'd_field_ProtobufBroker.PrivateOrder_initialStopString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, F@_16,
							F@_17, F@_18, F@_19,
							F@_20, F@_21, F@_22,
							TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_initialStopString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, F@_12, F@_13,
							    F@_14, F@_15, F@_16,
							    F@_17, F@_18, F@_19,
							    F@_20, F@_21, F@_22,
							    TrUserData);
'd_field_ProtobufBroker.PrivateOrder_initialStopString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15, _, F@_17,
							F@_18, F@_19, F@_20,
							F@_21, F@_22,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     NewFValue, F@_17, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_startTime'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, F@_17,
						F@_18, F@_19, F@_20, F@_21,
						F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_startTime'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, F@_16, F@_17,
						    F@_18, F@_19, F@_20, F@_21,
						    F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_startTime'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, F@_16, _, F@_18,
						F@_19, F@_20, F@_21, F@_22,
						TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, NewFValue, F@_18,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_expireTime'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17,
						 F@_18, F@_19, F@_20, F@_21,
						 F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_expireTime'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, F@_11, F@_12, F@_13,
						     F@_14, F@_15, F@_16, F@_17,
						     F@_18, F@_19, F@_20, F@_21,
						     F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_expireTime'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, F@_16, F@_17, _,
						 F@_19, F@_20, F@_21, F@_22,
						 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, NewFValue,
						     F@_19, F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_rate'(<<0:16, 128,
					     127, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id(infinity, TrUserData),
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_rate'(<<0:16, 128,
					     255, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id('-infinity',
							TrUserData),
						     F@_20, F@_21, F@_22,
						     TrUserData);
'd_field_ProtobufBroker.PrivateOrder_rate'(<<_:16, 1:1,
					     _:7, _:1, 127:7, Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id(nan, TrUserData), F@_20,
						     F@_21, F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_rate'(<<Value:32/little-float,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15, F@_16,
					   F@_17, F@_18, _, F@_20, F@_21, F@_22,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18,
						     id(Value, TrUserData),
						     F@_20, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, F@_20,
						      F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  F@_16, F@_17, F@_18,
							  F@_19, F@_20, F@_21,
							  F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_hasClosingOrder'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, F@_16, F@_17,
						      F@_18, F@_19, _, F@_21,
						      F@_22, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     NewFValue, F@_21, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20,
						       F@_21, F@_22, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11, F@_12,
							   F@_13, F@_14, F@_15,
							   F@_16, F@_17, F@_18,
							   F@_19, F@_20, F@_21,
							   F@_22, TrUserData);
'd_field_ProtobufBroker.PrivateOrder_closingOrderType'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, F@_16, F@_17,
						       F@_18, F@_19, F@_20, _,
						       F@_22, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.PrivateOrder.Type'(begin
							<<Res:32/signed-native>> =
							    <<(X bsl N +
								 Acc):32/unsigned-native>>,
							id(Res, TrUserData)
						      end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, NewFValue, F@_22,
						     TrUserData).

'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15, F@_16,
							      F@_17, F@_18,
							      F@_19, F@_20,
							      F@_21, F@_22,
							      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  F@_5, F@_6,
								  F@_7, F@_8,
								  F@_9, F@_10,
								  F@_11, F@_12,
								  F@_13, F@_14,
								  F@_15, F@_16,
								  F@_17, F@_18,
								  F@_19, F@_20,
								  F@_21, F@_22,
								  TrUserData);
'd_field_ProtobufBroker.PrivateOrder_closingOrderPriceParams'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15, F@_16,
							      F@_17, F@_18,
							      F@_19, F@_20,
							      F@_21, Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.PrivateOrder.PriceParam'(Bs,
										   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21,
						     cons(NewFValue, Prev,
							  TrUserData),
						     TrUserData).

'skip_varint_ProtobufBroker.PrivateOrder'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, TrUserData) ->
    'skip_varint_ProtobufBroker.PrivateOrder'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, F@_14, F@_15,
					      F@_16, F@_17, F@_18, F@_19, F@_20,
					      F@_21, F@_22, TrUserData);
'skip_varint_ProtobufBroker.PrivateOrder'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, F@_14, F@_15, F@_16,
					  F@_17, F@_18, F@_19, F@_20, F@_21,
					  F@_22, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_length_delimited_ProtobufBroker.PrivateOrder'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivateOrder'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13, F@_14,
							F@_15, F@_16, F@_17,
							F@_18, F@_19, F@_20,
							F@_21, F@_22,
							TrUserData);
'skip_length_delimited_ProtobufBroker.PrivateOrder'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    F@_16, F@_17, F@_18, F@_19,
						    F@_20, F@_21, F@_22,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_group_ProtobufBroker.PrivateOrder'(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					 F@_13, F@_14, F@_15, F@_16, F@_17,
					 F@_18, F@_19, F@_20, F@_21, F@_22,
					 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_32_ProtobufBroker.PrivateOrder'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				      F@_18, F@_19, F@_20, F@_21, F@_22,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'skip_64_ProtobufBroker.PrivateOrder'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				      F@_18, F@_19, F@_20, F@_21, F@_22,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateOrder'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10, F@_11,
						     F@_12, F@_13, F@_14, F@_15,
						     F@_16, F@_17, F@_18, F@_19,
						     F@_20, F@_21, F@_22,
						     TrUserData).

'decode_msg_ProtobufBroker.PrivateTrade'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Bin, 0,
						     0, id([], TrUserData),
						     id([], TrUserData),
						     id(0, TrUserData),
						     id(0, TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id(0.0, TrUserData),
						     id([], TrUserData),
						     id(0, TrUserData),
						     id(0, TrUserData),
						     TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<58,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_externalId'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<66,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_orderId'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<16,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_time'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<48,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_timeMillis'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<29,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_price'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<74,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_priceString'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<37,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_amount'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<82,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_amountString'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<40,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_side'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'd_field_ProtobufBroker.PrivateTrade_id'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10,
					     TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(<<>>,
						 0, 0, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, _) ->
    #'ProtobufBroker.PrivateTrade'{externalId = F@_1,
				   orderId = F@_2, time = F@_3,
				   timeMillis = F@_4, price = F@_5,
				   priceString = F@_6, amount = F@_7,
				   amountString = F@_8, side = F@_9,
				   id = F@_10};
'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Other,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivateTrade'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10,
						    TrUserData).

'dg_read_field_def_ProtobufBroker.PrivateTrade'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, TrUserData);
'dg_read_field_def_ProtobufBroker.PrivateTrade'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      58 ->
	  'd_field_ProtobufBroker.PrivateTrade_externalId'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData);
      66 ->
	  'd_field_ProtobufBroker.PrivateTrade_orderId'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivateTrade_time'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, TrUserData);
      48 ->
	  'd_field_ProtobufBroker.PrivateTrade_timeMillis'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10,
							   TrUserData);
      29 ->
	  'd_field_ProtobufBroker.PrivateTrade_price'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, TrUserData);
      74 ->
	  'd_field_ProtobufBroker.PrivateTrade_priceString'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10,
							    TrUserData);
      37 ->
	  'd_field_ProtobufBroker.PrivateTrade_amount'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, TrUserData);
      82 ->
	  'd_field_ProtobufBroker.PrivateTrade_amountString'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10,
							     TrUserData);
      40 ->
	  'd_field_ProtobufBroker.PrivateTrade_side'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, TrUserData);
      8 ->
	  'd_field_ProtobufBroker.PrivateTrade_id'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivateTrade'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivateTrade'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivateTrade'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivateTrade'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3, F@_4, F@_5,
							 F@_6, F@_7, F@_8, F@_9,
							 F@_10, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivateTrade'(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      F@_6, F@_7, F@_8, F@_9,
						      F@_10, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivateTrade'(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, F@_8, F@_9, F@_10,
						_) ->
    #'ProtobufBroker.PrivateTrade'{externalId = F@_1,
				   orderId = F@_2, time = F@_3,
				   timeMillis = F@_4, price = F@_5,
				   priceString = F@_6, amount = F@_7,
				   amountString = F@_8, side = F@_9,
				   id = F@_10}.

'd_field_ProtobufBroker.PrivateTrade_externalId'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_externalId'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_externalId'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_orderId'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_orderId'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  TrUserData);
'd_field_ProtobufBroker.PrivateTrade_orderId'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, F@_4, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_time'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10,
					   TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_time'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_time'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData).

'd_field_ProtobufBroker.PrivateTrade_timeMillis'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_timeMillis'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_timeMillis'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     NewFValue, F@_5, F@_6,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_price'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4,
						     id(infinity, TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_price'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4,
						     id('-infinity',
							TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_price'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, id(nan, TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_price'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4,
						     id(Value, TrUserData),
						     F@_6, F@_7, F@_8, F@_9,
						     F@_10, TrUserData).

'd_field_ProtobufBroker.PrivateTrade_priceString'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_priceString'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_priceString'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, _, F@_7, F@_8,
						  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, NewFValue,
						     F@_7, F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_amount'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id(infinity, TrUserData),
						     F@_8, F@_9, F@_10,
						     TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amount'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id('-infinity',
							TrUserData),
						     F@_8, F@_9, F@_10,
						     TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amount'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id(nan, TrUserData), F@_8,
						     F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amount'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, _, F@_8, F@_9, F@_10,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6,
						     id(Value, TrUserData),
						     F@_8, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_amountString'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_amountString'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_amountString'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, _,
						   F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     NewFValue, F@_9, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_side'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10,
					   TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_side'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_side'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, _, F@_10,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, NewFValue, F@_10,
						     TrUserData).

'd_field_ProtobufBroker.PrivateTrade_id'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10,
					 TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivateTrade_id'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, TrUserData);
'd_field_ProtobufBroker.PrivateTrade_id'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, _,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, NewFValue,
						     TrUserData).

'skip_varint_ProtobufBroker.PrivateTrade'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData) ->
    'skip_varint_ProtobufBroker.PrivateTrade'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      TrUserData);
'skip_varint_ProtobufBroker.PrivateTrade'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_length_delimited_ProtobufBroker.PrivateTrade'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivateTrade'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10,
							TrUserData);
'skip_length_delimited_ProtobufBroker.PrivateTrade'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_group_ProtobufBroker.PrivateTrade'(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_32_ProtobufBroker.PrivateTrade'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'skip_64_ProtobufBroker.PrivateTrade'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivateTrade'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, F@_9, F@_10,
						     TrUserData).

'decode_msg_ProtobufBroker.PrivatePosition'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Bin,
							0, 0,
							id([], TrUserData),
							id(0, TrUserData),
							id(0, TrUserData),
							id(0.0, TrUserData),
							id([], TrUserData),
							id(0.0, TrUserData),
							id(0.0, TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							id([], TrUserData),
							TrUserData).

'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_id'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<16,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_time'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<24,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_side'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<37,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_avgPrice'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<74,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<45,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountOpen'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<53,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountClosed'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<82,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11,
							      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<90,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<58,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<66,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'd_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      TrUserData);
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, R1, R2,
						    TrUserData) ->
    #'ProtobufBroker.PrivatePosition'{id = F@_1,
				      time = F@_2, side = F@_3, avgPrice = F@_4,
				      avgPriceString = F@_5, amountOpen = F@_6,
				      amountClosed = F@_7,
				      amountOpenString = F@_8,
				      amountClosedString = F@_9,
				      orderIds = lists_reverse(R1, TrUserData),
				      tradeIds = lists_reverse(R2, TrUserData)};
'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dg_read_field_def_ProtobufBroker.PrivatePosition'(Other,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       TrUserData).

'dg_read_field_def_ProtobufBroker.PrivatePosition'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       TrUserData);
'dg_read_field_def_ProtobufBroker.PrivatePosition'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.PrivatePosition_id'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
      16 ->
	  'd_field_ProtobufBroker.PrivatePosition_time'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
      24 ->
	  'd_field_ProtobufBroker.PrivatePosition_side'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
      37 ->
	  'd_field_ProtobufBroker.PrivatePosition_avgPrice'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
      74 ->
	  'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  F@_8, F@_9,
								  F@_10, F@_11,
								  TrUserData);
      45 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountOpen'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11,
							      TrUserData);
      53 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountClosed'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								TrUserData);
      82 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    F@_11,
								    TrUserData);
      90 ->
	  'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      F@_9,
								      F@_10,
								      F@_11,
								      TrUserData);
      58 ->
	  'd_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
      66 ->
	  'd_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.PrivatePosition'(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.PrivatePosition'(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10, F@_11,
							 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.PrivatePosition'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       F@_7,
								       F@_8,
								       F@_9,
								       F@_10,
								       F@_11,
								       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.PrivatePosition'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.PrivatePosition'(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 F@_9, F@_10, F@_11,
							 TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.PrivatePosition'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   R1, R2, TrUserData) ->
    #'ProtobufBroker.PrivatePosition'{id = F@_1,
				      time = F@_2, side = F@_3, avgPrice = F@_4,
				      avgPriceString = F@_5, amountOpen = F@_6,
				      amountClosed = F@_7,
				      amountOpenString = F@_8,
				      amountClosedString = F@_9,
				      orderIds = lists_reverse(R1, TrUserData),
				      tradeIds = lists_reverse(R2, TrUserData)}.

'd_field_ProtobufBroker.PrivatePosition_id'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_id'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_id'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, NewFValue, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_time'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_time'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_time'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, NewFValue,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_side'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_side'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_side'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2,
							NewFValue, F@_4, F@_5,
							F@_6, F@_7, F@_8, F@_9,
							F@_10, F@_11,
							TrUserData).

'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<0:16,
						    128, 127, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id(infinity,
							   TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<0:16,
						    128, 255, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id('-infinity',
							   TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<_:16,
						    1:1, _:7, _:1, 127:7,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id(nan, TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPrice'(<<Value:32/little-float,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3, _,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3,
							id(Value, TrUserData),
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData).

'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    F@_8, F@_9, F@_10,
							    F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_avgPriceString'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, _, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, NewFValue, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<0:16,
						      128, 127, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id(infinity,
							   TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<0:16,
						      128, 255, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id('-infinity',
							   TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<_:16,
						      1:1, _:7, _:1, 127:7,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id(nan, TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpen'(<<Value:32/little-float,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, _, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							id(Value, TrUserData),
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<0:16,
							128, 127, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id(infinity,
							   TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<0:16,
							128, 255, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id('-infinity',
							   TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<_:16,
							1:1, _:7, _:1, 127:7,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id(nan, TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosed'(<<Value:32/little-float,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, _, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							id(Value, TrUserData),
							F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, F@_8, F@_9,
							      F@_10, F@_11,
							      TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountOpenString'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, _, F@_9,
							  F@_10, F@_11,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							NewFValue, F@_9, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								F@_5, F@_6,
								F@_7, F@_8,
								F@_9, F@_10,
								F@_11,
								TrUserData);
'd_field_ProtobufBroker.PrivatePosition_amountClosedString'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8, _,
							    F@_10, F@_11,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, NewFValue, F@_10,
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_orderIds'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_orderIds'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
'd_field_ProtobufBroker.PrivatePosition_orderIds'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, Prev, F@_11,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9,
							cons(NewFValue, Prev,
							     TrUserData),
							F@_11, TrUserData).

'd_field_ProtobufBroker.PrivatePosition_tradeIds'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.PrivatePosition_tradeIds'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
'd_field_ProtobufBroker.PrivatePosition_tradeIds'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, Prev,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(RestF,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							cons(NewFValue, Prev,
							     TrUserData),
							TrUserData).

'skip_varint_ProtobufBroker.PrivatePosition'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData) ->
    'skip_varint_ProtobufBroker.PrivatePosition'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, TrUserData);
'skip_varint_ProtobufBroker.PrivatePosition'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_length_delimited_ProtobufBroker.PrivatePosition'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.PrivatePosition'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11,
							   TrUserData);
'skip_length_delimited_ProtobufBroker.PrivatePosition'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest2,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_group_ProtobufBroker.PrivatePosition'(Bin, FNum,
					    Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							0, Z2, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_32_ProtobufBroker.PrivatePosition'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'skip_64_ProtobufBroker.PrivatePosition'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.PrivatePosition'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, TrUserData).

'decode_msg_ProtobufBroker.Balance'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Bin, 0, 0,
						id([], TrUserData),
						id(0.0, TrUserData),
						id([], TrUserData), TrUserData).

'dfp_read_field_def_ProtobufBroker.Balance'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufBroker.Balance_currency'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balance'(<<21,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufBroker.Balance_amount'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balance'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufBroker.Balance_amountString'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'dfp_read_field_def_ProtobufBroker.Balance'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'ProtobufBroker.Balance'{currency = F@_1,
			      amount = F@_2, amountString = F@_3};
'dfp_read_field_def_ProtobufBroker.Balance'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.Balance'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_ProtobufBroker.Balance'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.Balance'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_ProtobufBroker.Balance'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufBroker.Balance_currency'(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      21 ->
	  'd_field_ProtobufBroker.Balance_amount'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      26 ->
	  'd_field_ProtobufBroker.Balance_amountString'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.Balance'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.Balance'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.Balance'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.Balance'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.Balance'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.Balance'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'ProtobufBroker.Balance'{currency = F@_1,
			      amount = F@_2, amountString = F@_3}.

'd_field_ProtobufBroker.Balance_currency'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balance_currency'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
'd_field_ProtobufBroker.Balance_currency'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.Balance'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_ProtobufBroker.Balance_amount'(<<0:16, 128,
					  127, Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1,
						id(infinity, TrUserData), F@_3,
						TrUserData);
'd_field_ProtobufBroker.Balance_amount'(<<0:16, 128,
					  255, Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1,
						id('-infinity', TrUserData),
						F@_3, TrUserData);
'd_field_ProtobufBroker.Balance_amount'(<<_:16, 1:1,
					  _:7, _:1, 127:7, Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, id(nan, TrUserData),
						F@_3, TrUserData);
'd_field_ProtobufBroker.Balance_amount'(<<Value:32/little-float,
					  Rest/binary>>,
					Z1, Z2, F@_1, _, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, id(Value, TrUserData),
						F@_3, TrUserData).

'd_field_ProtobufBroker.Balance_amountString'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balance_amountString'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'd_field_ProtobufBroker.Balance_amountString'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, _,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.Balance'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_ProtobufBroker.Balance'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_ProtobufBroker.Balance'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_ProtobufBroker.Balance'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_ProtobufBroker.Balance'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.Balance'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_ProtobufBroker.Balance'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_ProtobufBroker.Balance'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_ProtobufBroker.Balance'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_ProtobufBroker.Balance'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balance'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'decode_msg_ProtobufBroker.Balances'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Bin, 0, 0,
						 id('Spot', TrUserData),
						 id([], TrUserData),
						 TrUserData).

'dfp_read_field_def_ProtobufBroker.Balances'(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_ProtobufBroker.Balances_fundingType'(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balances'(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_ProtobufBroker.Balances_balances'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
'dfp_read_field_def_ProtobufBroker.Balances'(<<>>, 0, 0,
					     F@_1, R1, TrUserData) ->
    #'ProtobufBroker.Balances'{fundingType = F@_1,
			       balances = lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufBroker.Balances'(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_ProtobufBroker.Balances'(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_ProtobufBroker.Balances'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufBroker.Balances'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'dg_read_field_def_ProtobufBroker.Balances'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufBroker.Balances_fundingType'(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      18 ->
	  'd_field_ProtobufBroker.Balances_balances'(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufBroker.Balances'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		'skip_64_ProtobufBroker.Balances'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufBroker.Balances'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		'skip_group_ProtobufBroker.Balances'(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_ProtobufBroker.Balances'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufBroker.Balances'(<<>>, 0, 0,
					    F@_1, R1, TrUserData) ->
    #'ProtobufBroker.Balances'{fundingType = F@_1,
			       balances = lists_reverse(R1, TrUserData)}.

'd_field_ProtobufBroker.Balances_fundingType'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balances_fundingType'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
'd_field_ProtobufBroker.Balances_fundingType'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufBroker.FundingType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufBroker.Balances'(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

'd_field_ProtobufBroker.Balances_balances'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufBroker.Balances_balances'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'd_field_ProtobufBroker.Balances_balances'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufBroker.Balance'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufBroker.Balances'(RestF, 0,
						 0, F@_1,
						 cons(NewFValue, Prev,
						      TrUserData),
						 TrUserData).

'skip_varint_ProtobufBroker.Balances'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_ProtobufBroker.Balances'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
'skip_varint_ProtobufBroker.Balances'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_ProtobufBroker.Balances'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufBroker.Balances'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'skip_length_delimited_ProtobufBroker.Balances'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

'skip_group_ProtobufBroker.Balances'(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

'skip_32_ProtobufBroker.Balances'(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_64_ProtobufBroker.Balances'(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufBroker.Balances'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'decode_msg_ProtobufStream.StreamMessage'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufStream.StreamMessage'(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufStream.StreamMessage'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_authenticationResult'(Rest,
								Z1, Z2, F@_1,
								TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<42,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_subscriptionResult'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<50,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_unsubscriptionResult'(Rest,
								Z1, Z2, F@_1,
								TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<58,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_missedMessages'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_marketUpdate'(Rest,
							Z1, Z2, F@_1,
							TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<26,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_pairUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<34,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_assetUpdate'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<66,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.StreamMessage_indexUpdate'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
'dfp_read_field_def_ProtobufStream.StreamMessage'(<<>>,
						  0, 0, F@_1, _) ->
    #'ProtobufStream.StreamMessage'{body = F@_1};
'dfp_read_field_def_ProtobufStream.StreamMessage'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufStream.StreamMessage'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufStream.StreamMessage'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.StreamMessage'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_ProtobufStream.StreamMessage'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufStream.StreamMessage_authenticationResult'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
      42 ->
	  'd_field_ProtobufStream.StreamMessage_subscriptionResult'(Rest,
								    0, 0, F@_1,
								    TrUserData);
      50 ->
	  'd_field_ProtobufStream.StreamMessage_unsubscriptionResult'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
      58 ->
	  'd_field_ProtobufStream.StreamMessage_missedMessages'(Rest,
								0, 0, F@_1,
								TrUserData);
      18 ->
	  'd_field_ProtobufStream.StreamMessage_marketUpdate'(Rest,
							      0, 0, F@_1,
							      TrUserData);
      26 ->
	  'd_field_ProtobufStream.StreamMessage_pairUpdate'(Rest,
							    0, 0, F@_1,
							    TrUserData);
      34 ->
	  'd_field_ProtobufStream.StreamMessage_assetUpdate'(Rest,
							     0, 0, F@_1,
							     TrUserData);
      66 ->
	  'd_field_ProtobufStream.StreamMessage_indexUpdate'(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.StreamMessage'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufStream.StreamMessage'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.StreamMessage'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufStream.StreamMessage'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufStream.StreamMessage'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.StreamMessage'(<<>>,
						 0, 0, F@_1, _) ->
    #'ProtobufStream.StreamMessage'{body = F@_1}.

'd_field_ProtobufStream.StreamMessage_authenticationResult'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_authenticationResult'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'd_field_ProtobufStream.StreamMessage_authenticationResult'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.AuthenticationResult'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({authenticationResult,
								NewFValue},
							       TrUserData);
							{authenticationResult,
							 MVPrev} ->
							    id({authenticationResult,
								'merge_msg_ProtobufStream.AuthenticationResult'(MVPrev,
														NewFValue,
														TrUserData)},
							       TrUserData);
							_ ->
							    id({authenticationResult,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_subscriptionResult'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_subscriptionResult'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, TrUserData);
'd_field_ProtobufStream.StreamMessage_subscriptionResult'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.SubscriptionResult'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({subscriptionResult,
								NewFValue},
							       TrUserData);
							{subscriptionResult,
							 MVPrev} ->
							    id({subscriptionResult,
								'merge_msg_ProtobufStream.SubscriptionResult'(MVPrev,
													      NewFValue,
													      TrUserData)},
							       TrUserData);
							_ ->
							    id({subscriptionResult,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_unsubscriptionResult'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_unsubscriptionResult'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'd_field_ProtobufStream.StreamMessage_unsubscriptionResult'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.UnsubscriptionResult'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({unsubscriptionResult,
								NewFValue},
							       TrUserData);
							{unsubscriptionResult,
							 MVPrev} ->
							    id({unsubscriptionResult,
								'merge_msg_ProtobufStream.UnsubscriptionResult'(MVPrev,
														NewFValue,
														TrUserData)},
							       TrUserData);
							_ ->
							    id({unsubscriptionResult,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_missedMessages'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_missedMessages'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'd_field_ProtobufStream.StreamMessage_missedMessages'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, Prev,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.MissedMessages'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({missedMessages,
								NewFValue},
							       TrUserData);
							{missedMessages,
							 MVPrev} ->
							    id({missedMessages,
								'merge_msg_ProtobufStream.MissedMessages'(MVPrev,
													  NewFValue,
													  TrUserData)},
							       TrUserData);
							_ ->
							    id({missedMessages,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_marketUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_marketUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'd_field_ProtobufStream.StreamMessage_marketUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.MarketUpdateMessage'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({marketUpdate,
								NewFValue},
							       TrUserData);
							{marketUpdate,
							 MVPrev} ->
							    id({marketUpdate,
								'merge_msg_ProtobufMarkets.MarketUpdateMessage'(MVPrev,
														NewFValue,
														TrUserData)},
							       TrUserData);
							_ ->
							    id({marketUpdate,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_pairUpdate'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_pairUpdate'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
'd_field_ProtobufStream.StreamMessage_pairUpdate'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairUpdateMessage'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({pairUpdate,
								NewFValue},
							       TrUserData);
							{pairUpdate, MVPrev} ->
							    id({pairUpdate,
								'merge_msg_ProtobufMarkets.PairUpdateMessage'(MVPrev,
													      NewFValue,
													      TrUserData)},
							       TrUserData);
							_ ->
							    id({pairUpdate,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_assetUpdate'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_assetUpdate'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
'd_field_ProtobufStream.StreamMessage_assetUpdate'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.AssetUpdateMessage'(Bs,
									       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({assetUpdate,
								NewFValue},
							       TrUserData);
							{assetUpdate, MVPrev} ->
							    id({assetUpdate,
								'merge_msg_ProtobufMarkets.AssetUpdateMessage'(MVPrev,
													       NewFValue,
													       TrUserData)},
							       TrUserData);
							_ ->
							    id({assetUpdate,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufStream.StreamMessage_indexUpdate'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.StreamMessage_indexUpdate'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
'd_field_ProtobufStream.StreamMessage_indexUpdate'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.IndexUpdateMessage'(Bs,
									       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({indexUpdate,
								NewFValue},
							       TrUserData);
							{indexUpdate, MVPrev} ->
							    id({indexUpdate,
								'merge_msg_ProtobufMarkets.IndexUpdateMessage'(MVPrev,
													       NewFValue,
													       TrUserData)},
							       TrUserData);
							_ ->
							    id({indexUpdate,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'skip_varint_ProtobufStream.StreamMessage'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufStream.StreamMessage'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_ProtobufStream.StreamMessage'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.StreamMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufStream.StreamMessage'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.StreamMessage'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_ProtobufStream.StreamMessage'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.StreamMessage'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_ProtobufStream.StreamMessage'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.StreamMessage'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_ProtobufStream.StreamMessage'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.StreamMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufStream.StreamMessage'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.StreamMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufStream.AuthenticationResult'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Bin,
							     0, 0,
							     id('UNKNOWN',
								TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufStream.AuthenticationResult'(<<8,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'd_field_ProtobufStream.AuthenticationResult_status'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData);
'dfp_read_field_def_ProtobufStream.AuthenticationResult'(<<>>,
							 0, 0, F@_1, _) ->
    #'ProtobufStream.AuthenticationResult'{status = F@_1};
'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Other,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'dg_read_field_def_ProtobufStream.AuthenticationResult'(Other,
							    Z1, Z2, F@_1,
							    TrUserData).

'dg_read_field_def_ProtobufStream.AuthenticationResult'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.AuthenticationResult'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    TrUserData);
'dg_read_field_def_ProtobufStream.AuthenticationResult'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufStream.AuthenticationResult_status'(Rest,
							       0, 0, F@_1,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.AuthenticationResult'(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufStream.AuthenticationResult'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.AuthenticationResult'(Rest,
									    0,
									    0,
									    F@_1,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufStream.AuthenticationResult'(Rest,
								 Key bsr 3, 0,
								 F@_1,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufStream.AuthenticationResult'(Rest, 0,
							      0, F@_1,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.AuthenticationResult'(<<>>,
							0, 0, F@_1, _) ->
    #'ProtobufStream.AuthenticationResult'{status = F@_1}.

'd_field_ProtobufStream.AuthenticationResult_status'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.AuthenticationResult_status'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'd_field_ProtobufStream.AuthenticationResult_status'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufStream.AuthenticationResult.Status'(begin
								  <<Res:32/signed-native>> =
								      <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
								  id(Res,
								     TrUserData)
								end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(RestF,
							     0, 0, NewFValue,
							     TrUserData).

'skip_varint_ProtobufStream.AuthenticationResult'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufStream.AuthenticationResult'(Rest,
						      Z1, Z2, F@_1, TrUserData);
'skip_varint_ProtobufStream.AuthenticationResult'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_length_delimited_ProtobufStream.AuthenticationResult'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.AuthenticationResult'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'skip_length_delimited_ProtobufStream.AuthenticationResult'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Rest2,
							     0, 0, F@_1,
							     TrUserData).

'skip_group_ProtobufStream.AuthenticationResult'(Bin,
						 FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Rest,
							     0, Z2, F@_1,
							     TrUserData).

'skip_32_ProtobufStream.AuthenticationResult'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_64_ProtobufStream.AuthenticationResult'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.AuthenticationResult'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'decode_msg_ProtobufStream.SubscriptionResult'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Bin,
							   0, 0,
							   id([], TrUserData),
							   id([], TrUserData),
							   id(undefined,
							      TrUserData),
							   id([], TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufStream.SubscriptionResult'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData) ->
    'd_field_ProtobufStream.SubscriptionResult_subscribed'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData);
'dfp_read_field_def_ProtobufStream.SubscriptionResult'(<<18,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData) ->
    'd_field_ProtobufStream.SubscriptionResult_failed'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
'dfp_read_field_def_ProtobufStream.SubscriptionResult'(<<26,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData) ->
    'd_field_ProtobufStream.SubscriptionResult_status'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
'dfp_read_field_def_ProtobufStream.SubscriptionResult'(<<34,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData) ->
    'd_field_ProtobufStream.SubscriptionResult_subscriptions'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'dfp_read_field_def_ProtobufStream.SubscriptionResult'(<<>>,
						       0, 0, R1, R2, F@_3, R3,
						       TrUserData) ->
    #'ProtobufStream.SubscriptionResult'{subscribed =
					     lists_reverse(R1, TrUserData),
					 failed = lists_reverse(R2, TrUserData),
					 status = F@_3,
					 subscriptions =
					     lists_reverse(R3, TrUserData)};
'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Other,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData) ->
    'dg_read_field_def_ProtobufStream.SubscriptionResult'(Other,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData).

'dg_read_field_def_ProtobufStream.SubscriptionResult'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.SubscriptionResult'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
'dg_read_field_def_ProtobufStream.SubscriptionResult'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufStream.SubscriptionResult_subscribed'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
      18 ->
	  'd_field_ProtobufStream.SubscriptionResult_failed'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
      26 ->
	  'd_field_ProtobufStream.SubscriptionResult_status'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
      34 ->
	  'd_field_ProtobufStream.SubscriptionResult_subscriptions'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.SubscriptionResult'(Rest, 0,
								0, F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
	    1 ->
		'skip_64_ProtobufStream.SubscriptionResult'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.SubscriptionResult'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufStream.SubscriptionResult'(Rest,
							       Key bsr 3, 0,
							       F@_1, F@_2, F@_3,
							       F@_4,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufStream.SubscriptionResult'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.SubscriptionResult'(<<>>,
						      0, 0, R1, R2, F@_3, R3,
						      TrUserData) ->
    #'ProtobufStream.SubscriptionResult'{subscribed =
					     lists_reverse(R1, TrUserData),
					 failed = lists_reverse(R2, TrUserData),
					 status = F@_3,
					 subscriptions =
					     lists_reverse(R3, TrUserData)}.

'd_field_ProtobufStream.SubscriptionResult_subscribed'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscriptionResult_subscribed'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
'd_field_ProtobufStream.SubscriptionResult_subscribed'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, Prev, F@_2, F@_3,
						       F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(RestF,
							   0, 0,
							   cons(NewFValue, Prev,
								TrUserData),
							   F@_2, F@_3, F@_4,
							   TrUserData).

'd_field_ProtobufStream.SubscriptionResult_failed'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscriptionResult_failed'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
'd_field_ProtobufStream.SubscriptionResult_failed'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, Prev, F@_3,
						   F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.SubscribeError'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(RestF,
							   0, 0, F@_1,
							   cons(NewFValue, Prev,
								TrUserData),
							   F@_3, F@_4,
							   TrUserData).

'd_field_ProtobufStream.SubscriptionResult_status'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscriptionResult_status'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
'd_field_ProtobufStream.SubscriptionResult_status'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, Prev,
						   F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.SubscriptionStatus'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(RestF,
							   0, 0, F@_1, F@_2,
							   if Prev ==
								undefined ->
								  NewFValue;
							      true ->
								  'merge_msg_ProtobufStream.SubscriptionStatus'(Prev,
														NewFValue,
														TrUserData)
							   end,
							   F@_4, TrUserData).

'd_field_ProtobufStream.SubscriptionResult_subscriptions'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscriptionResult_subscriptions'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, TrUserData);
'd_field_ProtobufStream.SubscriptionResult_subscriptions'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(RestF,
							   0, 0, F@_1, F@_2,
							   F@_3,
							   cons(NewFValue, Prev,
								TrUserData),
							   TrUserData).

'skip_varint_ProtobufStream.SubscriptionResult'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData) ->
    'skip_varint_ProtobufStream.SubscriptionResult'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, TrUserData);
'skip_varint_ProtobufStream.SubscriptionResult'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData).

'skip_length_delimited_ProtobufStream.SubscriptionResult'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.SubscriptionResult'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, TrUserData);
'skip_length_delimited_ProtobufStream.SubscriptionResult'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Rest2,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData).

'skip_group_ProtobufStream.SubscriptionResult'(Bin,
					       FNum, Z2, F@_1, F@_2, F@_3, F@_4,
					       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Rest,
							   0, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData).

'skip_32_ProtobufStream.SubscriptionResult'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData).

'skip_64_ProtobufStream.SubscriptionResult'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionResult'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData).

'decode_msg_ProtobufStream.UnsubscriptionResult'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Bin,
							     0, 0,
							     id([], TrUserData),
							     id([], TrUserData),
							     id(undefined,
								TrUserData),
							     id([], TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufStream.UnsubscriptionResult_failed'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(<<26,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufStream.UnsubscriptionResult_status'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(<<34,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufStream.UnsubscriptionResult_subscriptions'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(<<>>,
							 0, 0, R1, R2, F@_3, R3,
							 TrUserData) ->
    #'ProtobufStream.UnsubscriptionResult'{unsubscribed =
					       lists_reverse(R1, TrUserData),
					   failed =
					       lists_reverse(R2, TrUserData),
					   status = F@_3,
					   subscriptions =
					       lists_reverse(R3, TrUserData)};
'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Other,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'dg_read_field_def_ProtobufStream.UnsubscriptionResult'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'dg_read_field_def_ProtobufStream.UnsubscriptionResult'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.UnsubscriptionResult'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    TrUserData);
'dg_read_field_def_ProtobufStream.UnsubscriptionResult'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData);
      18 ->
	  'd_field_ProtobufStream.UnsubscriptionResult_failed'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      26 ->
	  'd_field_ProtobufStream.UnsubscriptionResult_status'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      34 ->
	  'd_field_ProtobufStream.UnsubscriptionResult_subscriptions'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.UnsubscriptionResult'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufStream.UnsubscriptionResult'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.UnsubscriptionResult'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufStream.UnsubscriptionResult'(Rest,
								 Key bsr 3, 0,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufStream.UnsubscriptionResult'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.UnsubscriptionResult'(<<>>,
							0, 0, R1, R2, F@_3, R3,
							TrUserData) ->
    #'ProtobufStream.UnsubscriptionResult'{unsubscribed =
					       lists_reverse(R1, TrUserData),
					   failed =
					       lists_reverse(R2, TrUserData),
					   status = F@_3,
					   subscriptions =
					       lists_reverse(R3, TrUserData)}.

'd_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2, F@_3,
							       F@_4,
							       TrUserData);
'd_field_ProtobufStream.UnsubscriptionResult_unsubscribed'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, Prev, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(RestF,
							     0, 0,
							     cons(NewFValue,
								  Prev,
								  TrUserData),
							     F@_2, F@_3, F@_4,
							     TrUserData).

'd_field_ProtobufStream.UnsubscriptionResult_failed'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscriptionResult_failed'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufStream.UnsubscriptionResult_failed'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, Prev, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.UnsubscribeError'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(RestF,
							     0, 0, F@_1,
							     cons(NewFValue,
								  Prev,
								  TrUserData),
							     F@_3, F@_4,
							     TrUserData).

'd_field_ProtobufStream.UnsubscriptionResult_status'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscriptionResult_status'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufStream.UnsubscriptionResult_status'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, Prev,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufStream.SubscriptionStatus'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(RestF,
							     0, 0, F@_1, F@_2,
							     if Prev ==
								  undefined ->
								    NewFValue;
								true ->
								    'merge_msg_ProtobufStream.SubscriptionStatus'(Prev,
														  NewFValue,
														  TrUserData)
							     end,
							     F@_4, TrUserData).

'd_field_ProtobufStream.UnsubscriptionResult_subscriptions'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscriptionResult_subscriptions'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'd_field_ProtobufStream.UnsubscriptionResult_subscriptions'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(RestF,
							     0, 0, F@_1, F@_2,
							     F@_3,
							     cons(NewFValue,
								  Prev,
								  TrUserData),
							     TrUserData).

'skip_varint_ProtobufStream.UnsubscriptionResult'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'skip_varint_ProtobufStream.UnsubscriptionResult'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData);
'skip_varint_ProtobufStream.UnsubscriptionResult'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_length_delimited_ProtobufStream.UnsubscriptionResult'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.UnsubscriptionResult'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'skip_length_delimited_ProtobufStream.UnsubscriptionResult'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Rest2,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_group_ProtobufStream.UnsubscriptionResult'(Bin,
						 FNum, Z2, F@_1, F@_2, F@_3,
						 F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Rest,
							     0, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_32_ProtobufStream.UnsubscriptionResult'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_64_ProtobufStream.UnsubscriptionResult'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscriptionResult'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'decode_msg_ProtobufStream.SubscribeError'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscribeError'(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       id(undefined,
							  TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufStream.SubscribeError'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'd_field_ProtobufStream.SubscribeError_key'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
'dfp_read_field_def_ProtobufStream.SubscribeError'(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'd_field_ProtobufStream.SubscribeError_error'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'dfp_read_field_def_ProtobufStream.SubscribeError'(<<26,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'd_field_ProtobufStream.SubscribeError_subscription'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData);
'dfp_read_field_def_ProtobufStream.SubscribeError'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, _) ->
    #'ProtobufStream.SubscribeError'{key = F@_1,
				     error = F@_2, subscription = F@_3};
'dfp_read_field_def_ProtobufStream.SubscribeError'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    'dg_read_field_def_ProtobufStream.SubscribeError'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

'dg_read_field_def_ProtobufStream.SubscribeError'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.SubscribeError'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
'dg_read_field_def_ProtobufStream.SubscribeError'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufStream.SubscribeError_key'(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      18 ->
	  'd_field_ProtobufStream.SubscribeError_error'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      26 ->
	  'd_field_ProtobufStream.SubscribeError_subscription'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.SubscribeError'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    1 ->
		'skip_64_ProtobufStream.SubscribeError'(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.SubscribeError'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufStream.SubscribeError'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3,
							   TrUserData);
	    5 ->
		'skip_32_ProtobufStream.SubscribeError'(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.SubscribeError'(<<>>,
						  0, 0, F@_1, F@_2, F@_3, _) ->
    #'ProtobufStream.SubscribeError'{key = F@_1,
				     error = F@_2, subscription = F@_3}.

'd_field_ProtobufStream.SubscribeError_key'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscribeError_key'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
'd_field_ProtobufStream.SubscribeError_key'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, F@_3,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscribeError'(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, TrUserData).

'd_field_ProtobufStream.SubscribeError_error'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscribeError_error'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'd_field_ProtobufStream.SubscribeError_error'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscribeError'(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, TrUserData).

'd_field_ProtobufStream.SubscribeError_subscription'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscribeError_subscription'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
'd_field_ProtobufStream.SubscribeError_subscription'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, Prev,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscribeError'(RestF,
						       0, 0, F@_1, F@_2,
						       if Prev == undefined ->
							      NewFValue;
							  true ->
							      'merge_msg_ProtobufClient.ClientSubscription'(Prev,
													    NewFValue,
													    TrUserData)
						       end,
						       TrUserData).

'skip_varint_ProtobufStream.SubscribeError'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'skip_varint_ProtobufStream.SubscribeError'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
'skip_varint_ProtobufStream.SubscribeError'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscribeError'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_length_delimited_ProtobufStream.SubscribeError'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.SubscribeError'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  TrUserData);
'skip_length_delimited_ProtobufStream.SubscribeError'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.SubscribeError'(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_group_ProtobufStream.SubscribeError'(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.SubscribeError'(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_32_ProtobufStream.SubscribeError'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscribeError'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'skip_64_ProtobufStream.SubscribeError'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscribeError'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData).

'decode_msg_ProtobufStream.UnsubscribeError'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Bin,
							 0, 0,
							 id([], TrUserData),
							 id([], TrUserData),
							 id(undefined,
							    TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufStream.UnsubscribeError'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufStream.UnsubscribeError_key'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscribeError'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufStream.UnsubscribeError_error'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscribeError'(<<26,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufStream.UnsubscribeError_subscription'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData);
'dfp_read_field_def_ProtobufStream.UnsubscribeError'(<<>>,
						     0, 0, F@_1, F@_2, F@_3,
						     _) ->
    #'ProtobufStream.UnsubscribeError'{key = F@_1,
				       error = F@_2, subscription = F@_3};
'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dg_read_field_def_ProtobufStream.UnsubscribeError'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

'dg_read_field_def_ProtobufStream.UnsubscribeError'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.UnsubscribeError'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'dg_read_field_def_ProtobufStream.UnsubscribeError'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufStream.UnsubscribeError_key'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      18 ->
	  'd_field_ProtobufStream.UnsubscribeError_error'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  TrUserData);
      26 ->
	  'd_field_ProtobufStream.UnsubscribeError_subscription'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.UnsubscribeError'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufStream.UnsubscribeError'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.UnsubscribeError'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
	    3 ->
		'skip_group_ProtobufStream.UnsubscribeError'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3,
							     TrUserData);
	    5 ->
		'skip_32_ProtobufStream.UnsubscribeError'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.UnsubscribeError'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    _) ->
    #'ProtobufStream.UnsubscribeError'{key = F@_1,
				       error = F@_2, subscription = F@_3}.

'd_field_ProtobufStream.UnsubscribeError_key'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscribeError_key'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
'd_field_ProtobufStream.UnsubscribeError_key'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, TrUserData).

'd_field_ProtobufStream.UnsubscribeError_error'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscribeError_error'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, TrUserData);
'd_field_ProtobufStream.UnsubscribeError_error'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(RestF,
							 0, 0, F@_1, NewFValue,
							 F@_3, TrUserData).

'd_field_ProtobufStream.UnsubscribeError_subscription'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.UnsubscribeError_subscription'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   TrUserData);
'd_field_ProtobufStream.UnsubscribeError_subscription'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, Prev,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(RestF,
							 0, 0, F@_1, F@_2,
							 if Prev == undefined ->
								NewFValue;
							    true ->
								'merge_msg_ProtobufClient.ClientSubscription'(Prev,
													      NewFValue,
													      TrUserData)
							 end,
							 TrUserData).

'skip_varint_ProtobufStream.UnsubscribeError'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'skip_varint_ProtobufStream.UnsubscribeError'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'skip_varint_ProtobufStream.UnsubscribeError'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_length_delimited_ProtobufStream.UnsubscribeError'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.UnsubscribeError'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
'skip_length_delimited_ProtobufStream.UnsubscribeError'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 TrUserData).

'skip_group_ProtobufStream.UnsubscribeError'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_32_ProtobufStream.UnsubscribeError'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_64_ProtobufStream.UnsubscribeError'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufStream.UnsubscribeError'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'decode_msg_ProtobufStream.SubscriptionStatus'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Bin,
							   0, 0,
							   id([], TrUserData),
							   id([], TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufStream.SubscriptionStatus_keys'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(<<18,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufStream.SubscriptionStatus_subscriptions'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(<<>>,
						       0, 0, R1, R2,
						       TrUserData) ->
    #'ProtobufStream.SubscriptionStatus'{keys =
					     lists_reverse(R1, TrUserData),
					 subscriptions =
					     lists_reverse(R2, TrUserData)};
'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dg_read_field_def_ProtobufStream.SubscriptionStatus'(Other,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'dg_read_field_def_ProtobufStream.SubscriptionStatus'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.SubscriptionStatus'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'dg_read_field_def_ProtobufStream.SubscriptionStatus'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufStream.SubscriptionStatus_keys'(Rest,
							   0, 0, F@_1, F@_2,
							   TrUserData);
      18 ->
	  'd_field_ProtobufStream.SubscriptionStatus_subscriptions'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.SubscriptionStatus'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    1 ->
		'skip_64_ProtobufStream.SubscriptionStatus'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.SubscriptionStatus'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufStream.SubscriptionStatus'(Rest,
							       Key bsr 3, 0,
							       F@_1, F@_2,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufStream.SubscriptionStatus'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.SubscriptionStatus'(<<>>,
						      0, 0, R1, R2,
						      TrUserData) ->
    #'ProtobufStream.SubscriptionStatus'{keys =
					     lists_reverse(R1, TrUserData),
					 subscriptions =
					     lists_reverse(R2, TrUserData)}.

'd_field_ProtobufStream.SubscriptionStatus_keys'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscriptionStatus_keys'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'd_field_ProtobufStream.SubscriptionStatus_keys'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, Prev, F@_2,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(RestF,
							   0, 0,
							   cons(NewFValue, Prev,
								TrUserData),
							   F@_2, TrUserData).

'd_field_ProtobufStream.SubscriptionStatus_subscriptions'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.SubscriptionStatus_subscriptions'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_ProtobufStream.SubscriptionStatus_subscriptions'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(RestF,
							   0, 0, F@_1,
							   cons(NewFValue, Prev,
								TrUserData),
							   TrUserData).

'skip_varint_ProtobufStream.SubscriptionStatus'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'skip_varint_ProtobufStream.SubscriptionStatus'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'skip_varint_ProtobufStream.SubscriptionStatus'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'skip_length_delimited_ProtobufStream.SubscriptionStatus'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.SubscriptionStatus'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'skip_length_delimited_ProtobufStream.SubscriptionStatus'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Rest2,
							   0, 0, F@_1, F@_2,
							   TrUserData).

'skip_group_ProtobufStream.SubscriptionStatus'(Bin,
					       FNum, Z2, F@_1, F@_2,
					       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Rest,
							   0, Z2, F@_1, F@_2,
							   TrUserData).

'skip_32_ProtobufStream.SubscriptionStatus'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'skip_64_ProtobufStream.SubscriptionStatus'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.SubscriptionStatus'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'decode_msg_ProtobufStream.MissedMessages'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufStream.MissedMessages'(Bin,
						       0, 0, id(0, TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufStream.MissedMessages'(<<8,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufStream.MissedMessages_numMissedMessages'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData);
'dfp_read_field_def_ProtobufStream.MissedMessages'(<<>>,
						   0, 0, F@_1, _) ->
    #'ProtobufStream.MissedMessages'{numMissedMessages =
					 F@_1};
'dfp_read_field_def_ProtobufStream.MissedMessages'(Other,
						   Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufStream.MissedMessages'(Other,
						      Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufStream.MissedMessages'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufStream.MissedMessages'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
'dg_read_field_def_ProtobufStream.MissedMessages'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufStream.MissedMessages_numMissedMessages'(Rest,
								    0, 0, F@_1,
								    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufStream.MissedMessages'(Rest, 0, 0,
							    F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufStream.MissedMessages'(Rest, 0, 0,
							F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufStream.MissedMessages'(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufStream.MissedMessages'(Rest,
							   Key bsr 3, 0, F@_1,
							   TrUserData);
	    5 ->
		'skip_32_ProtobufStream.MissedMessages'(Rest, 0, 0,
							F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufStream.MissedMessages'(<<>>,
						  0, 0, F@_1, _) ->
    #'ProtobufStream.MissedMessages'{numMissedMessages =
					 F@_1}.

'd_field_ProtobufStream.MissedMessages_numMissedMessages'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufStream.MissedMessages_numMissedMessages'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, TrUserData);
'd_field_ProtobufStream.MissedMessages_numMissedMessages'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, _,
							  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufStream.MissedMessages'(RestF,
						       0, 0, NewFValue,
						       TrUserData).

'skip_varint_ProtobufStream.MissedMessages'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufStream.MissedMessages'(Rest, Z1,
						Z2, F@_1, TrUserData);
'skip_varint_ProtobufStream.MissedMessages'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.MissedMessages'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'skip_length_delimited_ProtobufStream.MissedMessages'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufStream.MissedMessages'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'skip_length_delimited_ProtobufStream.MissedMessages'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufStream.MissedMessages'(Rest2,
						       0, 0, F@_1, TrUserData).

'skip_group_ProtobufStream.MissedMessages'(Bin, FNum,
					   Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufStream.MissedMessages'(Rest,
						       0, Z2, F@_1, TrUserData).

'skip_32_ProtobufStream.MissedMessages'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.MissedMessages'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'skip_64_ProtobufStream.MissedMessages'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufStream.MissedMessages'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

'decode_msg_ProtobufClient.ClientMessage'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientMessage'(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufClient.ClientMessage'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufClient.ClientMessage_identification'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData);
'dfp_read_field_def_ProtobufClient.ClientMessage'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufClient.ClientMessage_subscribe'(Rest,
						     Z1, Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufClient.ClientMessage'(<<26,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufClient.ClientMessage_unsubscribe'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
'dfp_read_field_def_ProtobufClient.ClientMessage'(<<34,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufClient.ClientMessage_webAuthentication'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData);
'dfp_read_field_def_ProtobufClient.ClientMessage'(<<42,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufClient.ClientMessage_apiAuthentication'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData);
'dfp_read_field_def_ProtobufClient.ClientMessage'(<<>>,
						  0, 0, F@_1, _) ->
    #'ProtobufClient.ClientMessage'{body = F@_1};
'dfp_read_field_def_ProtobufClient.ClientMessage'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientMessage'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufClient.ClientMessage'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientMessage'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_ProtobufClient.ClientMessage'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientMessage_identification'(Rest,
								0, 0, F@_1,
								TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientMessage_subscribe'(Rest,
							   0, 0, F@_1,
							   TrUserData);
      26 ->
	  'd_field_ProtobufClient.ClientMessage_unsubscribe'(Rest,
							     0, 0, F@_1,
							     TrUserData);
      34 ->
	  'd_field_ProtobufClient.ClientMessage_webAuthentication'(Rest,
								   0, 0, F@_1,
								   TrUserData);
      42 ->
	  'd_field_ProtobufClient.ClientMessage_apiAuthentication'(Rest,
								   0, 0, F@_1,
								   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientMessage'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientMessage'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientMessage'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientMessage'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientMessage'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientMessage'(<<>>,
						 0, 0, F@_1, _) ->
    #'ProtobufClient.ClientMessage'{body = F@_1}.

'd_field_ProtobufClient.ClientMessage_identification'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientMessage_identification'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'd_field_ProtobufClient.ClientMessage_identification'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, Prev,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientIdentificationMessage'(Bs,
										       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({identification,
								NewFValue},
							       TrUserData);
							{identification,
							 MVPrev} ->
							    id({identification,
								'merge_msg_ProtobufClient.ClientIdentificationMessage'(MVPrev,
														       NewFValue,
														       TrUserData)},
							       TrUserData);
							_ ->
							    id({identification,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufClient.ClientMessage_subscribe'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientMessage_subscribe'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'd_field_ProtobufClient.ClientMessage_subscribe'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscribeMessage'(Bs,
										  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({subscribe,
								NewFValue},
							       TrUserData);
							{subscribe, MVPrev} ->
							    id({subscribe,
								'merge_msg_ProtobufClient.ClientSubscribeMessage'(MVPrev,
														  NewFValue,
														  TrUserData)},
							       TrUserData);
							_ ->
							    id({subscribe,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufClient.ClientMessage_unsubscribe'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientMessage_unsubscribe'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
'd_field_ProtobufClient.ClientMessage_unsubscribe'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientUnsubscribeMessage'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({unsubscribe,
								NewFValue},
							       TrUserData);
							{unsubscribe, MVPrev} ->
							    id({unsubscribe,
								'merge_msg_ProtobufClient.ClientUnsubscribeMessage'(MVPrev,
														    NewFValue,
														    TrUserData)},
							       TrUserData);
							_ ->
							    id({unsubscribe,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufClient.ClientMessage_webAuthentication'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientMessage_webAuthentication'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, TrUserData);
'd_field_ProtobufClient.ClientMessage_webAuthentication'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, Prev,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.WebAuthenticationMessage'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({webAuthentication,
								NewFValue},
							       TrUserData);
							{webAuthentication,
							 MVPrev} ->
							    id({webAuthentication,
								'merge_msg_ProtobufClient.WebAuthenticationMessage'(MVPrev,
														    NewFValue,
														    TrUserData)},
							       TrUserData);
							_ ->
							    id({webAuthentication,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'd_field_ProtobufClient.ClientMessage_apiAuthentication'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientMessage_apiAuthentication'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, TrUserData);
'd_field_ProtobufClient.ClientMessage_apiAuthentication'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, Prev,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.APIAuthenticationMessage'(Bs,
										    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientMessage'(RestF,
						      0, 0,
						      case Prev of
							undefined ->
							    id({apiAuthentication,
								NewFValue},
							       TrUserData);
							{apiAuthentication,
							 MVPrev} ->
							    id({apiAuthentication,
								'merge_msg_ProtobufClient.APIAuthenticationMessage'(MVPrev,
														    NewFValue,
														    TrUserData)},
							       TrUserData);
							_ ->
							    id({apiAuthentication,
								NewFValue},
							       TrUserData)
						      end,
						      TrUserData).

'skip_varint_ProtobufClient.ClientMessage'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufClient.ClientMessage'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_ProtobufClient.ClientMessage'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufClient.ClientMessage'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientMessage'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_ProtobufClient.ClientMessage'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientMessage'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_ProtobufClient.ClientMessage'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientMessage'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_ProtobufClient.ClientMessage'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufClient.ClientMessage'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufClient.ClientIdentificationMessage'(Bin,
							TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Bin,
								    0, 0,
								    id([],
								       TrUserData),
								    id([],
								       TrUserData),
								    id([],
								       TrUserData),
								    id([],
								       TrUserData),
								    id([],
								       TrUserData),
								    TrUserData).

'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<10,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData) ->
    'd_field_ProtobufClient.ClientIdentificationMessage_useragent'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData);
'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<18,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData) ->
    'd_field_ProtobufClient.ClientIdentificationMessage_revision'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData);
'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<26,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData) ->
    'd_field_ProtobufClient.ClientIdentificationMessage_integration'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData);
'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<34,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData) ->
    'd_field_ProtobufClient.ClientIdentificationMessage_locale'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData);
'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<42,
								  Rest/binary>>,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData) ->
    'd_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData);
'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<>>,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, R1,
								TrUserData) ->
    #'ProtobufClient.ClientIdentificationMessage'{useragent
						      = F@_1,
						  revision = F@_2,
						  integration = F@_3,
						  locale = F@_4,
						  subscriptions =
						      lists_reverse(R1,
								    TrUserData)};
'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Other,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientIdentificationMessage'(Other,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData).

'dg_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientIdentificationMessage'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   F@_5,
								   TrUserData);
'dg_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5,
							       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientIdentificationMessage_useragent'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientIdentificationMessage_revision'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									TrUserData);
      26 ->
	  'd_field_ProtobufClient.ClientIdentificationMessage_integration'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   F@_5,
									   TrUserData);
      34 ->
	  'd_field_ProtobufClient.ClientIdentificationMessage_locale'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
      42 ->
	  'd_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientIdentificationMessage'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientIdentificationMessage'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4, F@_5,
								     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientIdentificationMessage'(Rest,
										   0,
										   0,
										   F@_1,
										   F@_2,
										   F@_3,
										   F@_4,
										   F@_5,
										   TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientIdentificationMessage'(Rest,
									Key bsr
									  3,
									0, F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientIdentificationMessage'(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4, F@_5,
								     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientIdentificationMessage'(<<>>,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4, R1,
							       TrUserData) ->
    #'ProtobufClient.ClientIdentificationMessage'{useragent
						      = F@_1,
						  revision = F@_2,
						  integration = F@_3,
						  locale = F@_4,
						  subscriptions =
						      lists_reverse(R1,
								    TrUserData)}.

'd_field_ProtobufClient.ClientIdentificationMessage_useragent'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientIdentificationMessage_useragent'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   F@_5,
								   TrUserData);
'd_field_ProtobufClient.ClientIdentificationMessage_useragent'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, _, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(RestF,
								    0, 0,
								    NewFValue,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    TrUserData).

'd_field_ProtobufClient.ClientIdentificationMessage_revision'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientIdentificationMessage_revision'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  F@_5,
								  TrUserData);
'd_field_ProtobufClient.ClientIdentificationMessage_revision'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1, _,
							      F@_3, F@_4, F@_5,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(RestF,
								    0, 0, F@_1,
								    NewFValue,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData).

'd_field_ProtobufClient.ClientIdentificationMessage_integration'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientIdentificationMessage_integration'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData);
'd_field_ProtobufClient.ClientIdentificationMessage_integration'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, _, F@_4,
								 F@_5,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(RestF,
								    0, 0, F@_1,
								    F@_2,
								    NewFValue,
								    F@_4, F@_5,
								    TrUserData).

'd_field_ProtobufClient.ClientIdentificationMessage_locale'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientIdentificationMessage_locale'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								F@_5,
								TrUserData);
'd_field_ProtobufClient.ClientIdentificationMessage_locale'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, _, F@_5,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(RestF,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    NewFValue,
								    F@_5,
								    TrUserData).

'd_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData);
'd_field_ProtobufClient.ClientIdentificationMessage_subscriptions'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4, Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(RestF,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4,
								    cons(NewFValue,
									 Prev,
									 TrUserData),
								    TrUserData).

'skip_varint_ProtobufClient.ClientIdentificationMessage'(<<1:1,
							   _:7, Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData) ->
    'skip_varint_ProtobufClient.ClientIdentificationMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData);
'skip_varint_ProtobufClient.ClientIdentificationMessage'(<<0:1,
							   _:7, Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData).

'skip_length_delimited_ProtobufClient.ClientIdentificationMessage'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientIdentificationMessage'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData);
'skip_length_delimited_ProtobufClient.ClientIdentificationMessage'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Rest2,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    TrUserData).

'skip_group_ProtobufClient.ClientIdentificationMessage'(Bin,
							FNum, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Rest,
								    0, Z2, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    TrUserData).

'skip_32_ProtobufClient.ClientIdentificationMessage'(<<_:32,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData).

'skip_64_ProtobufClient.ClientIdentificationMessage'(<<_:64,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientIdentificationMessage'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData).

'decode_msg_ProtobufClient.WebAuthenticationMessage'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Bin,
								 0, 0,
								 id(undefined,
								    TrUserData),
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<10,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_ProtobufClient.WebAuthenticationMessage_identification'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData);
'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_ProtobufClient.WebAuthenticationMessage_token'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData);
'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<26,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_ProtobufClient.WebAuthenticationMessage_nonce'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData);
'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<34,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'd_field_ProtobufClient.WebAuthenticationMessage_access_list'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<>>,
							     0, 0, F@_1, F@_2,
							     F@_3, R1,
							     TrUserData) ->
    #'ProtobufClient.WebAuthenticationMessage'{identification
						   = F@_1,
					       token = F@_2, nonce = F@_3,
					       access_list =
						   lists_reverse(R1,
								 TrUserData)};
'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    'dg_read_field_def_ProtobufClient.WebAuthenticationMessage'(Other,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData).

'dg_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.WebAuthenticationMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'dg_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.WebAuthenticationMessage_identification'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
      18 ->
	  'd_field_ProtobufClient.WebAuthenticationMessage_token'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
      26 ->
	  'd_field_ProtobufClient.WebAuthenticationMessage_nonce'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
      34 ->
	  'd_field_ProtobufClient.WebAuthenticationMessage_access_list'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.WebAuthenticationMessage'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
	    1 ->
		'skip_64_ProtobufClient.WebAuthenticationMessage'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.WebAuthenticationMessage'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										TrUserData);
	    3 ->
		'skip_group_ProtobufClient.WebAuthenticationMessage'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData);
	    5 ->
		'skip_32_ProtobufClient.WebAuthenticationMessage'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.WebAuthenticationMessage'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, R1,
							    TrUserData) ->
    #'ProtobufClient.WebAuthenticationMessage'{identification
						   = F@_1,
					       token = F@_2, nonce = F@_3,
					       access_list =
						   lists_reverse(R1,
								 TrUserData)}.

'd_field_ProtobufClient.WebAuthenticationMessage_identification'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.WebAuthenticationMessage_identification'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData);
'd_field_ProtobufClient.WebAuthenticationMessage_identification'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, Prev,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientIdentificationMessage'(Bs,
										       TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(RestF,
								 0, 0,
								 if Prev ==
								      undefined ->
									NewFValue;
								    true ->
									'merge_msg_ProtobufClient.ClientIdentificationMessage'(Prev,
															       NewFValue,
															       TrUserData)
								 end,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'd_field_ProtobufClient.WebAuthenticationMessage_token'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.WebAuthenticationMessage_token'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    TrUserData);
'd_field_ProtobufClient.WebAuthenticationMessage_token'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, _, F@_3,
							F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 NewFValue,
								 F@_3, F@_4,
								 TrUserData).

'd_field_ProtobufClient.WebAuthenticationMessage_nonce'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.WebAuthenticationMessage_nonce'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    TrUserData);
'd_field_ProtobufClient.WebAuthenticationMessage_nonce'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2, _,
							F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2,
								 NewFValue,
								 F@_4,
								 TrUserData).

'd_field_ProtobufClient.WebAuthenticationMessage_access_list'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.WebAuthenticationMessage_access_list'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  TrUserData);
'd_field_ProtobufClient.WebAuthenticationMessage_access_list'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 TrUserData).

'skip_varint_ProtobufClient.WebAuthenticationMessage'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'skip_varint_ProtobufClient.WebAuthenticationMessage'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData);
'skip_varint_ProtobufClient.WebAuthenticationMessage'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_length_delimited_ProtobufClient.WebAuthenticationMessage'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.WebAuthenticationMessage'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'skip_length_delimited_ProtobufClient.WebAuthenticationMessage'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Rest2,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_group_ProtobufClient.WebAuthenticationMessage'(Bin,
						     FNum, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Rest,
								 0, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_32_ProtobufClient.WebAuthenticationMessage'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'skip_64_ProtobufClient.WebAuthenticationMessage'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.WebAuthenticationMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData).

'decode_msg_ProtobufClient.TradeSessionAuth'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Bin,
							 0, 0,
							 id([], TrUserData),
							 id([], TrUserData),
							 id([], TrUserData),
							 id([], TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'd_field_ProtobufClient.TradeSessionAuth_api_key'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData);
'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'd_field_ProtobufClient.TradeSessionAuth_api_secret'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(<<26,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'd_field_ProtobufClient.TradeSessionAuth_customer_id'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData);
'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(<<34,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'd_field_ProtobufClient.TradeSessionAuth_key_passphrase'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(<<>>,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, _) ->
    #'ProtobufClient.TradeSessionAuth'{api_key = F@_1,
				       api_secret = F@_2, customer_id = F@_3,
				       key_passphrase = F@_4};
'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, TrUserData) ->
    'dg_read_field_def_ProtobufClient.TradeSessionAuth'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, TrUserData).

'dg_read_field_def_ProtobufClient.TradeSessionAuth'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.TradeSessionAuth'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
'dg_read_field_def_ProtobufClient.TradeSessionAuth'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.TradeSessionAuth_api_key'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData);
      18 ->
	  'd_field_ProtobufClient.TradeSessionAuth_api_secret'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      26 ->
	  'd_field_ProtobufClient.TradeSessionAuth_customer_id'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData);
      34 ->
	  'd_field_ProtobufClient.TradeSessionAuth_key_passphrase'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.TradeSessionAuth'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    1 ->
		'skip_64_ProtobufClient.TradeSessionAuth'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.TradeSessionAuth'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
	    3 ->
		'skip_group_ProtobufClient.TradeSessionAuth'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3, F@_4,
							     TrUserData);
	    5 ->
		'skip_32_ProtobufClient.TradeSessionAuth'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.TradeSessionAuth'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, _) ->
    #'ProtobufClient.TradeSessionAuth'{api_key = F@_1,
				       api_secret = F@_2, customer_id = F@_3,
				       key_passphrase = F@_4}.

'd_field_ProtobufClient.TradeSessionAuth_api_key'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.TradeSessionAuth_api_key'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
'd_field_ProtobufClient.TradeSessionAuth_api_key'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, _, F@_2, F@_3, F@_4,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, F@_4,
							 TrUserData).

'd_field_ProtobufClient.TradeSessionAuth_api_secret'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.TradeSessionAuth_api_secret'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufClient.TradeSessionAuth_api_secret'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, _, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(RestF,
							 0, 0, F@_1, NewFValue,
							 F@_3, F@_4,
							 TrUserData).

'd_field_ProtobufClient.TradeSessionAuth_customer_id'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.TradeSessionAuth_customer_id'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, TrUserData);
'd_field_ProtobufClient.TradeSessionAuth_customer_id'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, _,
						      F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(RestF,
							 0, 0, F@_1, F@_2,
							 NewFValue, F@_4,
							 TrUserData).

'd_field_ProtobufClient.TradeSessionAuth_key_passphrase'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.TradeSessionAuth_key_passphrase'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
'd_field_ProtobufClient.TradeSessionAuth_key_passphrase'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(RestF,
							 0, 0, F@_1, F@_2, F@_3,
							 NewFValue, TrUserData).

'skip_varint_ProtobufClient.TradeSessionAuth'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'skip_varint_ProtobufClient.TradeSessionAuth'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
'skip_varint_ProtobufClient.TradeSessionAuth'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData).

'skip_length_delimited_ProtobufClient.TradeSessionAuth'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.TradeSessionAuth'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    TrUserData);
'skip_length_delimited_ProtobufClient.TradeSessionAuth'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, TrUserData).

'skip_group_ProtobufClient.TradeSessionAuth'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData).

'skip_32_ProtobufClient.TradeSessionAuth'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData).

'skip_64_ProtobufClient.TradeSessionAuth'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSessionAuth'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData).

'decode_msg_ProtobufClient.TradeSubscription'(Bin,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(Bin,
							  0, 0,
							  id([], TrUserData),
							  id(undefined,
							     TrUserData),
							  TrUserData).

'dfp_read_field_def_ProtobufClient.TradeSubscription'(<<10,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'd_field_ProtobufClient.TradeSubscription_marketId'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
'dfp_read_field_def_ProtobufClient.TradeSubscription'(<<18,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'd_field_ProtobufClient.TradeSubscription_auth'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'dfp_read_field_def_ProtobufClient.TradeSubscription'(<<>>,
						      0, 0, F@_1, F@_2, _) ->
    #'ProtobufClient.TradeSubscription'{marketId = F@_1,
					auth = F@_2};
'dfp_read_field_def_ProtobufClient.TradeSubscription'(Other,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dg_read_field_def_ProtobufClient.TradeSubscription'(Other,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData).

'dg_read_field_def_ProtobufClient.TradeSubscription'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.TradeSubscription'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'dg_read_field_def_ProtobufClient.TradeSubscription'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.TradeSubscription_marketId'(Rest,
							      0, 0, F@_1, F@_2,
							      TrUserData);
      18 ->
	  'd_field_ProtobufClient.TradeSubscription_auth'(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.TradeSubscription'(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    1 ->
		'skip_64_ProtobufClient.TradeSubscription'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.TradeSubscription'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 TrUserData);
	    3 ->
		'skip_group_ProtobufClient.TradeSubscription'(Rest,
							      Key bsr 3, 0,
							      F@_1, F@_2,
							      TrUserData);
	    5 ->
		'skip_32_ProtobufClient.TradeSubscription'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.TradeSubscription'(<<>>,
						     0, 0, F@_1, F@_2, _) ->
    #'ProtobufClient.TradeSubscription'{marketId = F@_1,
					auth = F@_2}.

'd_field_ProtobufClient.TradeSubscription_marketId'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.TradeSubscription_marketId'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'd_field_ProtobufClient.TradeSubscription_marketId'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, _, F@_2,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(RestF,
							  0, 0, NewFValue, F@_2,
							  TrUserData).

'd_field_ProtobufClient.TradeSubscription_auth'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.TradeSubscription_auth'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'd_field_ProtobufClient.TradeSubscription_auth'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, Prev,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.TradeSessionAuth'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(RestF,
							  0, 0, F@_1,
							  if Prev ==
							       undefined ->
								 NewFValue;
							     true ->
								 'merge_msg_ProtobufClient.TradeSessionAuth'(Prev,
													     NewFValue,
													     TrUserData)
							  end,
							  TrUserData).

'skip_varint_ProtobufClient.TradeSubscription'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'skip_varint_ProtobufClient.TradeSubscription'(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
'skip_varint_ProtobufClient.TradeSubscription'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'skip_length_delimited_ProtobufClient.TradeSubscription'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.TradeSubscription'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'skip_length_delimited_ProtobufClient.TradeSubscription'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(Rest2,
							  0, 0, F@_1, F@_2,
							  TrUserData).

'skip_group_ProtobufClient.TradeSubscription'(Bin, FNum,
					      Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(Rest,
							  0, Z2, F@_1, F@_2,
							  TrUserData).

'skip_32_ProtobufClient.TradeSubscription'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'skip_64_ProtobufClient.TradeSubscription'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.TradeSubscription'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'decode_msg_ProtobufClient.StreamSubscription'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(Bin,
							   0, 0,
							   id([], TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufClient.StreamSubscription'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'd_field_ProtobufClient.StreamSubscription_resource'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData);
'dfp_read_field_def_ProtobufClient.StreamSubscription'(<<>>,
						       0, 0, F@_1, _) ->
    #'ProtobufClient.StreamSubscription'{resource = F@_1};
'dfp_read_field_def_ProtobufClient.StreamSubscription'(Other,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'dg_read_field_def_ProtobufClient.StreamSubscription'(Other,
							  Z1, Z2, F@_1,
							  TrUserData).

'dg_read_field_def_ProtobufClient.StreamSubscription'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.StreamSubscription'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'dg_read_field_def_ProtobufClient.StreamSubscription'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.StreamSubscription_resource'(Rest,
							       0, 0, F@_1,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.StreamSubscription'(Rest, 0,
								0, F@_1,
								TrUserData);
	    1 ->
		'skip_64_ProtobufClient.StreamSubscription'(Rest, 0, 0,
							    F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.StreamSubscription'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufClient.StreamSubscription'(Rest,
							       Key bsr 3, 0,
							       F@_1,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufClient.StreamSubscription'(Rest, 0, 0,
							    F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.StreamSubscription'(<<>>,
						      0, 0, F@_1, _) ->
    #'ProtobufClient.StreamSubscription'{resource = F@_1}.

'd_field_ProtobufClient.StreamSubscription_resource'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.StreamSubscription_resource'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'd_field_ProtobufClient.StreamSubscription_resource'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(RestF,
							   0, 0, NewFValue,
							   TrUserData).

'skip_varint_ProtobufClient.StreamSubscription'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufClient.StreamSubscription'(Rest,
						    Z1, Z2, F@_1, TrUserData);
'skip_varint_ProtobufClient.StreamSubscription'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'skip_length_delimited_ProtobufClient.StreamSubscription'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.StreamSubscription'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, TrUserData);
'skip_length_delimited_ProtobufClient.StreamSubscription'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(Rest2,
							   0, 0, F@_1,
							   TrUserData).

'skip_group_ProtobufClient.StreamSubscription'(Bin,
					       FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(Rest,
							   0, Z2, F@_1,
							   TrUserData).

'skip_32_ProtobufClient.StreamSubscription'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'skip_64_ProtobufClient.StreamSubscription'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.StreamSubscription'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'decode_msg_ProtobufClient.ClientSubscription'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(Bin,
							   0, 0,
							   id(undefined,
							      TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufClient.ClientSubscription'(<<10,
							 Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'd_field_ProtobufClient.ClientSubscription_stream_subscription'(Rest,
								    Z1, Z2,
								    F@_1,
								    TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSubscription'(<<18,
							 Rest/binary>>,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'd_field_ProtobufClient.ClientSubscription_trade_subscription'(Rest,
								   Z1, Z2, F@_1,
								   TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSubscription'(<<>>,
						       0, 0, F@_1, _) ->
    #'ProtobufClient.ClientSubscription'{body = F@_1};
'dfp_read_field_def_ProtobufClient.ClientSubscription'(Other,
						       Z1, Z2, F@_1,
						       TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientSubscription'(Other,
							  Z1, Z2, F@_1,
							  TrUserData).

'dg_read_field_def_ProtobufClient.ClientSubscription'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientSubscription'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'dg_read_field_def_ProtobufClient.ClientSubscription'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientSubscription_stream_subscription'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientSubscription_trade_subscription'(Rest,
									 0, 0,
									 F@_1,
									 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientSubscription'(Rest, 0,
								0, F@_1,
								TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientSubscription'(Rest, 0, 0,
							    F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientSubscription'(Rest,
									  0, 0,
									  F@_1,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientSubscription'(Rest,
							       Key bsr 3, 0,
							       F@_1,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientSubscription'(Rest, 0, 0,
							    F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientSubscription'(<<>>,
						      0, 0, F@_1, _) ->
    #'ProtobufClient.ClientSubscription'{body = F@_1}.

'd_field_ProtobufClient.ClientSubscription_stream_subscription'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSubscription_stream_subscription'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1,
								    TrUserData);
'd_field_ProtobufClient.ClientSubscription_stream_subscription'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, Prev,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.StreamSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(RestF,
							   0, 0,
							   case Prev of
							     undefined ->
								 id({stream_subscription,
								     NewFValue},
								    TrUserData);
							     {stream_subscription,
							      MVPrev} ->
								 id({stream_subscription,
								     'merge_msg_ProtobufClient.StreamSubscription'(MVPrev,
														   NewFValue,
														   TrUserData)},
								    TrUserData);
							     _ ->
								 id({stream_subscription,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'd_field_ProtobufClient.ClientSubscription_trade_subscription'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSubscription_trade_subscription'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1,
								   TrUserData);
'd_field_ProtobufClient.ClientSubscription_trade_subscription'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, Prev,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.TradeSubscription'(Bs,
									     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(RestF,
							   0, 0,
							   case Prev of
							     undefined ->
								 id({trade_subscription,
								     NewFValue},
								    TrUserData);
							     {trade_subscription,
							      MVPrev} ->
								 id({trade_subscription,
								     'merge_msg_ProtobufClient.TradeSubscription'(MVPrev,
														  NewFValue,
														  TrUserData)},
								    TrUserData);
							     _ ->
								 id({trade_subscription,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'skip_varint_ProtobufClient.ClientSubscription'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufClient.ClientSubscription'(Rest,
						    Z1, Z2, F@_1, TrUserData);
'skip_varint_ProtobufClient.ClientSubscription'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'skip_length_delimited_ProtobufClient.ClientSubscription'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientSubscription'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, TrUserData);
'skip_length_delimited_ProtobufClient.ClientSubscription'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(Rest2,
							   0, 0, F@_1,
							   TrUserData).

'skip_group_ProtobufClient.ClientSubscription'(Bin,
					       FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(Rest,
							   0, Z2, F@_1,
							   TrUserData).

'skip_32_ProtobufClient.ClientSubscription'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'skip_64_ProtobufClient.ClientSubscription'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscription'(Rest,
							   Z1, Z2, F@_1,
							   TrUserData).

'decode_msg_ProtobufClient.APIAuthenticationMessage'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Bin,
								 0, 0,
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 id('UNKNOWN',
								    TrUserData),
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<10,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_token'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_nonce'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<26,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_api_key'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<32,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_source'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<42,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_version'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<50,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5, F@_6,
								    F@_7,
								    TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<58,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'd_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(Rest,
									   Z1,
									   Z2,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   F@_5,
									   F@_6,
									   F@_7,
									   TrUserData);
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<>>,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     R1, R2,
							     TrUserData) ->
    #'ProtobufClient.APIAuthenticationMessage'{token = F@_1,
					       nonce = F@_2, api_key = F@_3,
					       source = F@_4, version = F@_5,
					       subscriptions =
						   lists_reverse(R1,
								 TrUserData),
					       client_subscriptions =
						   lists_reverse(R2,
								 TrUserData)};
'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7,
							     TrUserData) ->
    'dg_read_field_def_ProtobufClient.APIAuthenticationMessage'(Other,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								TrUserData).

'dg_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.APIAuthenticationMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								F@_5, F@_6,
								F@_7,
								TrUserData);
'dg_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_token'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  TrUserData);
      18 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_nonce'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  TrUserData);
      26 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_api_key'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    TrUserData);
      32 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_source'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   TrUserData);
      42 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_version'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    TrUserData);
      50 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  F@_6,
									  F@_7,
									  TrUserData);
      58 ->
	  'd_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 F@_4,
										 F@_5,
										 F@_6,
										 F@_7,
										 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.APIAuthenticationMessage'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      TrUserData);
	    1 ->
		'skip_64_ProtobufClient.APIAuthenticationMessage'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.APIAuthenticationMessage'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										F@_4,
										F@_5,
										F@_6,
										F@_7,
										TrUserData);
	    3 ->
		'skip_group_ProtobufClient.APIAuthenticationMessage'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2, F@_3,
								     F@_4, F@_5,
								     F@_6, F@_7,
								     TrUserData);
	    5 ->
		'skip_32_ProtobufClient.APIAuthenticationMessage'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  F@_6, F@_7,
								  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.APIAuthenticationMessage'(<<>>,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    R1, R2,
							    TrUserData) ->
    #'ProtobufClient.APIAuthenticationMessage'{token = F@_1,
					       nonce = F@_2, api_key = F@_3,
					       source = F@_4, version = F@_5,
					       subscriptions =
						   lists_reverse(R1,
								 TrUserData),
					       client_subscriptions =
						   lists_reverse(R2,
								 TrUserData)}.

'd_field_ProtobufClient.APIAuthenticationMessage_token'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_token'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_token'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, _, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0,
								 NewFValue,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'd_field_ProtobufClient.APIAuthenticationMessage_nonce'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_nonce'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, F@_6, F@_7,
							    TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_nonce'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, _, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 NewFValue,
								 F@_3, F@_4,
								 F@_5, F@_6,
								 F@_7,
								 TrUserData).

'd_field_ProtobufClient.APIAuthenticationMessage_api_key'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_api_key'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_api_key'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2, _,
							  F@_4, F@_5, F@_6,
							  F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2,
								 NewFValue,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'd_field_ProtobufClient.APIAuthenticationMessage_source'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_source'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_source'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, _, F@_5, F@_6,
							 F@_7, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ProtobufClient.APIAuthenticationMessage.Source'(begin
								      <<Res:32/signed-native>> =
									  <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
								      id(Res,
									 TrUserData)
								    end),
	    TrUserData),
	 Rest},
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 NewFValue,
								 F@_5, F@_6,
								 F@_7,
								 TrUserData).

'd_field_ProtobufClient.APIAuthenticationMessage_version'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_version'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_version'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, _, F@_6,
							  F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 NewFValue,
								 F@_6, F@_7,
								 TrUserData).

'd_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5, F@_6,
								    F@_7,
								    TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_subscriptions'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								Prev, F@_7,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 F@_7,
								 TrUserData).

'd_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(<<1:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       F@_7,
								       TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(Rest,
									   N +
									     7,
									   X bsl
									     N
									     +
									     Acc,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   F@_5,
									   F@_6,
									   F@_7,
									   TrUserData);
'd_field_ProtobufClient.APIAuthenticationMessage_client_subscriptions'(<<0:1,
									 X:7,
									 Rest/binary>>,
								       N, Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       F@_6,
								       Prev,
								       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(RestF,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 TrUserData).

'skip_varint_ProtobufClient.APIAuthenticationMessage'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      TrUserData) ->
    'skip_varint_ProtobufClient.APIAuthenticationMessage'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7,
							  TrUserData);
'skip_varint_ProtobufClient.APIAuthenticationMessage'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'skip_length_delimited_ProtobufClient.APIAuthenticationMessage'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.APIAuthenticationMessage'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5, F@_6,
								    F@_7,
								    TrUserData);
'skip_length_delimited_ProtobufClient.APIAuthenticationMessage'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Rest2,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'skip_group_ProtobufClient.APIAuthenticationMessage'(Bin,
						     FNum, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Rest,
								 0, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'skip_32_ProtobufClient.APIAuthenticationMessage'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'skip_64_ProtobufClient.APIAuthenticationMessage'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.APIAuthenticationMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData).

'decode_msg_ProtobufClient.ClientSessionMessage.Session'(Bin,
							 TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Bin,
								     0, 0,
								     id([],
									TrUserData),
								     id(0,
									TrUserData),
								     id([],
									TrUserData),
								     id([],
									TrUserData),
								     TrUserData).

'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<10,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_userId'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<16,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_expires'(Rest,
								  Z1, Z2, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<26,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_token'(Rest,
								Z1, Z2, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<34,
								   Rest/binary>>,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_mfaToken'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<>>,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, _) ->
    #'ProtobufClient.ClientSessionMessage.Session'{userId =
						       F@_1,
						   expires = F@_2, token = F@_3,
						   mfaToken = F@_4};
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Other,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Other,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData).

'dg_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData);
'dg_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4,
								TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientSessionMessage.Session_userId'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
      16 ->
	  'd_field_ProtobufClient.ClientSessionMessage.Session_expires'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
      26 ->
	  'd_field_ProtobufClient.ClientSessionMessage.Session_token'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
      34 ->
	  'd_field_ProtobufClient.ClientSessionMessage.Session_mfaToken'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientSessionMessage.Session'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientSessionMessage.Session'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientSessionMessage.Session'(Rest,
										    0,
										    0,
										    F@_1,
										    F@_2,
										    F@_3,
										    F@_4,
										    TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientSessionMessage.Session'(Rest,
									 Key bsr
									   3,
									 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientSessionMessage.Session'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientSessionMessage.Session'(<<>>,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, _) ->
    #'ProtobufClient.ClientSessionMessage.Session'{userId =
						       F@_1,
						   expires = F@_2, token = F@_3,
						   mfaToken = F@_4}.

'd_field_ProtobufClient.ClientSessionMessage.Session_userId'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_userId'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.Session_userId'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, _, F@_2,
							     F@_3, F@_4,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(RestF,
								     0, 0,
								     NewFValue,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData).

'd_field_ProtobufClient.ClientSessionMessage.Session_expires'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_expires'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.Session_expires'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1, _,
							      F@_3, F@_4,
							      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(RestF,
								     0, 0, F@_1,
								     NewFValue,
								     F@_3, F@_4,
								     TrUserData).

'd_field_ProtobufClient.ClientSessionMessage.Session_token'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_token'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.Session_token'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    _, F@_4,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(RestF,
								     0, 0, F@_1,
								     F@_2,
								     NewFValue,
								     F@_4,
								     TrUserData).

'd_field_ProtobufClient.ClientSessionMessage.Session_mfaToken'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.Session_mfaToken'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.Session_mfaToken'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, _,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(RestF,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     NewFValue,
								     TrUserData).

'skip_varint_ProtobufClient.ClientSessionMessage.Session'(<<1:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'skip_varint_ProtobufClient.ClientSessionMessage.Session'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData);
'skip_varint_ProtobufClient.ClientSessionMessage.Session'(<<0:1,
							    _:7, Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4,
							  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'skip_length_delimited_ProtobufClient.ClientSessionMessage.Session'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientSessionMessage.Session'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									TrUserData);
'skip_length_delimited_ProtobufClient.ClientSessionMessage.Session'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Rest2,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     F@_4,
								     TrUserData).

'skip_group_ProtobufClient.ClientSessionMessage.Session'(Bin,
							 FNum, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Rest,
								     0, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'skip_32_ProtobufClient.ClientSessionMessage.Session'(<<_:32,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'skip_64_ProtobufClient.ClientSessionMessage.Session'(<<_:64,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.Session'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData).

'decode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Bin,
									 TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Bin,
										     0,
										     0,
										     id([],
											TrUserData),
										     id([],
											TrUserData),
										     id(0,
											TrUserData),
										     TrUserData).

'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<10,
										   Rest/binary>>,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_exchange'(Rest,
										   Z1,
										   Z2,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<18,
										   Rest/binary>>,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_token'(Rest,
										Z1,
										Z2,
										F@_1,
										F@_2,
										F@_3,
										TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<24,
										   Rest/binary>>,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_expiration'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<>>,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 F@_3,
										 _) ->
    #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
								       = F@_1,
								   token = F@_2,
								   expiration =
								       F@_3};
'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Other,
										 Z1,
										 Z2,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Other,
										    Z1,
										    Z2,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData).

'dg_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<1:1,
										  X:7,
										  Rest/binary>>,
										N,
										Acc,
										F@_1,
										F@_2,
										F@_3,
										TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										    N
										      +
										      7,
										    X
										      bsl
										      N
										      +
										      Acc,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData);
'dg_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<0:1,
										  X:7,
										  Rest/binary>>,
										N,
										Acc,
										F@_1,
										F@_2,
										F@_3,
										TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_exchange'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_token'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
      24 ->
	  'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_expiration'(Rest,
											   0,
											   0,
											   F@_1,
											   F@_2,
											   F@_3,
											   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
											  0,
											  0,
											  F@_1,
											  F@_2,
											  F@_3,
											  TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
												    0,
												    0,
												    F@_1,
												    F@_2,
												    F@_3,
												    TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
											 Key
											   bsr
											   3,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										      0,
										      0,
										      F@_1,
										      F@_2,
										      F@_3,
										      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<>>,
										0,
										0,
										F@_1,
										F@_2,
										F@_3,
										_) ->
    #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
								       = F@_1,
								   token = F@_2,
								   expiration =
								       F@_3}.

'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_exchange'(<<1:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       F@_1,
									       F@_2,
									       F@_3,
									       TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_exchange'(Rest,
										   N
										     +
										     7,
										   X
										     bsl
										     N
										     +
										     Acc,
										   F@_1,
										   F@_2,
										   F@_3,
										   TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_exchange'(<<0:1,
										 X:7,
										 Rest/binary>>,
									       N,
									       Acc,
									       _,
									       F@_2,
									       F@_3,
									       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(RestF,
										     0,
										     0,
										     NewFValue,
										     F@_2,
										     F@_3,
										     TrUserData).

'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_token'(<<1:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    F@_2,
									    F@_3,
									    TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_token'(Rest,
										N
										  +
										  7,
										X
										  bsl
										  N
										  +
										  Acc,
										F@_1,
										F@_2,
										F@_3,
										TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_token'(<<0:1,
									      X:7,
									      Rest/binary>>,
									    N,
									    Acc,
									    F@_1,
									    _,
									    F@_3,
									    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(RestF,
										     0,
										     0,
										     F@_1,
										     NewFValue,
										     F@_3,
										     TrUserData).

'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_expiration'(<<1:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 F@_3,
										 TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_expiration'(Rest,
										     N
										       +
										       7,
										     X
										       bsl
										       N
										       +
										       Acc,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData);
'd_field_ProtobufClient.ClientSessionMessage.AnonymousTradingSession_expiration'(<<0:1,
										   X:7,
										   Rest/binary>>,
										 N,
										 Acc,
										 F@_1,
										 F@_2,
										 _,
										 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(RestF,
										     0,
										     0,
										     F@_1,
										     F@_2,
										     NewFValue,
										     TrUserData).

'skip_varint_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<1:1,
									    _:7,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData) ->
    'skip_varint_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
									      Z1,
									      Z2,
									      F@_1,
									      F@_2,
									      F@_3,
									      TrUserData);
'skip_varint_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<0:1,
									    _:7,
									    Rest/binary>>,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_length_delimited_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<1:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
											N
											  +
											  7,
											X
											  bsl
											  N
											  +
											  Acc,
											F@_1,
											F@_2,
											F@_3,
											TrUserData);
'skip_length_delimited_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<0:1,
										      X:7,
										      Rest/binary>>,
										    N,
										    Acc,
										    F@_1,
										    F@_2,
										    F@_3,
										    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest2,
										     0,
										     0,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_group_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Bin,
									 FNum,
									 Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										     0,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_32_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<_:32,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'skip_64_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(<<_:64,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Rest,
										     Z1,
										     Z2,
										     F@_1,
										     F@_2,
										     F@_3,
										     TrUserData).

'decode_msg_ProtobufClient.ClientSessionMessage'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Bin,
							     0, 0,
							     id(undefined,
								TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage_session'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'd_field_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(<<>>,
							 0, 0, F@_1, _) ->
    #'ProtobufClient.ClientSessionMessage'{'SessionConfig' =
					       F@_1};
'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Other,
							 Z1, Z2, F@_1,
							 TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientSessionMessage'(Other,
							    Z1, Z2, F@_1,
							    TrUserData).

'dg_read_field_def_ProtobufClient.ClientSessionMessage'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientSessionMessage'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    TrUserData);
'dg_read_field_def_ProtobufClient.ClientSessionMessage'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientSessionMessage_session'(Rest,
								0, 0, F@_1,
								TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(Rest,
										0,
										0,
										F@_1,
										TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientSessionMessage'(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientSessionMessage'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientSessionMessage'(Rest,
									    0,
									    0,
									    F@_1,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientSessionMessage'(Rest,
								 Key bsr 3, 0,
								 F@_1,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientSessionMessage'(Rest, 0,
							      0, F@_1,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientSessionMessage'(<<>>,
							0, 0, F@_1, _) ->
    #'ProtobufClient.ClientSessionMessage'{'SessionConfig' =
					       F@_1}.

'd_field_ProtobufClient.ClientSessionMessage_session'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage_session'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'd_field_ProtobufClient.ClientSessionMessage_session'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, Prev,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSessionMessage.Session'(Bs,
											TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(RestF,
							     0, 0,
							     case Prev of
							       undefined ->
								   id({session,
								       NewFValue},
								      TrUserData);
							       {session,
								MVPrev} ->
								   id({session,
								       'merge_msg_ProtobufClient.ClientSessionMessage.Session'(MVPrev,
															       NewFValue,
															       TrUserData)},
								      TrUserData);
							       _ ->
								   id({session,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(<<1:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      F@_1,
								      TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(Rest,
									  N + 7,
									  X bsl
									    N
									    +
									    Acc,
									  F@_1,
									  TrUserData);
'd_field_ProtobufClient.ClientSessionMessage_anonymousTradingSession'(<<0:1,
									X:7,
									Rest/binary>>,
								      N, Acc,
								      Prev,
								      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Bs,
													TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(RestF,
							     0, 0,
							     case Prev of
							       undefined ->
								   id({anonymousTradingSession,
								       NewFValue},
								      TrUserData);
							       {anonymousTradingSession,
								MVPrev} ->
								   id({anonymousTradingSession,
								       'merge_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(MVPrev,
																	       NewFValue,
																	       TrUserData)},
								      TrUserData);
							       _ ->
								   id({anonymousTradingSession,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'skip_varint_ProtobufClient.ClientSessionMessage'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufClient.ClientSessionMessage'(Rest,
						      Z1, Z2, F@_1, TrUserData);
'skip_varint_ProtobufClient.ClientSessionMessage'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_length_delimited_ProtobufClient.ClientSessionMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientSessionMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1,
								TrUserData);
'skip_length_delimited_ProtobufClient.ClientSessionMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Rest2,
							     0, 0, F@_1,
							     TrUserData).

'skip_group_ProtobufClient.ClientSessionMessage'(Bin,
						 FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Rest,
							     0, Z2, F@_1,
							     TrUserData).

'skip_32_ProtobufClient.ClientSessionMessage'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'skip_64_ProtobufClient.ClientSessionMessage'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSessionMessage'(Rest,
							     Z1, Z2, F@_1,
							     TrUserData).

'decode_msg_ProtobufClient.ClientSubscribeMessage'(Bin,
						   TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Bin,
							       0, 0,
							       id([],
								  TrUserData),
							       id([],
								  TrUserData),
							       TrUserData).

'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(<<10,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'd_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(<<18,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'd_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(<<>>,
							   0, 0, R1, R2,
							   TrUserData) ->
    #'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
						 =
						 lists_reverse(R1, TrUserData),
					     subscriptions =
						 lists_reverse(R2, TrUserData)};
'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientSubscribeMessage'(Other,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData).

'dg_read_field_def_ProtobufClient.ClientSubscribeMessage'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientSubscribeMessage'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'dg_read_field_def_ProtobufClient.ClientSubscribeMessage'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientSubscribeMessage'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientSubscribeMessage'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientSubscribeMessage'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientSubscribeMessage'(Rest,
								   Key bsr 3, 0,
								   F@_1, F@_2,
								   TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientSubscribeMessage'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientSubscribeMessage'(<<>>,
							  0, 0, R1, R2,
							  TrUserData) ->
    #'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
						 =
						 lists_reverse(R1, TrUserData),
					     subscriptions =
						 lists_reverse(R2, TrUserData)}.

'd_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'd_field_ProtobufClient.ClientSubscribeMessage_subscriptionKeys'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, Prev,
								 F@_2,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(RestF,
							       0, 0,
							       cons(NewFValue,
								    Prev,
								    TrUserData),
							       F@_2,
							       TrUserData).

'd_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufClient.ClientSubscribeMessage_subscriptions'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(RestF,
							       0, 0, F@_1,
							       cons(NewFValue,
								    Prev,
								    TrUserData),
							       TrUserData).

'skip_varint_ProtobufClient.ClientSubscribeMessage'(<<1:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'skip_varint_ProtobufClient.ClientSubscribeMessage'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
'skip_varint_ProtobufClient.ClientSubscribeMessage'(<<0:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_length_delimited_ProtobufClient.ClientSubscribeMessage'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientSubscribeMessage'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'skip_length_delimited_ProtobufClient.ClientSubscribeMessage'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2,
							      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Rest2,
							       0, 0, F@_1, F@_2,
							       TrUserData).

'skip_group_ProtobufClient.ClientSubscribeMessage'(Bin,
						   FNum, Z2, F@_1, F@_2,
						   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Rest,
							       0, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_32_ProtobufClient.ClientSubscribeMessage'(<<_:32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_64_ProtobufClient.ClientSubscribeMessage'(<<_:64,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientSubscribeMessage'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'decode_msg_ProtobufClient.ClientUnsubscribeMessage'(Bin,
						     TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Bin,
								 0, 0,
								 id([],
								    TrUserData),
								 id([],
								    TrUserData),
								 TrUserData).

'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(<<10,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData);
'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(<<18,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    TrUserData);
'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(<<>>,
							     0, 0, R1, R2,
							     TrUserData) ->
    #'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
						   =
						   lists_reverse(R1,
								 TrUserData),
					       subscriptions =
						   lists_reverse(R2,
								 TrUserData)};
'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Other,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData) ->
    'dg_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Other,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData).

'dg_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'dg_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
      18 ->
	  'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    1 ->
		'skip_64_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufClient.ClientUnsubscribeMessage'(Rest,
										0,
										0,
										F@_1,
										F@_2,
										TrUserData);
	    3 ->
		'skip_group_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								     Key bsr 3,
								     0, F@_1,
								     F@_2,
								     TrUserData);
	    5 ->
		'skip_32_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(<<>>,
							    0, 0, R1, R2,
							    TrUserData) ->
    #'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
						   =
						   lists_reverse(R1,
								 TrUserData),
					       subscriptions =
						   lists_reverse(R2,
								 TrUserData)}.

'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptionKeys'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, Prev,
								   F@_2,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(RestF,
								 0, 0,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 F@_2,
								 TrUserData).

'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'd_field_ProtobufClient.ClientUnsubscribeMessage_subscriptions'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								Prev,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufClient.ClientSubscription'(Bs,
									      TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(RestF,
								 0, 0, F@_1,
								 cons(NewFValue,
								      Prev,
								      TrUserData),
								 TrUserData).

'skip_varint_ProtobufClient.ClientUnsubscribeMessage'(<<1:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'skip_varint_ProtobufClient.ClientUnsubscribeMessage'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData);
'skip_varint_ProtobufClient.ClientUnsubscribeMessage'(<<0:1,
							_:7, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_length_delimited_ProtobufClient.ClientUnsubscribeMessage'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    TrUserData);
'skip_length_delimited_ProtobufClient.ClientUnsubscribeMessage'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2,
								TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Rest2,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData).

'skip_group_ProtobufClient.ClientUnsubscribeMessage'(Bin,
						     FNum, Z2, F@_1, F@_2,
						     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								 0, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_32_ProtobufClient.ClientUnsubscribeMessage'(<<_:32,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'skip_64_ProtobufClient.ClientUnsubscribeMessage'(<<_:64,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufClient.ClientUnsubscribeMessage'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'decode_msg_ProtobufMarkets.Market'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Bin, 0, 0,
						id(0, TrUserData),
						id(0, TrUserData),
						id(0, TrUserData),
						id([], TrUserData),
						id([], TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Market'(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_exchangeId'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_currencyPairId'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<40,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_marketId'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_exchange'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.Market_currencyPair'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Market'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ProtobufMarkets.Market'{exchangeId = F@_1,
			      currencyPairId = F@_2, marketId = F@_3,
			      exchange = F@_4, currencyPair = F@_5};
'dfp_read_field_def_ProtobufMarkets.Market'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Market'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

'dg_read_field_def_ProtobufMarkets.Market'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Market'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
'dg_read_field_def_ProtobufMarkets.Market'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      24 ->
	  'd_field_ProtobufMarkets.Market_exchangeId'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      32 ->
	  'd_field_ProtobufMarkets.Market_currencyPairId'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.Market_marketId'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      10 ->
	  'd_field_ProtobufMarkets.Market_exchange'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.Market_currencyPair'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Market'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Market'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Market'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Market'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Market'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Market'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'ProtobufMarkets.Market'{exchangeId = F@_1,
			      currencyPairId = F@_2, marketId = F@_3,
			      exchange = F@_4, currencyPair = F@_5}.

'd_field_ProtobufMarkets.Market_exchangeId'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_exchangeId'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
'd_field_ProtobufMarkets.Market_exchangeId'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						NewFValue, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_currencyPairId'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_currencyPairId'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
'd_field_ProtobufMarkets.Market_currencyPairId'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, NewFValue, F@_3, F@_4,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_marketId'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_marketId'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
'd_field_ProtobufMarkets.Market_marketId'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, F@_2, NewFValue, F@_4,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_exchange'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_exchange'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
'd_field_ProtobufMarkets.Market_exchange'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, F@_2, F@_3, NewFValue,
						F@_5, TrUserData).

'd_field_ProtobufMarkets.Market_currencyPair'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Market_currencyPair'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
'd_field_ProtobufMarkets.Market_currencyPair'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Market'(RestF, 0, 0,
						F@_1, F@_2, F@_3, F@_4,
						NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.Market'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    'skip_varint_ProtobufMarkets.Market'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
'skip_varint_ProtobufMarkets.Market'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'skip_length_delimited_ProtobufMarkets.Market'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Market'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
'skip_length_delimited_ProtobufMarkets.Market'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

'skip_group_ProtobufMarkets.Market'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

'skip_32_ProtobufMarkets.Market'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'skip_64_ProtobufMarkets.Market'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Market'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

'decode_msg_ProtobufMarkets.Order'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Bin, 0, 0,
					       id([], TrUserData),
					       id([], TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Order'(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_priceStr'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<34,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_amountStr'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<13,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_price'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<21,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Order_amount'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Order'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, _) ->
    #'ProtobufMarkets.Order'{priceStr = F@_1,
			     amountStr = F@_2, price = F@_3, amount = F@_4};
'dfp_read_field_def_ProtobufMarkets.Order'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Order'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

'dg_read_field_def_ProtobufMarkets.Order'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Order'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
'dg_read_field_def_ProtobufMarkets.Order'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      26 ->
	  'd_field_ProtobufMarkets.Order_priceStr'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.Order_amountStr'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    TrUserData);
      13 ->
	  'd_field_ProtobufMarkets.Order_price'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      21 ->
	  'd_field_ProtobufMarkets.Order_amount'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Order'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Order'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Order'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Order'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Order'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Order'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, _) ->
    #'ProtobufMarkets.Order'{priceStr = F@_1,
			     amountStr = F@_2, price = F@_3, amount = F@_4}.

'd_field_ProtobufMarkets.Order_priceStr'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Order_priceStr'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_priceStr'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Order'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       TrUserData).

'd_field_ProtobufMarkets.Order_amountStr'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Order_amountStr'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_amountStr'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Order'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       TrUserData).

'd_field_ProtobufMarkets.Order_price'(<<0:16, 128, 127,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id(infinity, TrUserData), F@_4,
					       TrUserData);
'd_field_ProtobufMarkets.Order_price'(<<0:16, 128, 255,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id('-infinity', TrUserData),
					       F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_price'(<<_:16, 1:1, _:7,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, id(nan, TrUserData),
					       F@_4, TrUserData);
'd_field_ProtobufMarkets.Order_price'(<<Value:32/little-float,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, _, F@_4,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2,
					       id(Value, TrUserData), F@_4,
					       TrUserData).

'd_field_ProtobufMarkets.Order_amount'(<<0:16, 128, 127,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id(infinity, TrUserData),
					       TrUserData);
'd_field_ProtobufMarkets.Order_amount'(<<0:16, 128, 255,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id('-infinity', TrUserData),
					       TrUserData);
'd_field_ProtobufMarkets.Order_amount'(<<_:16, 1:1, _:7,
					 _:1, 127:7, Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id(nan, TrUserData), TrUserData);
'd_field_ProtobufMarkets.Order_amount'(<<Value:32/little-float,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, _,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3,
					       id(Value, TrUserData),
					       TrUserData).

'skip_varint_ProtobufMarkets.Order'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    'skip_varint_ProtobufMarkets.Order'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
'skip_varint_ProtobufMarkets.Order'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_length_delimited_ProtobufMarkets.Order'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Order'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
'skip_length_delimited_ProtobufMarkets.Order'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_group_ProtobufMarkets.Order'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_32_ProtobufMarkets.Order'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'skip_64_ProtobufMarkets.Order'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Order'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

'decode_msg_ProtobufMarkets.Trade'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Bin, 0, 0,
					       id([], TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData),
					       id([], TrUserData),
					       id([], TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0.0, TrUserData),
					       id(0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Trade'(<<90,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_externalId'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<16,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_timestamp'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<40,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_timestampMillis'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<80,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_timestampNano'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<66,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_priceStr'(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<74,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_amountStr'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<29,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_price'(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<37,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_amount'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<49,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_priceDouble'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<57,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_amountDouble'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'd_field_ProtobufMarkets.Trade_id'(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Trade'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'ProtobufMarkets.Trade'{externalId = F@_1,
			     timestamp = F@_2, timestampMillis = F@_3,
			     timestampNano = F@_4, priceStr = F@_5,
			     amountStr = F@_6, price = F@_7, amount = F@_8,
			     priceDouble = F@_9, amountDouble = F@_10,
			     id = F@_11};
'dfp_read_field_def_ProtobufMarkets.Trade'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Trade'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData).

'dg_read_field_def_ProtobufMarkets.Trade'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Trade'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, TrUserData);
'dg_read_field_def_ProtobufMarkets.Trade'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      90 ->
	  'd_field_ProtobufMarkets.Trade_externalId'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11,
						     TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.Trade_timestamp'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.Trade_timestampMillis'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11,
							  TrUserData);
      80 ->
	  'd_field_ProtobufMarkets.Trade_timestampNano'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, F@_9, F@_10,
							F@_11, TrUserData);
      66 ->
	  'd_field_ProtobufMarkets.Trade_priceStr'(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, TrUserData);
      74 ->
	  'd_field_ProtobufMarkets.Trade_amountStr'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11,
						    TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.Trade_price'(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, F@_9, F@_10, F@_11,
						TrUserData);
      37 ->
	  'd_field_ProtobufMarkets.Trade_amount'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, F@_9, F@_10, F@_11,
						 TrUserData);
      49 ->
	  'd_field_ProtobufMarkets.Trade_priceDouble'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11,
						      TrUserData);
      57 ->
	  'd_field_ProtobufMarkets.Trade_amountDouble'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       TrUserData);
      8 ->
	  'd_field_ProtobufMarkets.Trade_id'(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Trade'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Trade'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						F@_8, F@_9, F@_10, F@_11,
						TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Trade'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11,
							      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Trade'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Trade'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						F@_8, F@_9, F@_10, F@_11,
						TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Trade'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #'ProtobufMarkets.Trade'{externalId = F@_1,
			     timestamp = F@_2, timestampMillis = F@_3,
			     timestampNano = F@_4, priceStr = F@_5,
			     amountStr = F@_6, price = F@_7, amount = F@_8,
			     priceDouble = F@_9, amountDouble = F@_10,
			     id = F@_11}.

'd_field_ProtobufMarkets.Trade_externalId'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_externalId'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_externalId'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_timestamp'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_timestamp'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_timestamp'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_timestampMillis'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_timestampMillis'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_timestampMillis'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, _, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_timestampNano'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_timestampNano'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_timestampNano'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_priceStr'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_priceStr'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceStr'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       NewFValue, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_amountStr'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_amountStr'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amountStr'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  _, F@_7, F@_8, F@_9, F@_10, F@_11,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       NewFValue, F@_7, F@_8, F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_price'(<<0:16, 128, 127,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, id(infinity, TrUserData),
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_price'(<<0:16, 128, 255,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6,
					       id('-infinity', TrUserData),
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_price'(<<_:16, 1:1, _:7,
					_:1, 127:7, Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, id(nan, TrUserData), F@_8,
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_price'(<<Value:32/little-float,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, _, F@_8, F@_9, F@_10, F@_11,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, id(Value, TrUserData),
					       F@_8, F@_9, F@_10, F@_11,
					       TrUserData).

'd_field_ProtobufMarkets.Trade_amount'(<<0:16, 128, 127,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7,
					       id(infinity, TrUserData), F@_9,
					       F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amount'(<<0:16, 128, 255,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7,
					       id('-infinity', TrUserData),
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amount'(<<_:16, 1:1, _:7,
					 _:1, 127:7, Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, id(nan, TrUserData),
					       F@_9, F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amount'(<<Value:32/little-float,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, _, F@_9, F@_10, F@_11,
				       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7,
					       id(Value, TrUserData), F@_9,
					       F@_10, F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_priceDouble'(<<0:48, 240,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id(infinity, TrUserData), F@_10,
					       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceDouble'(<<0:48, 240,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id('-infinity', TrUserData),
					       F@_10, F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceDouble'(<<_:48,
					      15:4, _:4, _:1, 127:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id(nan, TrUserData), F@_10,
					       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_priceDouble'(<<Value:64/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, _, F@_10,
					    F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8,
					       id(Value, TrUserData), F@_10,
					       F@_11, TrUserData).

'd_field_ProtobufMarkets.Trade_amountDouble'(<<0:48,
					       240, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id(infinity, TrUserData), F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_amountDouble'(<<0:48,
					       240, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id('-infinity', TrUserData),
					       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_amountDouble'(<<_:48,
					       15:4, _:4, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id(nan, TrUserData), F@_11,
					       TrUserData);
'd_field_ProtobufMarkets.Trade_amountDouble'(<<Value:64/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9,
					       id(Value, TrUserData), F@_11,
					       TrUserData).

'd_field_ProtobufMarkets.Trade_id'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Trade_id'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, TrUserData);
'd_field_ProtobufMarkets.Trade_id'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Trade'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.Trade'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    'skip_varint_ProtobufMarkets.Trade'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
'skip_varint_ProtobufMarkets.Trade'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_length_delimited_ProtobufMarkets.Trade'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Trade'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, TrUserData);
'skip_length_delimited_ProtobufMarkets.Trade'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, F@_8, F@_9,
					      F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_group_ProtobufMarkets.Trade'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_32_ProtobufMarkets.Trade'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'skip_64_ProtobufMarkets.Trade'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Trade'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, TrUserData).

'decode_msg_ProtobufMarkets.MarketUpdateMessage'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Bin,
							     0, 0,
							     id(undefined,
								TrUserData),
							     id(undefined,
								TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<74,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_market'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<18,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<26,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<90,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Rest,
									Z1, Z2,
									F@_1,
									F@_2,
									TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<34,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<42,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<50,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<58,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<>>,
							 0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.MarketUpdateMessage'{market = F@_1,
					   'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Other,
							 Z1, Z2, F@_1, F@_2,
							 TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Other,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      74 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_market'(Rest,
							       0, 0, F@_1, F@_2,
							       TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     TrUserData);
      90 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
      42 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      50 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      58 ->
	  'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.MarketUpdateMessage'(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.MarketUpdateMessage'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.MarketUpdateMessage'(Rest,
								 Key bsr 3, 0,
								 F@_1, F@_2,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.MarketUpdateMessage'(Rest, 0,
							      0, F@_1, F@_2,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.MarketUpdateMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.MarketUpdateMessage'{market = F@_1,
					   'Update' = F@_2}.

'd_field_ProtobufMarkets.MarketUpdateMessage_market'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_market'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_market'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, Prev, F@_2,
						     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Market'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0,
							     if Prev ==
								  undefined ->
								    NewFValue;
								true ->
								    'merge_msg_ProtobufMarkets.Market'(Prev,
												       NewFValue,
												       TrUserData)
							     end,
							     F@_2, TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({orderBookUpdate,
								       NewFValue},
								      TrUserData);
							       {orderBookUpdate,
								MVPrev} ->
								   id({orderBookUpdate,
								       'merge_msg_ProtobufMarkets.OrderBookUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								      TrUserData);
							       _ ->
								   id({orderBookUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2,
								   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookDeltaUpdate'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   Prev,
								   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Bs,
										 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({orderBookDeltaUpdate,
								       NewFValue},
								      TrUserData);
							       {orderBookDeltaUpdate,
								MVPrev} ->
								   id({orderBookDeltaUpdate,
								       'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(MVPrev,
															NewFValue,
															TrUserData)},
								      TrUserData);
							       _ ->
								   id({orderBookDeltaUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(<<1:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, F@_2,
								    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(Rest,
									N + 7,
									X bsl N
									  + Acc,
									F@_1,
									F@_2,
									TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_orderBookSpreadUpdate'(<<0:1,
								      X:7,
								      Rest/binary>>,
								    N, Acc,
								    F@_1, Prev,
								    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Bs,
										  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({orderBookSpreadUpdate,
								       NewFValue},
								      TrUserData);
							       {orderBookSpreadUpdate,
								MVPrev} ->
								   id({orderBookSpreadUpdate,
								       'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(MVPrev,
															 NewFValue,
															 TrUserData)},
								      TrUserData);
							       _ ->
								   id({orderBookSpreadUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_tradesUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, Prev,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.TradesUpdate'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({tradesUpdate,
								       NewFValue},
								      TrUserData);
							       {tradesUpdate,
								MVPrev} ->
								   id({tradesUpdate,
								       'merge_msg_ProtobufMarkets.TradesUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								      TrUserData);
							       _ ->
								   id({tradesUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_intervalsUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.IntervalsUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({intervalsUpdate,
								       NewFValue},
								      TrUserData);
							       {intervalsUpdate,
								MVPrev} ->
								   id({intervalsUpdate,
								       'merge_msg_ProtobufMarkets.IntervalsUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								      TrUserData);
							       _ ->
								   id({intervalsUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_summaryUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SummaryUpdate'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({summaryUpdate,
								       NewFValue},
								      TrUserData);
							       {summaryUpdate,
								MVPrev} ->
								   id({summaryUpdate,
								       'merge_msg_ProtobufMarkets.SummaryUpdate'(MVPrev,
														 NewFValue,
														 TrUserData)},
								      TrUserData);
							       _ ->
								   id({summaryUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.MarketUpdateMessage_sparklineUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SparklineUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(RestF,
							     0, 0, F@_1,
							     case Prev of
							       undefined ->
								   id({sparklineUpdate,
								       NewFValue},
								      TrUserData);
							       {sparklineUpdate,
								MVPrev} ->
								   id({sparklineUpdate,
								       'merge_msg_ProtobufMarkets.SparklineUpdate'(MVPrev,
														   NewFValue,
														   TrUserData)},
								      TrUserData);
							       _ ->
								   id({sparklineUpdate,
								       NewFValue},
								      TrUserData)
							     end,
							     TrUserData).

'skip_varint_ProtobufMarkets.MarketUpdateMessage'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'skip_varint_ProtobufMarkets.MarketUpdateMessage'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
'skip_varint_ProtobufMarkets.MarketUpdateMessage'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'skip_length_delimited_ProtobufMarkets.MarketUpdateMessage'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest2,
							     0, 0, F@_1, F@_2,
							     TrUserData).

'skip_group_ProtobufMarkets.MarketUpdateMessage'(Bin,
						 FNum, Z2, F@_1, F@_2,
						 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     0, Z2, F@_1, F@_2,
							     TrUserData).

'skip_32_ProtobufMarkets.MarketUpdateMessage'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'skip_64_ProtobufMarkets.MarketUpdateMessage'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.MarketUpdateMessage'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData).

'decode_msg_ProtobufMarkets.OrderBookUpdate'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Bin,
							 0, 0,
							 id([], TrUserData),
							 id(0, TrUserData),
							 id([], TrUserData),
							 id([], TrUserData),
							 id(0.0, TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<34,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(Rest,
								    Z1, Z2,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<40,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<18,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<29,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(Rest,
								 Z1, Z2, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<>>,
						     0, 0, F@_1, F@_2, R1, R2,
						     F@_5, TrUserData) ->
    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
					   = F@_1,
				       seqNum = F@_2,
				       bids = lists_reverse(R1, TrUserData),
				       asks = lists_reverse(R2, TrUserData),
				       aggregationModulus = F@_5};
'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      34 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  F@_5,
									  TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   TrUserData);
      10 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       F@_5,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									F@_4,
									F@_5,
									TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookUpdate'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3, F@_4,
							     F@_5, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookUpdate'(<<>>,
						    0, 0, F@_1, F@_2, R1, R2,
						    F@_5, TrUserData) ->
    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
					   = F@_1,
				       seqNum = F@_2,
				       bids = lists_reverse(R1, TrUserData),
				       asks = lists_reverse(R2, TrUserData),
				       aggregationModulus = F@_5}.

'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(<<1:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(Rest,
								    N + 7,
								    X bsl N +
								      Acc,
								    F@_1, F@_2,
								    F@_3, F@_4,
								    F@_5,
								    TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulusStr'(<<0:1,
								  X:7,
								  Rest/binary>>,
								N, Acc, _, F@_2,
								F@_3, F@_4,
								F@_5,
								TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_seqNum'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3, F@_4,
						 F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, F@_1, NewFValue,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_bids'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_bids'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_bids'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, Prev, F@_4,
					       F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, F@_1, F@_2,
							 cons(NewFValue, Prev,
							      TrUserData),
							 F@_4, F@_5,
							 TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_asks'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookUpdate_asks'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_asks'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, Prev,
					       F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(RestF,
							 0, 0, F@_1, F@_2, F@_3,
							 cons(NewFValue, Prev,
							      TrUserData),
							 F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<0:16,
							       128, 127,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id(infinity,
							    TrUserData),
							 TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<0:16,
							       128, 255,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id('-infinity',
							    TrUserData),
							 TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<_:16,
							       1:1, _:7, _:1,
							       127:7,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id(nan, TrUserData),
							 TrUserData);
'd_field_ProtobufMarkets.OrderBookUpdate_aggregationModulus'(<<Value:32/little-float,
							       Rest/binary>>,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, _,
							     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 id(Value, TrUserData),
							 TrUserData).

'skip_varint_ProtobufMarkets.OrderBookUpdate'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookUpdate'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
'skip_varint_ProtobufMarkets.OrderBookUpdate'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    F@_5, TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5,
							 TrUserData).

'skip_group_ProtobufMarkets.OrderBookUpdate'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'skip_32_ProtobufMarkets.OrderBookUpdate'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'skip_64_ProtobufMarkets.OrderBookUpdate'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData).

'decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
							      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
									  0, 0,
									  id([],
									     TrUserData),
									  id([],
									     TrUserData),
									  id([],
									     TrUserData),
									  id([],
									     TrUserData),
									  TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<10,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<18,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
								     Z1, Z2,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<26,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								       Z1, Z2,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<29,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<34,
									Rest/binary>>,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<>>,
								      0, 0, R1,
								      R2, R3,
								      R4,
								      TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
							    =
							    lists_reverse(R1,
									  TrUserData),
							delta =
							    lists_reverse(R2,
									  TrUserData),
							remove =
							    lists_reverse(R3,
									  TrUserData),
							removeStr =
							    lists_reverse(R4,
									  TrUserData)};
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Other,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Other,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
									 0, 0,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
      26 ->
	  'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
											 0,
											 0,
											 F@_1,
											 F@_2,
											 F@_3,
											 F@_4,
											 TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									      Key
										bsr
										3,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      F@_4,
									      TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   F@_3,
									   F@_4,
									   TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<>>,
								     0, 0, R1,
								     R2, R3, R4,
								     TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
							    =
							    lists_reverse(R1,
									  TrUserData),
							delta =
							    lists_reverse(R2,
									  TrUserData),
							remove =
							    lists_reverse(R3,
									  TrUserData),
							removeStr =
							    lists_reverse(R4,
									  TrUserData)}.

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F@_1, F@_2,
								   F@_3, F@_4,
								   TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_set'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, Prev,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(RestF,
									  0, 0,
									  cons(NewFValue,
									       Prev,
									       TrUserData),
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_delta'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 Prev, F@_3,
								 F@_4,
								 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(RestF,
									  0, 0,
									  F@_1,
									  cons(NewFValue,
									       Prev,
									       TrUserData),
									  F@_3,
									  F@_4,
									  TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
								    128, 127,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id(infinity,
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
								    128, 255,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id('-infinity',
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<_:16,
								    1:1, _:7,
								    _:1, 127:7,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id(nan,
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<Value:32/little-float,
								    Rest/binary>>,
								  Z1, Z2, F@_1,
								  F@_2, Prev,
								  F@_4,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  cons(id(Value,
										  TrUserData),
									       Prev,
									       TrUserData),
									  F@_4,
									  TrUserData).

'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<1:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData)
    when N < 57 ->
    'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
								       N + 7,
								       X bsl N +
									 Acc,
								       F@_1,
								       F@_2,
								       F@_3,
								       F@_4,
								       TrUserData);
'd_pfield_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:1,
								     X:7,
								     Rest/binary>>,
								   N, Acc, F@_1,
								   F@_2, E,
								   F@_4,
								   TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(PackedBytes,
										 0,
										 0,
										 E,
										 TrUserData),
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest2,
									  0, 0,
									  F@_1,
									  F@_2,
									  NewSeq,
									  F@_4,
									  TrUserData).

'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
									   128,
									   127,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id(infinity,
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<0:16,
									   128,
									   255,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id('-infinity',
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<_:16,
									   1:1,
									   _:7,
									   _:1,
									   127:7,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id(nan,
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<Value:32/little-float,
									   Rest/binary>>,
									 Z1, Z2,
									 AccSeq,
									 TrUserData) ->
    'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(Rest,
									     Z1,
									     Z2,
									     cons(id(Value,
										     TrUserData),
										  AccSeq,
										  TrUserData),
									     TrUserData);
'd_packed_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_remove'(<<>>,
									 _, _,
									 AccSeq,
									 _) ->
    AccSeq.

'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas_removeStr'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, Prev,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(RestF,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  cons(NewFValue,
									       Prev,
									       TrUserData),
									  TrUserData).

'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<1:1,
								 _:7,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
								   Z1, Z2, F@_1,
								   F@_2, F@_3,
								   F@_4,
								   TrUserData);
'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<0:1,
								 _:7,
								 Rest/binary>>,
							       Z1, Z2, F@_1,
							       F@_2, F@_3, F@_4,
							       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<1:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									     N +
									       7,
									     X
									       bsl
									       N
									       +
									       Acc,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<0:1,
									   X:7,
									   Rest/binary>>,
									 N, Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest2,
									  0, 0,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_group_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bin,
							      FNum, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  0, Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_32_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<_:32,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'skip_64_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(<<_:64,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4,
							   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Rest,
									  Z1,
									  Z2,
									  F@_1,
									  F@_2,
									  F@_3,
									  F@_4,
									  TrUserData).

'decode_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
							      0, 0,
							      id(0.0,
								 TrUserData),
							      id([],
								 TrUserData),
							      id(0, TrUserData),
							      id(undefined,
								 TrUserData),
							      id(undefined,
								 TrUserData),
							      TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<29,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(Rest,
								      Z1, Z2,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<34,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(Rest,
									 Z1, Z2,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<40,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<10,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<18,
							    Rest/binary>>,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<>>,
							  0, 0, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  _) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
						= F@_1,
					    aggregationModulusStr = F@_2,
					    seqNum = F@_3, bids = F@_4,
					    asks = F@_5};
'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Other,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Other,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5,
							     TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      29 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    F@_5,
									    TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(Rest,
									       0,
									       0,
									       F@_1,
									       F@_2,
									       F@_3,
									       F@_4,
									       F@_5,
									       TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								TrUserData);
      10 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookDeltaUpdate'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
									     0,
									     0,
									     F@_1,
									     F@_2,
									     F@_3,
									     F@_4,
									     F@_5,
									     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
								  Key bsr 3, 0,
								  F@_1, F@_2,
								  F@_3, F@_4,
								  F@_5,
								  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookDeltaUpdate'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(<<>>,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, _) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
						= F@_1,
					    aggregationModulusStr = F@_2,
					    seqNum = F@_3, bids = F@_4,
					    asks = F@_5}.

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<0:16,
								    128, 127,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id(infinity,
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<0:16,
								    128, 255,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id('-infinity',
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<_:16,
								    1:1, _:7,
								    _:1, 127:7,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id(nan,
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulus'(<<Value:32/little-float,
								    Rest/binary>>,
								  Z1, Z2, _,
								  F@_2, F@_3,
								  F@_4, F@_5,
								  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2,
							      id(Value,
								 TrUserData),
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(<<1:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, F@_2,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(Rest,
									 N + 7,
									 X bsl N
									   +
									   Acc,
									 F@_1,
									 F@_2,
									 F@_3,
									 F@_4,
									 F@_5,
									 TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_aggregationModulusStr'(<<0:1,
								       X:7,
								       Rest/binary>>,
								     N, Acc,
								     F@_1, _,
								     F@_3, F@_4,
								     F@_5,
								     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1,
							      NewFValue, F@_3,
							      F@_4, F@_5,
							      TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_seqNum'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, _,
						      F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1, F@_2,
							      NewFValue, F@_4,
							      F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_bids'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bs,
											     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1, F@_2,
							      F@_3,
							      if Prev ==
								   undefined ->
								     NewFValue;
								 true ->
								     'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Prev,
																  NewFValue,
																  TrUserData)
							      end,
							      F@_5, TrUserData).

'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
'd_field_ProtobufMarkets.OrderBookDeltaUpdate_asks'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Bs,
											     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(RestF,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4,
							      if Prev ==
								   undefined ->
								     NewFValue;
								 true ->
								     'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Prev,
																  NewFValue,
																  TrUserData)
							      end,
							      TrUserData).

'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(<<1:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, TrUserData);
'skip_varint_ProtobufMarkets.OrderBookDeltaUpdate'(<<0:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 F@_5,
								 TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookDeltaUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest2,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData).

'skip_group_ProtobufMarkets.OrderBookDeltaUpdate'(Bin,
						  FNum, Z2, F@_1, F@_2, F@_3,
						  F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      0, Z2, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData).

'skip_32_ProtobufMarkets.OrderBookDeltaUpdate'(<<_:32,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'skip_64_ProtobufMarkets.OrderBookDeltaUpdate'(<<_:64,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookDeltaUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, TrUserData).

'decode_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
						   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
							       0, 0,
							       id(0,
								  TrUserData),
							       id(undefined,
								  TrUserData),
							       id(undefined,
								  TrUserData),
							       TrUserData).

'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<8,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3,
							      TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<18,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<26,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<>>,
							   0, 0, F@_1, F@_2,
							   F@_3, _) ->
    #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp =
						 F@_1,
					     bid = F@_2, ask = F@_3};
'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Other,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Other,
							      Z1, Z2, F@_1,
							      F@_2, F@_3,
							      TrUserData).

'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      TrUserData);
'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.OrderBookSpreadUpdate'(Rest, 0,
								0, F@_1, F@_2,
								F@_3,
								TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      F@_3,
									      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
								   Key bsr 3, 0,
								   F@_1, F@_2,
								   F@_3,
								   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.OrderBookSpreadUpdate'(Rest, 0,
								0, F@_1, F@_2,
								F@_3,
								TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(<<>>,
							  0, 0, F@_1, F@_2,
							  F@_3, _) ->
    #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp =
						 F@_1,
					     bid = F@_2, ask = F@_3}.

'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      TrUserData);
'd_field_ProtobufMarkets.OrderBookSpreadUpdate_timestamp'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, _, F@_2, F@_3,
							  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(RestF,
							       0, 0, NewFValue,
							       F@_2, F@_3,
							       TrUserData).

'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'd_field_ProtobufMarkets.OrderBookSpreadUpdate_bid'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, Prev, F@_3,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(RestF,
							       0, 0, F@_1,
							       if Prev ==
								    undefined ->
								      NewFValue;
								  true ->
								      'merge_msg_ProtobufMarkets.Order'(Prev,
													NewFValue,
													TrUserData)
							       end,
							       F@_3,
							       TrUserData).

'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'd_field_ProtobufMarkets.OrderBookSpreadUpdate_ask'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, Prev,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Order'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(RestF,
							       0, 0, F@_1, F@_2,
							       if Prev ==
								    undefined ->
								      NewFValue;
								  true ->
								      'merge_msg_ProtobufMarkets.Order'(Prev,
													NewFValue,
													TrUserData)
							       end,
							       TrUserData).

'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(<<1:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
'skip_varint_ProtobufMarkets.OrderBookSpreadUpdate'(<<0:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  F@_3,
								  TrUserData);
'skip_length_delimited_ProtobufMarkets.OrderBookSpreadUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, F@_3,
							      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest2,
							       0, 0, F@_1, F@_2,
							       F@_3,
							       TrUserData).

'skip_group_ProtobufMarkets.OrderBookSpreadUpdate'(Bin,
						   FNum, Z2, F@_1, F@_2, F@_3,
						   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       0, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'skip_32_ProtobufMarkets.OrderBookSpreadUpdate'(<<_:32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'skip_64_ProtobufMarkets.OrderBookSpreadUpdate'(<<_:64,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.OrderBookSpreadUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2, F@_3,
							       TrUserData).

'decode_msg_ProtobufMarkets.TradesUpdate'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Bin,
						      0, 0, id([], TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufMarkets.TradesUpdate_trades'(Rest, Z1,
						  Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(<<>>,
						  0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TradesUpdate'{trades =
					lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.TradesUpdate'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufMarkets.TradesUpdate'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_ProtobufMarkets.TradesUpdate'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.TradesUpdate_trades'(Rest, 0,
							0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.TradesUpdate'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.TradesUpdate'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.TradesUpdate'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.TradesUpdate'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.TradesUpdate'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.TradesUpdate'(<<>>,
						 0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TradesUpdate'{trades =
					lists_reverse(R1, TrUserData)}.

'd_field_ProtobufMarkets.TradesUpdate_trades'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.TradesUpdate_trades'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
'd_field_ProtobufMarkets.TradesUpdate_trades'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Trade'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(RestF,
						      0, 0,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

'skip_varint_ProtobufMarkets.TradesUpdate'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.TradesUpdate'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_ProtobufMarkets.TradesUpdate'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufMarkets.TradesUpdate'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.TradesUpdate'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_ProtobufMarkets.TradesUpdate'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_ProtobufMarkets.TradesUpdate'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_ProtobufMarkets.TradesUpdate'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufMarkets.TradesUpdate'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TradesUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufMarkets.Interval.OHLC'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<42,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_openStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<50,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_highStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<58,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<66,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     F@_8, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<13,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_open'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<21,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_high'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<29,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_low'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<37,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'd_field_ProtobufMarkets.Interval.OHLC_close'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8,
						  TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, _) ->
    #'ProtobufMarkets.Interval.OHLC'{openStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     closeStr = F@_4, open = F@_5, high = F@_6,
				     low = F@_7, close = F@_8};
'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData).

'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      TrUserData);
'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      42 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_openStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
      50 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_highStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
      58 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, TrUserData);
      66 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   TrUserData);
      13 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_open'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
      21 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_high'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_low'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      TrUserData);
      37 ->
	  'd_field_ProtobufMarkets.Interval.OHLC_close'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Interval.OHLC'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5, F@_6,
							    F@_7, F@_8,
							    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Interval.OHLC'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Interval.OHLC'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3, F@_4,
							   F@_5, F@_6, F@_7,
							   F@_8, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Interval.OHLC'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Interval.OHLC'(<<>>,
						  0, 0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, _) ->
    #'ProtobufMarkets.Interval.OHLC'{openStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     closeStr = F@_4, open = F@_5, high = F@_6,
				     low = F@_7, close = F@_8}.

'd_field_ProtobufMarkets.Interval.OHLC_openStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_openStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8,
						    TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_openStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, _, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_highStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_highStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8,
						    TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_highStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8,
					       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_lowStr'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _, F@_4,
					       F@_5, F@_6, F@_7, F@_8,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, F@_1, F@_2,
						       NewFValue, F@_4, F@_5,
						       F@_6, F@_7, F@_8,
						       TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, F@_8,
						     TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_closeStr'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 F@_5, F@_6, F@_7, F@_8,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       NewFValue, F@_5, F@_6,
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_open'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id(infinity, TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_open'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id('-infinity',
							  TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_open'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id(nan, TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_open'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4, _,
					     F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4,
						       id(Value, TrUserData),
						       F@_6, F@_7, F@_8,
						       TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_high'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id(infinity, TrUserData),
						       F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_high'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id('-infinity',
							  TrUserData),
						       F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_high'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id(nan, TrUserData),
						       F@_7, F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_high'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5,
						       id(Value, TrUserData),
						       F@_7, F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_low'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id(infinity, TrUserData),
						       F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_low'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id('-infinity',
							  TrUserData),
						       F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_low'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id(nan, TrUserData),
						       F@_8, TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_low'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, _, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       id(Value, TrUserData),
						       F@_8, TrUserData).

'd_field_ProtobufMarkets.Interval.OHLC_close'(<<0:16,
						128, 127, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id(infinity, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_close'(<<0:16,
						128, 255, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id('-infinity',
							  TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_close'(<<_:16,
						1:1, _:7, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id(nan, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.Interval.OHLC_close'(<<Value:32/little-float,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, _,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       id(Value, TrUserData),
						       TrUserData).

'skip_varint_ProtobufMarkets.Interval.OHLC'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8,
					    TrUserData) ->
    'skip_varint_ProtobufMarkets.Interval.OHLC'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8,
						TrUserData);
'skip_varint_ProtobufMarkets.Interval.OHLC'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8,
							  TrUserData);
'skip_length_delimited_ProtobufMarkets.Interval.OHLC'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_group_ProtobufMarkets.Interval.OHLC'(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_32_ProtobufMarkets.Interval.OHLC'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'skip_64_ProtobufMarkets.Interval.OHLC'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval.OHLC'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, TrUserData).

'decode_msg_ProtobufMarkets.Interval'(Bin,
				      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Bin, 0, 0,
						  id(0, TrUserData),
						  id(0, TrUserData),
						  id(undefined, TrUserData),
						  id([], TrUserData),
						  id([], TrUserData),
						  id(0.0, TrUserData),
						  id(0.0, TrUserData),
						  TrUserData).

'dfp_read_field_def_ProtobufMarkets.Interval'(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_closetime'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_period'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<18,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_ohlc'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<50,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeBaseStr'(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, F@_6, F@_7,
						     TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<58,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<29,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeBase'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<45,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    'd_field_ProtobufMarkets.Interval_volumeQuote'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Interval'(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, _) ->
    #'ProtobufMarkets.Interval'{closetime = F@_1,
				period = F@_2, ohlc = F@_3,
				volumeBaseStr = F@_4, volumeQuoteStr = F@_5,
				volumeBase = F@_6, volumeQuote = F@_7};
'dfp_read_field_def_ProtobufMarkets.Interval'(Other, Z1,
					      Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Interval'(Other, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData).

'dg_read_field_def_ProtobufMarkets.Interval'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Interval'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, TrUserData);
'dg_read_field_def_ProtobufMarkets.Interval'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.Interval_closetime'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7,
						       TrUserData);
      32 ->
	  'd_field_ProtobufMarkets.Interval_period'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7,
						    TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.Interval_ohlc'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, TrUserData);
      50 ->
	  'd_field_ProtobufMarkets.Interval_volumeBaseStr'(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7,
							   TrUserData);
      58 ->
	  'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7,
							    TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.Interval_volumeBase'(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData);
      45 ->
	  'd_field_ProtobufMarkets.Interval_volumeQuote'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Interval'(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       F@_6, F@_7, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Interval'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Interval'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Interval'(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7,
						      TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Interval'(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Interval'(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, _) ->
    #'ProtobufMarkets.Interval'{closetime = F@_1,
				period = F@_2, ohlc = F@_3,
				volumeBaseStr = F@_4, volumeQuoteStr = F@_5,
				volumeBase = F@_6, volumeQuote = F@_7}.

'd_field_ProtobufMarkets.Interval_closetime'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_closetime'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_closetime'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					     F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_period'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_period'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
'd_field_ProtobufMarkets.Interval_period'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_ohlc'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_ohlc'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_ohlc'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
					F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Interval.OHLC'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, F@_2,
						  if Prev == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_ProtobufMarkets.Interval.OHLC'(Prev,
												   NewFValue,
												   TrUserData)
						  end,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_volumeBaseStr'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_volumeBaseStr'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBaseStr'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, _,
						 F@_5, F@_6, F@_7,
						 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, F@_2, F@_3,
						  NewFValue, F@_5, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7,
						      TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuoteStr'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, _, F@_6, F@_7,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Interval'(RestF, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  NewFValue, F@_6, F@_7,
						  TrUserData).

'd_field_ProtobufMarkets.Interval_volumeBase'(<<0:16,
						128, 127, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5,
						  id(infinity, TrUserData),
						  F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBase'(<<0:16,
						128, 255, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5,
						  id('-infinity', TrUserData),
						  F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBase'(<<_:16,
						1:1, _:7, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, id(nan, TrUserData),
						  F@_7, TrUserData);
'd_field_ProtobufMarkets.Interval_volumeBase'(<<Value:32/little-float,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, _, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, id(Value, TrUserData),
						  F@_7, TrUserData).

'd_field_ProtobufMarkets.Interval_volumeQuote'(<<0:16,
						 128, 127, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id(infinity, TrUserData),
						  TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuote'(<<0:16,
						 128, 255, Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id('-infinity', TrUserData),
						  TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuote'(<<_:16,
						 1:1, _:7, _:1, 127:7,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id(nan, TrUserData),
						  TrUserData);
'd_field_ProtobufMarkets.Interval_volumeQuote'(<<Value:32/little-float,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, _, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6,
						  id(Value, TrUserData),
						  TrUserData).

'skip_varint_ProtobufMarkets.Interval'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData) ->
    'skip_varint_ProtobufMarkets.Interval'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, TrUserData);
'skip_varint_ProtobufMarkets.Interval'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_length_delimited_ProtobufMarkets.Interval'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Interval'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, TrUserData);
'skip_length_delimited_ProtobufMarkets.Interval'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest2, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_group_ProtobufMarkets.Interval'(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, 0,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_32_ProtobufMarkets.Interval'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'skip_64_ProtobufMarkets.Interval'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Interval'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData).

'decode_msg_ProtobufMarkets.IntervalsUpdate'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Bin,
							 0, 0,
							 id([], TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<10,
						       Rest/binary>>,
						     Z1, Z2, F@_1,
						     TrUserData) ->
    'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							Z1, Z2, F@_1,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<>>,
						     0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.IntervalsUpdate'{intervals =
					   lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Other,
						     Z1, Z2, F@_1,
						     TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(Other,
							Z1, Z2, F@_1,
							TrUserData).

'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							      0, 0, F@_1,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.IntervalsUpdate'(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.IntervalsUpdate'(Rest, 0, 0,
							  F@_1, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(Rest,
									0, 0,
									F@_1,
									TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.IntervalsUpdate'(Rest,
							     Key bsr 3, 0, F@_1,
							     TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.IntervalsUpdate'(Rest, 0, 0,
							  F@_1, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.IntervalsUpdate'(<<>>,
						    0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.IntervalsUpdate'{intervals =
					   lists_reverse(R1, TrUserData)}.

'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
'd_field_ProtobufMarkets.IntervalsUpdate_intervals'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Interval'(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(RestF,
							 0, 0,
							 cons(NewFValue, Prev,
							      TrUserData),
							 TrUserData).

'skip_varint_ProtobufMarkets.IntervalsUpdate'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.IntervalsUpdate'(Rest, Z1,
						  Z2, F@_1, TrUserData);
'skip_varint_ProtobufMarkets.IntervalsUpdate'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData).

'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    TrUserData);
'skip_length_delimited_ProtobufMarkets.IntervalsUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1,
							TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest2,
							 0, 0, F@_1,
							 TrUserData).

'skip_group_ProtobufMarkets.IntervalsUpdate'(Bin, FNum,
					     Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 0, Z2, F@_1,
							 TrUserData).

'skip_32_ProtobufMarkets.IntervalsUpdate'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData).

'skip_64_ProtobufMarkets.IntervalsUpdate'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IntervalsUpdate'(Rest,
							 Z1, Z2, F@_1,
							 TrUserData).

'decode_msg_ProtobufMarkets.SummaryUpdate'(Bin,
					   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Bin,
						       0, 0, id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id([], TrUserData),
						       id(0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       id(0.0, TrUserData),
						       TrUserData).

'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<82,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<90,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_highStr'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, F@_13, F@_14, F@_15,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<98,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<106,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<114,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<122,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, F@_3, F@_4,
							      F@_5, F@_6, F@_7,
							      F@_8, F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15,
							      TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<130,
						     1, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<21,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_last'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<29,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_high'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, F@_7, F@_8, F@_9,
						 F@_10, F@_11, F@_12, F@_13,
						 F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<37,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_low'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<45,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<77,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5, F@_6,
							F@_7, F@_8, F@_9, F@_10,
							F@_11, F@_12, F@_13,
							F@_14, F@_15,
							TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<53,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   F@_6, F@_7, F@_8,
							   F@_9, F@_10, F@_11,
							   F@_12, F@_13, F@_14,
							   F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<61,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(Rest,
							  Z1, Z2, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, TrUserData);
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(<<>>,
						   0, 0, F@_1, F@_2, F@_3, F@_4,
						   F@_5, F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, _) ->
    #'ProtobufMarkets.SummaryUpdate'{lastStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     volumeBaseStr = F@_4,
				     volumeQuoteStr = F@_5,
				     changeAbsoluteStr = F@_6,
				     changePercentStr = F@_7, numTrades = F@_8,
				     last = F@_9, high = F@_10, low = F@_11,
				     volumeBase = F@_12, volumeQuote = F@_13,
				     changeAbsolute = F@_14,
				     changePercent = F@_15};
'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, F@_12,
						   F@_13, F@_14, F@_15,
						   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(Other,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData).

'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      82 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
      90 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_highStr'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
      98 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 F@_4, F@_5, F@_6, F@_7,
							 F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15,
							 TrUserData);
      106 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								F@_12, F@_13,
								F@_14, F@_15,
								TrUserData);
      114 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10, F@_11,
								 F@_12, F@_13,
								 F@_14, F@_15,
								 TrUserData);
      122 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    F@_6, F@_7,
								    F@_8, F@_9,
								    F@_10,
								    F@_11,
								    F@_12,
								    F@_13,
								    F@_14,
								    F@_15,
								    TrUserData);
      130 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   F@_6, F@_7,
								   F@_8, F@_9,
								   F@_10, F@_11,
								   F@_12, F@_13,
								   F@_14, F@_15,
								   TrUserData);
      64 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    F@_6, F@_7, F@_8,
							    F@_9, F@_10, F@_11,
							    F@_12, F@_13, F@_14,
							    F@_15, TrUserData);
      21 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_last'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_high'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, F@_7, F@_8,
						       F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
      37 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_low'(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
      45 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4, F@_5,
							     F@_6, F@_7, F@_8,
							     F@_9, F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     TrUserData);
      77 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7, F@_8,
							      F@_9, F@_10,
							      F@_11, F@_12,
							      F@_13, F@_14,
							      F@_15,
							      TrUserData);
      53 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 F@_6, F@_7,
								 F@_8, F@_9,
								 F@_10, F@_11,
								 F@_12, F@_13,
								 F@_14, F@_15,
								 TrUserData);
      61 ->
	  'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(Rest,
								0, 0, F@_1,
								F@_2, F@_3,
								F@_4, F@_5,
								F@_6, F@_7,
								F@_8, F@_9,
								F@_10, F@_11,
								F@_12, F@_13,
								F@_14, F@_15,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.SummaryUpdate'(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5, F@_6,
							    F@_7, F@_8, F@_9,
							    F@_10, F@_11, F@_12,
							    F@_13, F@_14, F@_15,
							    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.SummaryUpdate'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13, F@_14,
							F@_15, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      F@_3,
								      F@_4,
								      F@_5,
								      F@_6,
								      F@_7,
								      F@_8,
								      F@_9,
								      F@_10,
								      F@_11,
								      F@_12,
								      F@_13,
								      F@_14,
								      F@_15,
								      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.SummaryUpdate'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, F@_3, F@_4,
							   F@_5, F@_6, F@_7,
							   F@_8, F@_9, F@_10,
							   F@_11, F@_12, F@_13,
							   F@_14, F@_15,
							   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.SummaryUpdate'(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							F@_12, F@_13, F@_14,
							F@_15, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.SummaryUpdate'(<<>>,
						  0, 0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, F@_8, F@_9,
						  F@_10, F@_11, F@_12, F@_13,
						  F@_14, F@_15, _) ->
    #'ProtobufMarkets.SummaryUpdate'{lastStr = F@_1,
				     highStr = F@_2, lowStr = F@_3,
				     volumeBaseStr = F@_4,
				     volumeQuoteStr = F@_5,
				     changeAbsoluteStr = F@_6,
				     changePercentStr = F@_7, numTrades = F@_8,
				     last = F@_9, high = F@_10, low = F@_11,
				     volumeBase = F@_12, volumeQuote = F@_13,
				     changeAbsolute = F@_14,
				     changePercent = F@_15}.

'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_lastStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, _, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, NewFValue, F@_2,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_highStr'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_highStr'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    F@_10, F@_11, F@_12, F@_13,
						    F@_14, F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_highStr'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, NewFValue,
						       F@_3, F@_4, F@_5, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5, F@_6,
						   F@_7, F@_8, F@_9, F@_10,
						   F@_11, F@_12, F@_13, F@_14,
						   F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_lowStr'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _, F@_4,
					       F@_5, F@_6, F@_7, F@_8, F@_9,
					       F@_10, F@_11, F@_12, F@_13,
					       F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2,
						       NewFValue, F@_4, F@_5,
						       F@_6, F@_7, F@_8, F@_9,
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBaseStr'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      _, F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       NewFValue, F@_5, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11, F@_12,
							   F@_13, F@_14, F@_15,
							   TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuoteStr'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2, F@_3,
						       F@_4, _, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, NewFValue, F@_6,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5,
							  F@_6, F@_7, F@_8,
							  F@_9, F@_10, F@_11,
							  F@_12, F@_13, F@_14,
							  F@_15, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2, F@_3,
							      F@_4, F@_5, F@_6,
							      F@_7, F@_8, F@_9,
							      F@_10, F@_11,
							      F@_12, F@_13,
							      F@_14, F@_15,
							      TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsoluteStr'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  F@_3, F@_4, F@_5, _,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, NewFValue,
						       F@_7, F@_8, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 F@_7, F@_8, F@_9,
							 F@_10, F@_11, F@_12,
							 F@_13, F@_14, F@_15,
							 TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5, F@_6,
							     F@_7, F@_8, F@_9,
							     F@_10, F@_11,
							     F@_12, F@_13,
							     F@_14, F@_15,
							     TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercentStr'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 F@_3, F@_4, F@_5, F@_6,
							 _, F@_8, F@_9, F@_10,
							 F@_11, F@_12, F@_13,
							 F@_14, F@_15,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6,
						       NewFValue, F@_8, F@_9,
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, F@_8,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_numTrades'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, F@_6, F@_7, _,
						  F@_9, F@_10, F@_11, F@_12,
						  F@_13, F@_14, F@_15,
						  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(RestF,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       NewFValue, F@_9, F@_10,
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_last'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id(infinity, TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_last'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id('-infinity',
							  TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_last'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id(nan, TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_last'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, _, F@_10,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8,
						       id(Value, TrUserData),
						       F@_10, F@_11, F@_12,
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_high'(<<0:16,
					       128, 127, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id(infinity, TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_high'(<<0:16,
					       128, 255, Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id('-infinity',
							  TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_high'(<<_:16,
					       1:1, _:7, _:1, 127:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id(nan, TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_high'(<<Value:32/little-float,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, F@_7, F@_8, F@_9, _,
					     F@_11, F@_12, F@_13, F@_14, F@_15,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9,
						       id(Value, TrUserData),
						       F@_11, F@_12, F@_13,
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_low'(<<0:16, 128,
					      127, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id(infinity, TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_low'(<<0:16, 128,
					      255, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id('-infinity',
							  TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_low'(<<_:16, 1:1,
					      _:7, _:1, 127:7, Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id(nan, TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_low'(<<Value:32/little-float,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    _, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10,
						       id(Value, TrUserData),
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<0:16,
						     128, 127, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id(infinity, TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<0:16,
						     128, 255, Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id('-infinity',
							  TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<_:16,
						     1:1, _:7, _:1, 127:7,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id(nan, TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeBase'(<<Value:32/little-float,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, F@_6, F@_7, F@_8,
						   F@_9, F@_10, F@_11, _, F@_13,
						   F@_14, F@_15, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       id(Value, TrUserData),
						       F@_13, F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<0:16,
						      128, 127, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id(infinity, TrUserData),
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<0:16,
						      128, 255, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id('-infinity',
							  TrUserData),
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<_:16,
						      1:1, _:7, _:1, 127:7,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id(nan, TrUserData),
						       F@_14, F@_15,
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_volumeQuote'(<<Value:32/little-float,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    F@_8, F@_9, F@_10, F@_11,
						    F@_12, _, F@_14, F@_15,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12,
						       id(Value, TrUserData),
						       F@_14, F@_15,
						       TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<0:16,
							 128, 127,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id(infinity, TrUserData),
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<0:16,
							 128, 255,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id('-infinity',
							  TrUserData),
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<_:16,
							 1:1, _:7, _:1, 127:7,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id(nan, TrUserData),
						       F@_15, TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changeAbsolute'(<<Value:32/little-float,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, _, F@_15,
						       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13,
						       id(Value, TrUserData),
						       F@_15, TrUserData).

'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<0:16,
							128, 127, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id(infinity, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<0:16,
							128, 255, Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id('-infinity',
							  TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<_:16,
							1:1, _:7, _:1, 127:7,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id(nan, TrUserData),
						       TrUserData);
'd_field_ProtobufMarkets.SummaryUpdate_changePercent'(<<Value:32/little-float,
							Rest/binary>>,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14, _,
						      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       id(Value, TrUserData),
						       TrUserData).

'skip_varint_ProtobufMarkets.SummaryUpdate'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'skip_varint_ProtobufMarkets.SummaryUpdate'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData);
'skip_varint_ProtobufMarkets.SummaryUpdate'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  F@_10, F@_11, F@_12,
							  F@_13, F@_14, F@_15,
							  TrUserData);
'skip_length_delimited_ProtobufMarkets.SummaryUpdate'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2, F@_3,
						      F@_4, F@_5, F@_6, F@_7,
						      F@_8, F@_9, F@_10, F@_11,
						      F@_12, F@_13, F@_14,
						      F@_15, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest2,
						       0, 0, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_group_ProtobufMarkets.SummaryUpdate'(Bin, FNum,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, F@_14, F@_15,
					   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       0, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_32_ProtobufMarkets.SummaryUpdate'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15,
					TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'skip_64_ProtobufMarkets.SummaryUpdate'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, F@_14, F@_15,
					TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SummaryUpdate'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, F@_5, F@_6, F@_7,
						       F@_8, F@_9, F@_10, F@_11,
						       F@_12, F@_13, F@_14,
						       F@_15, TrUserData).

'decode_msg_ProtobufMarkets.SparklineUpdate'(Bin,
					     TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Bin,
							 0, 0,
							 id(0, TrUserData),
							 id(0.0, TrUserData),
							 id([], TrUserData),
							 TrUserData).

'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<16,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufMarkets.SparklineUpdate_time'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<29,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufMarkets.SparklineUpdate_price'(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData);
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<34,
						       Rest/binary>>,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(<<>>,
						     0, 0, F@_1, F@_2, F@_3,
						     _) ->
    #'ProtobufMarkets.SparklineUpdate'{time = F@_1,
				       price = F@_2, priceStr = F@_3};
'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(Other,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData).

'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  'd_field_ProtobufMarkets.SparklineUpdate_time'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      29 ->
	  'd_field_ProtobufMarkets.SparklineUpdate_price'(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.SparklineUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.SparklineUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									F@_3,
									TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.SparklineUpdate'(Rest,
							     Key bsr 3, 0, F@_1,
							     F@_2, F@_3,
							     TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.SparklineUpdate'(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.SparklineUpdate'(<<>>,
						    0, 0, F@_1, F@_2, F@_3,
						    _) ->
    #'ProtobufMarkets.SparklineUpdate'{time = F@_1,
				       price = F@_2, priceStr = F@_3}.

'd_field_ProtobufMarkets.SparklineUpdate_time'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SparklineUpdate_time'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_time'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, F@_2, F@_3,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(RestF,
							 0, 0, NewFValue, F@_2,
							 F@_3, TrUserData).

'd_field_ProtobufMarkets.SparklineUpdate_price'(<<0:16,
						  128, 127, Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id(infinity,
							    TrUserData),
							 F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_price'(<<0:16,
						  128, 255, Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id('-infinity',
							    TrUserData),
							 F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_price'(<<_:16,
						  1:1, _:7, _:1, 127:7,
						  Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id(nan, TrUserData),
							 F@_3, TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_price'(<<Value:32/little-float,
						  Rest/binary>>,
						Z1, Z2, F@_1, _, F@_3,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1,
							 id(Value, TrUserData),
							 F@_3, TrUserData).

'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
'd_field_ProtobufMarkets.SparklineUpdate_priceStr'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, _,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(RestF,
							 0, 0, F@_1, F@_2,
							 NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.SparklineUpdate'(<<1:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'skip_varint_ProtobufMarkets.SparklineUpdate'(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
'skip_varint_ProtobufMarkets.SparklineUpdate'(<<0:1,
						_:7, Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3,
							    TrUserData);
'skip_length_delimited_ProtobufMarkets.SparklineUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest2,
							 0, 0, F@_1, F@_2, F@_3,
							 TrUserData).

'skip_group_ProtobufMarkets.SparklineUpdate'(Bin, FNum,
					     Z2, F@_1, F@_2, F@_3,
					     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 0, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_32_ProtobufMarkets.SparklineUpdate'(<<_:32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'skip_64_ProtobufMarkets.SparklineUpdate'(<<_:64,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.SparklineUpdate'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, TrUserData).

'decode_msg_ProtobufMarkets.Index'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Bin, 0, 0,
					       id(0, TrUserData),
					       id([], TrUserData),
					       id([], TrUserData),
					       id(false, TrUserData),
					       id(0, TrUserData),
					       id(0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Index'(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_id'(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_symbol'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_indexType'(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_cwIndex'(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<40,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_exchangeId'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<48,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'd_field_ProtobufMarkets.Index_instrumentId'(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, F@_6, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Index'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   _) ->
    #'ProtobufMarkets.Index'{id = F@_1, symbol = F@_2,
			     indexType = F@_3, cwIndex = F@_4,
			     exchangeId = F@_5, instrumentId = F@_6};
'dfp_read_field_def_ProtobufMarkets.Index'(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Index'(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData).

'dg_read_field_def_ProtobufMarkets.Index'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Index'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
'dg_read_field_def_ProtobufMarkets.Index'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.Index_id'(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.Index_symbol'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.Index_indexType'(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      32 ->
	  'd_field_ProtobufMarkets.Index_cwIndex'(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, TrUserData);
      40 ->
	  'd_field_ProtobufMarkets.Index_exchangeId'(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, TrUserData);
      48 ->
	  'd_field_ProtobufMarkets.Index_instrumentId'(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Index'(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Index'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Index'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Index'(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Index'(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Index'(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  _) ->
    #'ProtobufMarkets.Index'{id = F@_1, symbol = F@_2,
			     indexType = F@_3, cwIndex = F@_4,
			     exchangeId = F@_5, instrumentId = F@_6}.

'd_field_ProtobufMarkets.Index_id'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_id'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_id'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_symbol'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_symbol'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_symbol'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_indexType'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_indexType'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_indexType'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_cwIndex'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_cwIndex'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_cwIndex'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
					TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_exchangeId'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_exchangeId'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, TrUserData);
'd_field_ProtobufMarkets.Index_exchangeId'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					   F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       NewFValue, F@_6, TrUserData).

'd_field_ProtobufMarkets.Index_instrumentId'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, F@_6, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Index_instrumentId'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
'd_field_ProtobufMarkets.Index_instrumentId'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Index'(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       NewFValue, TrUserData).

'skip_varint_ProtobufMarkets.Index'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    'skip_varint_ProtobufMarkets.Index'(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
'skip_varint_ProtobufMarkets.Index'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_length_delimited_ProtobufMarkets.Index'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Index'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  TrUserData);
'skip_length_delimited_ProtobufMarkets.Index'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_group_ProtobufMarkets.Index'(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_32_ProtobufMarkets.Index'(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'skip_64_ProtobufMarkets.Index'(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Index'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData).

'decode_msg_ProtobufMarkets.IndexUpdateMessage'(Bin,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Bin,
							    0, 0,
							    id(undefined,
							       TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<10,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_index'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<18,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Rest,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<26,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<34,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<42,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.IndexUpdateMessage'{index = F@_1,
					  'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Other,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_index'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
      42 ->
	  'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.IndexUpdateMessage'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.IndexUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.IndexUpdateMessage'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.IndexUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.IndexUpdateMessage'(<<>>,
						       0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.IndexUpdateMessage'{index = F@_1,
					  'Update' = F@_2}.

'd_field_ProtobufMarkets.IndexUpdateMessage_index'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_index'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_index'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, F@_2,
						   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Index'(Bs,
								  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0,
							    if Prev ==
								 undefined ->
								   NewFValue;
							       true ->
								   'merge_msg_ProtobufMarkets.Index'(Prev,
												     NewFValue,
												     TrUserData)
							    end,
							    F@_2, TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_tickerUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, Prev,
							  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.TickerUpdate'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({tickerUpdate,
								      NewFValue},
								     TrUserData);
							      {tickerUpdate,
							       MVPrev} ->
								  id({tickerUpdate,
								      'merge_msg_ProtobufMarkets.TickerUpdate'(MVPrev,
													       NewFValue,
													       TrUserData)},
								     TrUserData);
							      _ ->
								  id({tickerUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_intervalsUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.IntervalsUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({intervalsUpdate,
								      NewFValue},
								     TrUserData);
							      {intervalsUpdate,
							       MVPrev} ->
								  id({intervalsUpdate,
								      'merge_msg_ProtobufMarkets.IntervalsUpdate'(MVPrev,
														  NewFValue,
														  TrUserData)},
								     TrUserData);
							      _ ->
								  id({intervalsUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_summaryUpdate'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, Prev,
							   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SummaryUpdate'(Bs,
									  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({summaryUpdate,
								      NewFValue},
								     TrUserData);
							      {summaryUpdate,
							       MVPrev} ->
								  id({summaryUpdate,
								      'merge_msg_ProtobufMarkets.SummaryUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								     TrUserData);
							      _ ->
								  id({summaryUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_ProtobufMarkets.IndexUpdateMessage_sparklineUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.SparklineUpdate'(Bs,
									    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({sparklineUpdate,
								      NewFValue},
								     TrUserData);
							      {sparklineUpdate,
							       MVPrev} ->
								  id({sparklineUpdate,
								      'merge_msg_ProtobufMarkets.SparklineUpdate'(MVPrev,
														  NewFValue,
														  TrUserData)},
								     TrUserData);
							      _ ->
								  id({sparklineUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'skip_varint_ProtobufMarkets.IndexUpdateMessage'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'skip_varint_ProtobufMarkets.IndexUpdateMessage'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'skip_varint_ProtobufMarkets.IndexUpdateMessage'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'skip_length_delimited_ProtobufMarkets.IndexUpdateMessage'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest2,
							    0, 0, F@_1, F@_2,
							    TrUserData).

'skip_group_ProtobufMarkets.IndexUpdateMessage'(Bin,
						FNum, Z2, F@_1, F@_2,
						TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    0, Z2, F@_1, F@_2,
							    TrUserData).

'skip_32_ProtobufMarkets.IndexUpdateMessage'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_64_ProtobufMarkets.IndexUpdateMessage'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.IndexUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'decode_msg_ProtobufMarkets.TickerUpdate'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Bin,
						      0, 0, id([], TrUserData),
						      TrUserData).

'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_ProtobufMarkets.TickerUpdate_tickers'(Rest, Z1,
						   Z2, F@_1, TrUserData);
'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(<<>>,
						  0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TickerUpdate'{tickers =
					lists_reverse(R1, TrUserData)};
'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.TickerUpdate'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_ProtobufMarkets.TickerUpdate'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_ProtobufMarkets.TickerUpdate'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.TickerUpdate_tickers'(Rest, 0,
							 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.TickerUpdate'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.TickerUpdate'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.TickerUpdate'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.TickerUpdate'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.TickerUpdate'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.TickerUpdate'(<<>>,
						 0, 0, R1, TrUserData) ->
    #'ProtobufMarkets.TickerUpdate'{tickers =
					lists_reverse(R1, TrUserData)}.

'd_field_ProtobufMarkets.TickerUpdate_tickers'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.TickerUpdate_tickers'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
'd_field_ProtobufMarkets.TickerUpdate_tickers'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.Ticker'(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(RestF,
						      0, 0,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

'skip_varint_ProtobufMarkets.TickerUpdate'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.TickerUpdate'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_ProtobufMarkets.TickerUpdate'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_ProtobufMarkets.TickerUpdate'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.TickerUpdate'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_ProtobufMarkets.TickerUpdate'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_ProtobufMarkets.TickerUpdate'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_ProtobufMarkets.TickerUpdate'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_ProtobufMarkets.TickerUpdate'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.TickerUpdate'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_ProtobufMarkets.Ticker'(Bin, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Bin, 0, 0,
						id([], TrUserData),
						id(0, TrUserData),
						id(0, TrUserData), TrUserData).

'dfp_read_field_def_ProtobufMarkets.Ticker'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufMarkets.Ticker_value'(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Ticker'(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufMarkets.Ticker_timestamp'(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
'dfp_read_field_def_ProtobufMarkets.Ticker'(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    'd_field_ProtobufMarkets.Ticker_timestampNano'(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
'dfp_read_field_def_ProtobufMarkets.Ticker'(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #'ProtobufMarkets.Ticker'{value = F@_1,
			      timestamp = F@_2, timestampNano = F@_3};
'dfp_read_field_def_ProtobufMarkets.Ticker'(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.Ticker'(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

'dg_read_field_def_ProtobufMarkets.Ticker'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.Ticker'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'dg_read_field_def_ProtobufMarkets.Ticker'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.Ticker_value'(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.Ticker_timestamp'(Rest, 0, 0,
						     F@_1, F@_2, F@_3,
						     TrUserData);
      24 ->
	  'd_field_ProtobufMarkets.Ticker_timestampNano'(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.Ticker'(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.Ticker'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.Ticker'(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.Ticker'(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.Ticker'(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.Ticker'(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #'ProtobufMarkets.Ticker'{value = F@_1,
			      timestamp = F@_2, timestampNano = F@_3}.

'd_field_ProtobufMarkets.Ticker_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Ticker_value'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
'd_field_ProtobufMarkets.Ticker_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.Ticker'(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

'd_field_ProtobufMarkets.Ticker_timestamp'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Ticker_timestamp'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
'd_field_ProtobufMarkets.Ticker_timestamp'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Ticker'(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

'd_field_ProtobufMarkets.Ticker_timestampNano'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.Ticker_timestampNano'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'd_field_ProtobufMarkets.Ticker_timestampNano'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, _,
					       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.Ticker'(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

'skip_varint_ProtobufMarkets.Ticker'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'skip_varint_ProtobufMarkets.Ticker'(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
'skip_varint_ProtobufMarkets.Ticker'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_length_delimited_ProtobufMarkets.Ticker'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.Ticker'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
'skip_length_delimited_ProtobufMarkets.Ticker'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

'skip_group_ProtobufMarkets.Ticker'(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

'skip_32_ProtobufMarkets.Ticker'(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'skip_64_ProtobufMarkets.Ticker'(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.Ticker'(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

'decode_msg_ProtobufMarkets.PairUpdateMessage'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Bin,
							   0, 0,
							   id(0, TrUserData),
							   id(undefined,
							      TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<8,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_pair'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<18,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<26,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<34,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<>>,
						       0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairUpdateMessage'{pair = F@_1,
					 'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(Other,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_pair'(Rest,
							   0, 0, F@_1, F@_2,
							   TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairUpdateMessage'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairUpdateMessage'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairUpdateMessage'(Rest,
							       Key bsr 3, 0,
							       F@_1, F@_2,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairUpdateMessage'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<>>,
						      0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairUpdateMessage'{pair = F@_1,
					 'Update' = F@_2}.

'd_field_ProtobufMarkets.PairUpdateMessage_pair'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_pair'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_pair'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, NewFValue,
							   F@_2, TrUserData).

'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, Prev,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairVwapUpdate'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, F@_1,
							   case Prev of
							     undefined ->
								 id({vwapUpdate,
								     NewFValue},
								    TrUserData);
							     {vwapUpdate,
							      MVPrev} ->
								 id({vwapUpdate,
								     'merge_msg_ProtobufMarkets.PairVwapUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								    TrUserData);
							     _ ->
								 id({vwapUpdate,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairPerformanceUpdate'(Bs,
										  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, F@_1,
							   case Prev of
							     undefined ->
								 id({performanceUpdate,
								     NewFValue},
								    TrUserData);
							     {performanceUpdate,
							      MVPrev} ->
								 id({performanceUpdate,
								     'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(MVPrev,
														       NewFValue,
														       TrUserData)},
								    TrUserData);
							     _ ->
								 id({performanceUpdate,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairTrendlineUpdate'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, F@_1,
							   case Prev of
							     undefined ->
								 id({trendlineUpdate,
								     NewFValue},
								    TrUserData);
							     {trendlineUpdate,
							      MVPrev} ->
								 id({trendlineUpdate,
								     'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(MVPrev,
														     NewFValue,
														     TrUserData)},
								    TrUserData);
							     _ ->
								 id({trendlineUpdate,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'skip_varint_ProtobufMarkets.PairUpdateMessage'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'skip_varint_ProtobufMarkets.PairUpdateMessage'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'skip_varint_ProtobufMarkets.PairUpdateMessage'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest2,
							   0, 0, F@_1, F@_2,
							   TrUserData).

'skip_group_ProtobufMarkets.PairUpdateMessage'(Bin,
					       FNum, Z2, F@_1, F@_2,
					       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   0, Z2, F@_1, F@_2,
							   TrUserData).

'skip_32_ProtobufMarkets.PairUpdateMessage'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'skip_64_ProtobufMarkets.PairUpdateMessage'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'decode_msg_ProtobufMarkets.PairVwapUpdate'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Bin,
							0, 0,
							id(0.0, TrUserData),
							id(0, TrUserData),
							TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<9,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<16,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<>>,
						    0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairVwapUpdate'{vwap = F@_1,
				      timestamp = F@_2};
'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairVwapUpdate'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairVwapUpdate'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairVwapUpdate'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairVwapUpdate'(Rest, 0, 0,
							 F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairVwapUpdate'{vwap = F@_1,
				      timestamp = F@_2}.

'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<0:48,
						240, 127, Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id(infinity,
							   TrUserData),
							F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<0:48,
						240, 255, Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id('-infinity',
							   TrUserData),
							F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<_:48,
						15:4, _:4, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id(nan, TrUserData),
							F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<Value:64/little-float,
						Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id(Value, TrUserData),
							F@_2, TrUserData).

'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(RestF,
							0, 0, F@_1, NewFValue,
							TrUserData).

'skip_varint_ProtobufMarkets.PairVwapUpdate'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_ProtobufMarkets.PairVwapUpdate'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'skip_varint_ProtobufMarkets.PairVwapUpdate'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest2,
							0, 0, F@_1, F@_2,
							TrUserData).

'skip_group_ProtobufMarkets.PairVwapUpdate'(Bin, FNum,
					    Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							0, Z2, F@_1, F@_2,
							TrUserData).

'skip_32_ProtobufMarkets.PairVwapUpdate'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_64_ProtobufMarkets.PairVwapUpdate'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'decode_msg_ProtobufMarkets.PairPerformanceUpdate'(Bin,
						   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Bin,
							       0, 0,
							       id([],
								  TrUserData),
							       id(0.0,
								  TrUserData),
							       TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<10,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<17,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<>>,
							   0, 0, F@_1, F@_2,
							   _) ->
    #'ProtobufMarkets.PairPerformanceUpdate'{window = F@_1,
					     performance = F@_2};
'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Other,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData).

'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      17 ->
	  'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairPerformanceUpdate'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairPerformanceUpdate'(Rest,
								   Key bsr 3, 0,
								   F@_1, F@_2,
								   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairPerformanceUpdate'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<>>,
							  0, 0, F@_1, F@_2,
							  _) ->
    #'ProtobufMarkets.PairPerformanceUpdate'{window = F@_1,
					     performance = F@_2}.

'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F@_2,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(RestF,
							       0, 0, NewFValue,
							       F@_2,
							       TrUserData).

'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<0:48,
							      240, 127,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id(infinity,
								  TrUserData),
							       TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<0:48,
							      240, 255,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id('-infinity',
								  TrUserData),
							       TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<_:48,
							      15:4, _:4, _:1,
							      127:7,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id(nan,
								  TrUserData),
							       TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<Value:64/little-float,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id(Value,
								  TrUserData),
							       TrUserData).

'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(<<1:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(<<0:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2,
							      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest2,
							       0, 0, F@_1, F@_2,
							       TrUserData).

'skip_group_ProtobufMarkets.PairPerformanceUpdate'(Bin,
						   FNum, Z2, F@_1, F@_2,
						   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       0, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_32_ProtobufMarkets.PairPerformanceUpdate'(<<_:32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_64_ProtobufMarkets.PairPerformanceUpdate'(<<_:64,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'decode_msg_ProtobufMarkets.PairTrendlineUpdate'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Bin,
							     0, 0,
							     id([], TrUserData),
							     id(0, TrUserData),
							     id([], TrUserData),
							     id([], TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<16,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<26,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<34,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<>>,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, _) ->
    #'ProtobufMarkets.PairTrendlineUpdate'{window = F@_1,
					   time = F@_2, price = F@_3,
					   volume = F@_4};
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Other,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    TrUserData);
'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairTrendlineUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairTrendlineUpdate'(Rest,
								 Key bsr 3, 0,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairTrendlineUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<>>,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, _) ->
    #'ProtobufMarkets.PairTrendlineUpdate'{window = F@_1,
					   time = F@_2, price = F@_3,
					   volume = F@_4}.

'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, NewFValue,
							     F@_2, F@_3, F@_4,
							     TrUserData).

'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _, F@_3, F@_4,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, F@_1,
							     NewFValue, F@_3,
							     F@_4, TrUserData).

'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, _, F@_4,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, F@_1, F@_2,
							     NewFValue, F@_4,
							     TrUserData).

'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, F@_1, F@_2,
							     F@_3, NewFValue,
							     TrUserData).

'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData);
'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest2,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_group_ProtobufMarkets.PairTrendlineUpdate'(Bin,
						 FNum, Z2, F@_1, F@_2, F@_3,
						 F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     0, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_32_ProtobufMarkets.PairTrendlineUpdate'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_64_ProtobufMarkets.PairTrendlineUpdate'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'decode_msg_ProtobufMarkets.AssetUpdateMessage'(Bin,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Bin,
							    0, 0,
							    id(0, TrUserData),
							    id(undefined,
							       TrUserData),
							    TrUserData).

'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(<<8,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.AssetUpdateMessage_asset'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(<<18,
							  Rest/binary>>,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'd_field_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(Rest,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData);
'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(<<>>,
							0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.AssetUpdateMessage'{asset = F@_1,
					  'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Other,
							Z1, Z2, F@_1, F@_2,
							TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'dg_read_field_def_ProtobufMarkets.AssetUpdateMessage'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'dg_read_field_def_ProtobufMarkets.AssetUpdateMessage'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.AssetUpdateMessage_asset'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.AssetUpdateMessage'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.AssetUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.AssetUpdateMessage'(Rest,
									   0, 0,
									   F@_1,
									   F@_2,
									   TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.AssetUpdateMessage'(Rest,
								Key bsr 3, 0,
								F@_1, F@_2,
								TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.AssetUpdateMessage'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.AssetUpdateMessage'(<<>>,
						       0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.AssetUpdateMessage'{asset = F@_1,
					  'Update' = F@_2}.

'd_field_ProtobufMarkets.AssetUpdateMessage_asset'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.AssetUpdateMessage_asset'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_ProtobufMarkets.AssetUpdateMessage_asset'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, _, F@_2,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(RestF,
							    0, 0, NewFValue,
							    F@_2, TrUserData).

'd_field_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'd_field_ProtobufMarkets.AssetUpdateMessage_usdVolumeUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, Prev,
							     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Bs,
										 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(RestF,
							    0, 0, F@_1,
							    case Prev of
							      undefined ->
								  id({usdVolumeUpdate,
								      NewFValue},
								     TrUserData);
							      {usdVolumeUpdate,
							       MVPrev} ->
								  id({usdVolumeUpdate,
								      'merge_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(MVPrev,
														       NewFValue,
														       TrUserData)},
								     TrUserData);
							      _ ->
								  id({usdVolumeUpdate,
								      NewFValue},
								     TrUserData)
							    end,
							    TrUserData).

'skip_varint_ProtobufMarkets.AssetUpdateMessage'(<<1:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'skip_varint_ProtobufMarkets.AssetUpdateMessage'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'skip_varint_ProtobufMarkets.AssetUpdateMessage'(<<0:1,
						   _:7, Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_length_delimited_ProtobufMarkets.AssetUpdateMessage'(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.AssetUpdateMessage'(Rest,
							       N + 7,
							       X bsl N + Acc,
							       F@_1, F@_2,
							       TrUserData);
'skip_length_delimited_ProtobufMarkets.AssetUpdateMessage'(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, F@_1, F@_2,
							   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Rest2,
							    0, 0, F@_1, F@_2,
							    TrUserData).

'skip_group_ProtobufMarkets.AssetUpdateMessage'(Bin,
						FNum, Z2, F@_1, F@_2,
						TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Rest,
							    0, Z2, F@_1, F@_2,
							    TrUserData).

'skip_32_ProtobufMarkets.AssetUpdateMessage'(<<_:32,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'skip_64_ProtobufMarkets.AssetUpdateMessage'(<<_:64,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUpdateMessage'(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData).

'decode_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Bin,
						  TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Bin,
							      0, 0,
							      id([],
								 TrUserData),
							      TrUserData).

'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(<<10,
							    Rest/binary>>,
							  Z1, Z2, F@_1,
							  TrUserData) ->
    'd_field_ProtobufMarkets.AssetUSDVolumeUpdate_volume'(Rest,
							  Z1, Z2, F@_1,
							  TrUserData);
'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(<<>>,
							  0, 0, F@_1, _) ->
    #'ProtobufMarkets.AssetUSDVolumeUpdate'{volume = F@_1};
'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Other,
							  Z1, Z2, F@_1,
							  TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Other,
							     Z1, Z2, F@_1,
							     TrUserData).

'dg_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, TrUserData);
'dg_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1,
							 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.AssetUSDVolumeUpdate_volume'(Rest,
								0, 0, F@_1,
								TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
									     0,
									     0,
									     F@_1,
									     TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
								  Key bsr 3, 0,
								  F@_1,
								  TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest, 0,
							       0, F@_1,
							       TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(<<>>,
							 0, 0, F@_1, _) ->
    #'ProtobufMarkets.AssetUSDVolumeUpdate'{volume = F@_1}.

'd_field_ProtobufMarkets.AssetUSDVolumeUpdate_volume'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.AssetUSDVolumeUpdate_volume'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
'd_field_ProtobufMarkets.AssetUSDVolumeUpdate_volume'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(RestF,
							      0, 0, NewFValue,
							      TrUserData).

'skip_varint_ProtobufMarkets.AssetUSDVolumeUpdate'(<<1:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
'skip_varint_ProtobufMarkets.AssetUSDVolumeUpdate'(<<0:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData).

'skip_length_delimited_ProtobufMarkets.AssetUSDVolumeUpdate'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1,
							     TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1,
								 TrUserData);
'skip_length_delimited_ProtobufMarkets.AssetUSDVolumeUpdate'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1,
							     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest2,
							      0, 0, F@_1,
							      TrUserData).

'skip_group_ProtobufMarkets.AssetUSDVolumeUpdate'(Bin,
						  FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
							      0, Z2, F@_1,
							      TrUserData).

'skip_32_ProtobufMarkets.AssetUSDVolumeUpdate'(<<_:32,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData).

'skip_64_ProtobufMarkets.AssetUSDVolumeUpdate'(<<_:64,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.AssetUSDVolumeUpdate'(Rest,
							      Z1, Z2, F@_1,
							      TrUserData).

'd_enum_ProtobufBroker.FundingType'(0) -> 'Spot';
'd_enum_ProtobufBroker.FundingType'(1) -> 'Margin';
'd_enum_ProtobufBroker.FundingType'(V) -> V.

'd_enum_ProtobufBroker.PrivateOrder.Type'(0) ->
    'Market';
'd_enum_ProtobufBroker.PrivateOrder.Type'(1) -> 'Limit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(2) ->
    'StopLoss';
'd_enum_ProtobufBroker.PrivateOrder.Type'(3) ->
    'StopLossLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(4) ->
    'TakeProfit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(5) ->
    'TakeProfitLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(6) ->
    'StopLossTakeProfit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(7) ->
    'StopLossTakeProfitLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(8) ->
    'TrailingStopLoss';
'd_enum_ProtobufBroker.PrivateOrder.Type'(9) ->
    'TrailingStopLossLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(10) ->
    'StopLossAndLimit';
'd_enum_ProtobufBroker.PrivateOrder.Type'(11) ->
    'FillOrKill';
'd_enum_ProtobufBroker.PrivateOrder.Type'(12) ->
    'SettlePosition';
'd_enum_ProtobufBroker.PrivateOrder.Type'(V) -> V.

'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(0) ->
    'AbsoluteValue';
'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(1) ->
    'OffsetValue';
'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(2) ->
    'PrecentageOffsetValue';
'd_enum_ProtobufBroker.PrivateOrder.PriceParamType'(V) ->
    V.

'd_enum_ProtobufStream.AuthenticationResult.Status'(0) ->
    'UNKNOWN';
'd_enum_ProtobufStream.AuthenticationResult.Status'(1) ->
    'AUTHENTICATED';
'd_enum_ProtobufStream.AuthenticationResult.Status'(2) ->
    'BAD_NONCE';
'd_enum_ProtobufStream.AuthenticationResult.Status'(3) ->
    'BAD_TOKEN';
'd_enum_ProtobufStream.AuthenticationResult.Status'(4) ->
    'TOKEN_EXPIRED';
'd_enum_ProtobufStream.AuthenticationResult.Status'(V) ->
    V.

'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(0) ->
    'UNKNOWN';
'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(1) ->
    'GOLANG_SDK';
'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(2) ->
    'JAVASCRIPT_SDK';
'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(3) ->
    'NODE_SDK';
'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(5) ->
    'RUST_SDK';
'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(4) ->
    'CW_WEB';
'd_enum_ProtobufClient.APIAuthenticationMessage.Source'(V) ->
    V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufBroker.BrokerSessionMessage.Session' ->
	  'merge_msg_ProtobufBroker.BrokerSessionMessage.Session'(Prev,
								  New,
								  TrUserData);
      'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession' ->
	  'merge_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Prev,
										  New,
										  TrUserData);
      'ProtobufBroker.BrokerSessionMessage' ->
	  'merge_msg_ProtobufBroker.BrokerSessionMessage'(Prev,
							  New, TrUserData);
      'ProtobufBroker.PlaceOrderRequest' ->
	  'merge_msg_ProtobufBroker.PlaceOrderRequest'(Prev, New,
						       TrUserData);
      'ProtobufBroker.PlaceOrderResult' ->
	  'merge_msg_ProtobufBroker.PlaceOrderResult'(Prev, New,
						      TrUserData);
      'ProtobufBroker.CancelOrderRequest' ->
	  'merge_msg_ProtobufBroker.CancelOrderRequest'(Prev, New,
							TrUserData);
      'ProtobufBroker.CancelOrderResult' ->
	  'merge_msg_ProtobufBroker.CancelOrderResult'(Prev, New,
						       TrUserData);
      'ProtobufBroker.ReplaceOrderRequest' ->
	  'merge_msg_ProtobufBroker.ReplaceOrderRequest'(Prev,
							 New, TrUserData);
      'ProtobufBroker.ClosePositionRequest' ->
	  'merge_msg_ProtobufBroker.ClosePositionRequest'(Prev,
							  New, TrUserData);
      'ProtobufBroker.SyncRequest' ->
	  'merge_msg_ProtobufBroker.SyncRequest'(Prev, New,
						 TrUserData);
      'ProtobufBroker.BrokerRequest' ->
	  'merge_msg_ProtobufBroker.BrokerRequest'(Prev, New,
						   TrUserData);
      'ProtobufBroker.OrdersUpdate' ->
	  'merge_msg_ProtobufBroker.OrdersUpdate'(Prev, New,
						  TrUserData);
      'ProtobufBroker.TradesUpdate' ->
	  'merge_msg_ProtobufBroker.TradesUpdate'(Prev, New,
						  TrUserData);
      'ProtobufBroker.PositionsUpdate' ->
	  'merge_msg_ProtobufBroker.PositionsUpdate'(Prev, New,
						     TrUserData);
      'ProtobufBroker.BalancesUpdate' ->
	  'merge_msg_ProtobufBroker.BalancesUpdate'(Prev, New,
						    TrUserData);
      'ProtobufBroker.RequestResolutionUpdate' ->
	  'merge_msg_ProtobufBroker.RequestResolutionUpdate'(Prev,
							     New, TrUserData);
      'ProtobufBroker.AnonymousSessionStatusUpdate' ->
	  'merge_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Prev,
								  New,
								  TrUserData);
      'ProtobufBroker.SessionStatusUpdate' ->
	  'merge_msg_ProtobufBroker.SessionStatusUpdate'(Prev,
							 New, TrUserData);
      'ProtobufBroker.PermissionsUpdate.Agreement' ->
	  'merge_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Prev,
								 New,
								 TrUserData);
      'ProtobufBroker.PermissionsUpdate.LeverageLevels' ->
	  'merge_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Prev,
								      New,
								      TrUserData);
      'ProtobufBroker.PermissionsUpdate' ->
	  'merge_msg_ProtobufBroker.PermissionsUpdate'(Prev, New,
						       TrUserData);
      'ProtobufBroker.APIAccessorStatusUpdate' ->
	  'merge_msg_ProtobufBroker.APIAccessorStatusUpdate'(Prev,
							     New, TrUserData);
      'ProtobufBroker.BrokerUpdateMessage' ->
	  'merge_msg_ProtobufBroker.BrokerUpdateMessage'(Prev,
							 New, TrUserData);
      'ProtobufBroker.PrivateOrder.PriceParam' ->
	  'merge_msg_ProtobufBroker.PrivateOrder.PriceParam'(Prev,
							     New, TrUserData);
      'ProtobufBroker.PrivateOrder' ->
	  'merge_msg_ProtobufBroker.PrivateOrder'(Prev, New,
						  TrUserData);
      'ProtobufBroker.PrivateTrade' ->
	  'merge_msg_ProtobufBroker.PrivateTrade'(Prev, New,
						  TrUserData);
      'ProtobufBroker.PrivatePosition' ->
	  'merge_msg_ProtobufBroker.PrivatePosition'(Prev, New,
						     TrUserData);
      'ProtobufBroker.Balance' ->
	  'merge_msg_ProtobufBroker.Balance'(Prev, New,
					     TrUserData);
      'ProtobufBroker.Balances' ->
	  'merge_msg_ProtobufBroker.Balances'(Prev, New,
					      TrUserData);
      'ProtobufStream.StreamMessage' ->
	  'merge_msg_ProtobufStream.StreamMessage'(Prev, New,
						   TrUserData);
      'ProtobufStream.AuthenticationResult' ->
	  'merge_msg_ProtobufStream.AuthenticationResult'(Prev,
							  New, TrUserData);
      'ProtobufStream.SubscriptionResult' ->
	  'merge_msg_ProtobufStream.SubscriptionResult'(Prev, New,
							TrUserData);
      'ProtobufStream.UnsubscriptionResult' ->
	  'merge_msg_ProtobufStream.UnsubscriptionResult'(Prev,
							  New, TrUserData);
      'ProtobufStream.SubscribeError' ->
	  'merge_msg_ProtobufStream.SubscribeError'(Prev, New,
						    TrUserData);
      'ProtobufStream.UnsubscribeError' ->
	  'merge_msg_ProtobufStream.UnsubscribeError'(Prev, New,
						      TrUserData);
      'ProtobufStream.SubscriptionStatus' ->
	  'merge_msg_ProtobufStream.SubscriptionStatus'(Prev, New,
							TrUserData);
      'ProtobufStream.MissedMessages' ->
	  'merge_msg_ProtobufStream.MissedMessages'(Prev, New,
						    TrUserData);
      'ProtobufClient.ClientMessage' ->
	  'merge_msg_ProtobufClient.ClientMessage'(Prev, New,
						   TrUserData);
      'ProtobufClient.ClientIdentificationMessage' ->
	  'merge_msg_ProtobufClient.ClientIdentificationMessage'(Prev,
								 New,
								 TrUserData);
      'ProtobufClient.WebAuthenticationMessage' ->
	  'merge_msg_ProtobufClient.WebAuthenticationMessage'(Prev,
							      New, TrUserData);
      'ProtobufClient.TradeSessionAuth' ->
	  'merge_msg_ProtobufClient.TradeSessionAuth'(Prev, New,
						      TrUserData);
      'ProtobufClient.TradeSubscription' ->
	  'merge_msg_ProtobufClient.TradeSubscription'(Prev, New,
						       TrUserData);
      'ProtobufClient.StreamSubscription' ->
	  'merge_msg_ProtobufClient.StreamSubscription'(Prev, New,
							TrUserData);
      'ProtobufClient.ClientSubscription' ->
	  'merge_msg_ProtobufClient.ClientSubscription'(Prev, New,
							TrUserData);
      'ProtobufClient.APIAuthenticationMessage' ->
	  'merge_msg_ProtobufClient.APIAuthenticationMessage'(Prev,
							      New, TrUserData);
      'ProtobufClient.ClientSessionMessage.Session' ->
	  'merge_msg_ProtobufClient.ClientSessionMessage.Session'(Prev,
								  New,
								  TrUserData);
      'ProtobufClient.ClientSessionMessage.AnonymousTradingSession' ->
	  'merge_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Prev,
										  New,
										  TrUserData);
      'ProtobufClient.ClientSessionMessage' ->
	  'merge_msg_ProtobufClient.ClientSessionMessage'(Prev,
							  New, TrUserData);
      'ProtobufClient.ClientSubscribeMessage' ->
	  'merge_msg_ProtobufClient.ClientSubscribeMessage'(Prev,
							    New, TrUserData);
      'ProtobufClient.ClientUnsubscribeMessage' ->
	  'merge_msg_ProtobufClient.ClientUnsubscribeMessage'(Prev,
							      New, TrUserData);
      'ProtobufMarkets.Market' ->
	  'merge_msg_ProtobufMarkets.Market'(Prev, New,
					     TrUserData);
      'ProtobufMarkets.Order' ->
	  'merge_msg_ProtobufMarkets.Order'(Prev, New,
					    TrUserData);
      'ProtobufMarkets.Trade' ->
	  'merge_msg_ProtobufMarkets.Trade'(Prev, New,
					    TrUserData);
      'ProtobufMarkets.MarketUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.MarketUpdateMessage'(Prev,
							  New, TrUserData);
      'ProtobufMarkets.OrderBookUpdate' ->
	  'merge_msg_ProtobufMarkets.OrderBookUpdate'(Prev, New,
						      TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas' ->
	  'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Prev,
								       New,
								       TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate' ->
	  'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Prev,
							   New, TrUserData);
      'ProtobufMarkets.OrderBookSpreadUpdate' ->
	  'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Prev,
							    New, TrUserData);
      'ProtobufMarkets.TradesUpdate' ->
	  'merge_msg_ProtobufMarkets.TradesUpdate'(Prev, New,
						   TrUserData);
      'ProtobufMarkets.Interval.OHLC' ->
	  'merge_msg_ProtobufMarkets.Interval.OHLC'(Prev, New,
						    TrUserData);
      'ProtobufMarkets.Interval' ->
	  'merge_msg_ProtobufMarkets.Interval'(Prev, New,
					       TrUserData);
      'ProtobufMarkets.IntervalsUpdate' ->
	  'merge_msg_ProtobufMarkets.IntervalsUpdate'(Prev, New,
						      TrUserData);
      'ProtobufMarkets.SummaryUpdate' ->
	  'merge_msg_ProtobufMarkets.SummaryUpdate'(Prev, New,
						    TrUserData);
      'ProtobufMarkets.SparklineUpdate' ->
	  'merge_msg_ProtobufMarkets.SparklineUpdate'(Prev, New,
						      TrUserData);
      'ProtobufMarkets.Index' ->
	  'merge_msg_ProtobufMarkets.Index'(Prev, New,
					    TrUserData);
      'ProtobufMarkets.IndexUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.IndexUpdateMessage'(Prev,
							 New, TrUserData);
      'ProtobufMarkets.TickerUpdate' ->
	  'merge_msg_ProtobufMarkets.TickerUpdate'(Prev, New,
						   TrUserData);
      'ProtobufMarkets.Ticker' ->
	  'merge_msg_ProtobufMarkets.Ticker'(Prev, New,
					     TrUserData);
      'ProtobufMarkets.PairUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.PairUpdateMessage'(Prev, New,
							TrUserData);
      'ProtobufMarkets.PairVwapUpdate' ->
	  'merge_msg_ProtobufMarkets.PairVwapUpdate'(Prev, New,
						     TrUserData);
      'ProtobufMarkets.PairPerformanceUpdate' ->
	  'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(Prev,
							    New, TrUserData);
      'ProtobufMarkets.PairTrendlineUpdate' ->
	  'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(Prev,
							  New, TrUserData);
      'ProtobufMarkets.AssetUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.AssetUpdateMessage'(Prev,
							 New, TrUserData);
      'ProtobufMarkets.AssetUSDVolumeUpdate' ->
	  'merge_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Prev,
							   New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.BrokerSessionMessage.Session'/3}).
'merge_msg_ProtobufBroker.BrokerSessionMessage.Session'(#'ProtobufBroker.BrokerSessionMessage.Session'{userId
													   =
													   PFuserId,
												       expires
													   =
													   PFexpires,
												       token
													   =
													   PFtoken,
												       mfaToken
													   =
													   PFmfaToken},
							#'ProtobufBroker.BrokerSessionMessage.Session'{userId
													   =
													   NFuserId,
												       expires
													   =
													   NFexpires,
												       token
													   =
													   NFtoken,
												       mfaToken
													   =
													   NFmfaToken},
							_) ->
    #'ProtobufBroker.BrokerSessionMessage.Session'{userId =
						       if NFuserId =:=
							    undefined ->
							      PFuserId;
							  true -> NFuserId
						       end,
						   expires =
						       if NFexpires =:=
							    undefined ->
							      PFexpires;
							  true -> NFexpires
						       end,
						   token =
						       if NFtoken =:=
							    undefined ->
							      PFtoken;
							  true -> NFtoken
						       end,
						   mfaToken =
						       if NFmfaToken =:=
							    undefined ->
							      PFmfaToken;
							  true -> NFmfaToken
						       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'/3}).
'merge_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(#'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
																	   =
																	   PFexchange,
																       token
																	   =
																	   PFtoken,
																       expiration
																	   =
																	   PFexpiration},
									#'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
																	   =
																	   NFexchange,
																       token
																	   =
																	   NFtoken,
																       expiration
																	   =
																	   NFexpiration},
									_) ->
    #'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
								       =
								       if
									 NFexchange
									   =:=
									   undefined ->
									     PFexchange;
									 true ->
									     NFexchange
								       end,
								   token =
								       if
									 NFtoken
									   =:=
									   undefined ->
									     PFtoken;
									 true ->
									     NFtoken
								       end,
								   expiration =
								       if
									 NFexpiration
									   =:=
									   undefined ->
									     PFexpiration;
									 true ->
									     NFexpiration
								       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.BrokerSessionMessage'/3}).
'merge_msg_ProtobufBroker.BrokerSessionMessage'(#'ProtobufBroker.BrokerSessionMessage'{'SessionConfig'
											   =
											   PFSessionConfig,
										       marketId
											   =
											   PFmarketId},
						#'ProtobufBroker.BrokerSessionMessage'{'SessionConfig'
											   =
											   NFSessionConfig,
										       marketId
											   =
											   NFmarketId},
						TrUserData) ->
    #'ProtobufBroker.BrokerSessionMessage'{'SessionConfig' =
					       case {PFSessionConfig,
						     NFSessionConfig}
						   of
						 {{session, OPFSessionConfig},
						  {session,
						   ONFSessionConfig}} ->
						     {session,
						      'merge_msg_ProtobufBroker.BrokerSessionMessage.Session'(OPFSessionConfig,
													      ONFSessionConfig,
													      TrUserData)};
						 {{anonymousTradingSession,
						   OPFSessionConfig},
						  {anonymousTradingSession,
						   ONFSessionConfig}} ->
						     {anonymousTradingSession,
						      'merge_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(OPFSessionConfig,
															      ONFSessionConfig,
															      TrUserData)};
						 {_, undefined} ->
						     PFSessionConfig;
						 _ -> NFSessionConfig
					       end,
					   marketId =
					       if NFmarketId =:= undefined ->
						      PFmarketId;
						  true -> NFmarketId
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PlaceOrderRequest'/3}).
'merge_msg_ProtobufBroker.PlaceOrderRequest'(#'ProtobufBroker.PlaceOrderRequest'{order
										     =
										     PForder,
										 closingOrder
										     =
										     PFclosingOrder},
					     #'ProtobufBroker.PlaceOrderRequest'{order
										     =
										     NForder,
										 closingOrder
										     =
										     NFclosingOrder},
					     TrUserData) ->
    #'ProtobufBroker.PlaceOrderRequest'{order =
					    if PForder /= undefined,
					       NForder /= undefined ->
						   'merge_msg_ProtobufBroker.PrivateOrder'(PForder,
											   NForder,
											   TrUserData);
					       PForder == undefined -> NForder;
					       NForder == undefined -> PForder
					    end,
					closingOrder =
					    if PFclosingOrder /= undefined,
					       NFclosingOrder /= undefined ->
						   'merge_msg_ProtobufBroker.PrivateOrder'(PFclosingOrder,
											   NFclosingOrder,
											   TrUserData);
					       PFclosingOrder == undefined ->
						   NFclosingOrder;
					       NFclosingOrder == undefined ->
						   PFclosingOrder
					    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PlaceOrderResult'/3}).
'merge_msg_ProtobufBroker.PlaceOrderResult'(#'ProtobufBroker.PlaceOrderResult'{order
										   =
										   PForder,
									       orderId
										   =
										   PForderId},
					    #'ProtobufBroker.PlaceOrderResult'{order
										   =
										   NForder,
									       orderId
										   =
										   NForderId},
					    TrUserData) ->
    #'ProtobufBroker.PlaceOrderResult'{order =
					   if PForder /= undefined,
					      NForder /= undefined ->
						  'merge_msg_ProtobufBroker.PrivateOrder'(PForder,
											  NForder,
											  TrUserData);
					      PForder == undefined -> NForder;
					      NForder == undefined -> PForder
					   end,
				       orderId =
					   if NForderId =:= undefined ->
						  PForderId;
					      true -> NForderId
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.CancelOrderRequest'/3}).
'merge_msg_ProtobufBroker.CancelOrderRequest'(#'ProtobufBroker.CancelOrderRequest'{orderId
										       =
										       PForderId},
					      #'ProtobufBroker.CancelOrderRequest'{orderId
										       =
										       NForderId},
					      _) ->
    #'ProtobufBroker.CancelOrderRequest'{orderId =
					     if NForderId =:= undefined ->
						    PForderId;
						true -> NForderId
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.CancelOrderResult'/3}).
'merge_msg_ProtobufBroker.CancelOrderResult'(#'ProtobufBroker.CancelOrderResult'{orderId
										     =
										     PForderId},
					     #'ProtobufBroker.CancelOrderResult'{orderId
										     =
										     NForderId},
					     _) ->
    #'ProtobufBroker.CancelOrderResult'{orderId =
					    if NForderId =:= undefined ->
						   PForderId;
					       true -> NForderId
					    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.ReplaceOrderRequest'/3}).
'merge_msg_ProtobufBroker.ReplaceOrderRequest'(#'ProtobufBroker.ReplaceOrderRequest'{orderId
											 =
											 PForderId,
										     replacement
											 =
											 PFreplacement,
										     replacementClosingOrder
											 =
											 PFreplacementClosingOrder},
					       #'ProtobufBroker.ReplaceOrderRequest'{orderId
											 =
											 NForderId,
										     replacement
											 =
											 NFreplacement,
										     replacementClosingOrder
											 =
											 NFreplacementClosingOrder},
					       TrUserData) ->
    #'ProtobufBroker.ReplaceOrderRequest'{orderId =
					      if NForderId =:= undefined ->
						     PForderId;
						 true -> NForderId
					      end,
					  replacement =
					      if PFreplacement /= undefined,
						 NFreplacement /= undefined ->
						     'merge_msg_ProtobufBroker.PrivateOrder'(PFreplacement,
											     NFreplacement,
											     TrUserData);
						 PFreplacement == undefined ->
						     NFreplacement;
						 NFreplacement == undefined ->
						     PFreplacement
					      end,
					  replacementClosingOrder =
					      if PFreplacementClosingOrder /=
						   undefined,
						 NFreplacementClosingOrder /=
						   undefined ->
						     'merge_msg_ProtobufBroker.PrivateOrder'(PFreplacementClosingOrder,
											     NFreplacementClosingOrder,
											     TrUserData);
						 PFreplacementClosingOrder ==
						   undefined ->
						     NFreplacementClosingOrder;
						 NFreplacementClosingOrder ==
						   undefined ->
						     PFreplacementClosingOrder
					      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.ClosePositionRequest'/3}).
'merge_msg_ProtobufBroker.ClosePositionRequest'(#'ProtobufBroker.ClosePositionRequest'{positionId
											   =
											   PFpositionId},
						#'ProtobufBroker.ClosePositionRequest'{positionId
											   =
											   NFpositionId},
						_) ->
    #'ProtobufBroker.ClosePositionRequest'{positionId =
					       if NFpositionId =:= undefined ->
						      PFpositionId;
						  true -> NFpositionId
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.SyncRequest'/3}).
'merge_msg_ProtobufBroker.SyncRequest'(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.BrokerRequest'/3}).
'merge_msg_ProtobufBroker.BrokerRequest'(#'ProtobufBroker.BrokerRequest'{id
									     =
									     PFid,
									 marketId
									     =
									     PFmarketId,
									 'Request'
									     =
									     PFRequest},
					 #'ProtobufBroker.BrokerRequest'{id =
									     NFid,
									 marketId
									     =
									     NFmarketId,
									 'Request'
									     =
									     NFRequest},
					 TrUserData) ->
    #'ProtobufBroker.BrokerRequest'{id =
					if NFid =:= undefined -> PFid;
					   true -> NFid
					end,
				    marketId =
					if NFmarketId =:= undefined ->
					       PFmarketId;
					   true -> NFmarketId
					end,
				    'Request' =
					case {PFRequest, NFRequest} of
					  {{placeOrderRequest, OPFRequest},
					   {placeOrderRequest, ONFRequest}} ->
					      {placeOrderRequest,
					       'merge_msg_ProtobufBroker.PlaceOrderRequest'(OPFRequest,
											    ONFRequest,
											    TrUserData)};
					  {{cancelOrderRequest, OPFRequest},
					   {cancelOrderRequest, ONFRequest}} ->
					      {cancelOrderRequest,
					       'merge_msg_ProtobufBroker.CancelOrderRequest'(OPFRequest,
											     ONFRequest,
											     TrUserData)};
					  {{replaceOrderRequest, OPFRequest},
					   {replaceOrderRequest, ONFRequest}} ->
					      {replaceOrderRequest,
					       'merge_msg_ProtobufBroker.ReplaceOrderRequest'(OPFRequest,
											      ONFRequest,
											      TrUserData)};
					  {{syncRequest, OPFRequest},
					   {syncRequest, ONFRequest}} ->
					      {syncRequest,
					       'merge_msg_ProtobufBroker.SyncRequest'(OPFRequest,
										      ONFRequest,
										      TrUserData)};
					  {{closePositionRequest, OPFRequest},
					   {closePositionRequest,
					    ONFRequest}} ->
					      {closePositionRequest,
					       'merge_msg_ProtobufBroker.ClosePositionRequest'(OPFRequest,
											       ONFRequest,
											       TrUserData)};
					  {_, undefined} -> PFRequest;
					  _ -> NFRequest
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.OrdersUpdate'/3}).
'merge_msg_ProtobufBroker.OrdersUpdate'(#'ProtobufBroker.OrdersUpdate'{orders
									   =
									   PForders},
					#'ProtobufBroker.OrdersUpdate'{orders =
									   NForders},
					TrUserData) ->
    #'ProtobufBroker.OrdersUpdate'{orders =
				       if PForders /= undefined,
					  NForders /= undefined ->
					      'erlang_++'(PForders, NForders,
							  TrUserData);
					  PForders == undefined -> NForders;
					  NForders == undefined -> PForders
				       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.TradesUpdate'/3}).
'merge_msg_ProtobufBroker.TradesUpdate'(#'ProtobufBroker.TradesUpdate'{trades
									   =
									   PFtrades},
					#'ProtobufBroker.TradesUpdate'{trades =
									   NFtrades},
					TrUserData) ->
    #'ProtobufBroker.TradesUpdate'{trades =
				       if PFtrades /= undefined,
					  NFtrades /= undefined ->
					      'erlang_++'(PFtrades, NFtrades,
							  TrUserData);
					  PFtrades == undefined -> NFtrades;
					  NFtrades == undefined -> PFtrades
				       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PositionsUpdate'/3}).
'merge_msg_ProtobufBroker.PositionsUpdate'(#'ProtobufBroker.PositionsUpdate'{positions
										 =
										 PFpositions},
					   #'ProtobufBroker.PositionsUpdate'{positions
										 =
										 NFpositions},
					   TrUserData) ->
    #'ProtobufBroker.PositionsUpdate'{positions =
					  if PFpositions /= undefined,
					     NFpositions /= undefined ->
						 'erlang_++'(PFpositions,
							     NFpositions,
							     TrUserData);
					     PFpositions == undefined ->
						 NFpositions;
					     NFpositions == undefined ->
						 PFpositions
					  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.BalancesUpdate'/3}).
'merge_msg_ProtobufBroker.BalancesUpdate'(#'ProtobufBroker.BalancesUpdate'{balances
									       =
									       PFbalances},
					  #'ProtobufBroker.BalancesUpdate'{balances
									       =
									       NFbalances},
					  TrUserData) ->
    #'ProtobufBroker.BalancesUpdate'{balances =
					 if PFbalances /= undefined,
					    NFbalances /= undefined ->
						'erlang_++'(PFbalances,
							    NFbalances,
							    TrUserData);
					    PFbalances == undefined ->
						NFbalances;
					    NFbalances == undefined ->
						PFbalances
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.RequestResolutionUpdate'/3}).
'merge_msg_ProtobufBroker.RequestResolutionUpdate'(#'ProtobufBroker.RequestResolutionUpdate'{id
												 =
												 PFid,
											     error
												 =
												 PFerror,
											     message
												 =
												 PFmessage,
											     'Result'
												 =
												 PFResult},
						   #'ProtobufBroker.RequestResolutionUpdate'{id
												 =
												 NFid,
											     error
												 =
												 NFerror,
											     message
												 =
												 NFmessage,
											     'Result'
												 =
												 NFResult},
						   TrUserData) ->
    #'ProtobufBroker.RequestResolutionUpdate'{id =
						  if NFid =:= undefined -> PFid;
						     true -> NFid
						  end,
					      error =
						  if NFerror =:= undefined ->
							 PFerror;
						     true -> NFerror
						  end,
					      message =
						  if NFmessage =:= undefined ->
							 PFmessage;
						     true -> NFmessage
						  end,
					      'Result' =
						  case {PFResult, NFResult} of
						    {{placeOrderResult,
						      OPFResult},
						     {placeOrderResult,
						      ONFResult}} ->
							{placeOrderResult,
							 'merge_msg_ProtobufBroker.PlaceOrderResult'(OPFResult,
												     ONFResult,
												     TrUserData)};
						    {{cancelOrderResult,
						      OPFResult},
						     {cancelOrderResult,
						      ONFResult}} ->
							{cancelOrderResult,
							 'merge_msg_ProtobufBroker.CancelOrderResult'(OPFResult,
												      ONFResult,
												      TrUserData)};
						    {_, undefined} -> PFResult;
						    _ -> NFResult
						  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.AnonymousSessionStatusUpdate'/3}).
'merge_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(#'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
													   =
													   PFexpiration,
												       token
													   =
													   PFtoken},
							#'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
													   =
													   NFexpiration,
												       token
													   =
													   NFtoken},
							_) ->
    #'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
						       =
						       if NFexpiration =:=
							    undefined ->
							      PFexpiration;
							  true -> NFexpiration
						       end,
						   token =
						       if NFtoken =:=
							    undefined ->
							      PFtoken;
							  true -> NFtoken
						       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.SessionStatusUpdate'/3}).
'merge_msg_ProtobufBroker.SessionStatusUpdate'(#'ProtobufBroker.SessionStatusUpdate'{initialized
											 =
											 PFinitialized,
										     syncing
											 =
											 PFsyncing,
										     lastSyncTime
											 =
											 PFlastSyncTime,
										     syncError
											 =
											 PFsyncError},
					       #'ProtobufBroker.SessionStatusUpdate'{initialized
											 =
											 NFinitialized,
										     syncing
											 =
											 NFsyncing,
										     lastSyncTime
											 =
											 NFlastSyncTime,
										     syncError
											 =
											 NFsyncError},
					       _) ->
    #'ProtobufBroker.SessionStatusUpdate'{initialized =
					      if NFinitialized =:= undefined ->
						     PFinitialized;
						 true -> NFinitialized
					      end,
					  syncing =
					      if NFsyncing =:= undefined ->
						     PFsyncing;
						 true -> NFsyncing
					      end,
					  lastSyncTime =
					      if NFlastSyncTime =:= undefined ->
						     PFlastSyncTime;
						 true -> NFlastSyncTime
					      end,
					  syncError =
					      if NFsyncError =:= undefined ->
						     PFsyncError;
						 true -> NFsyncError
					      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PermissionsUpdate.Agreement'/3}).
'merge_msg_ProtobufBroker.PermissionsUpdate.Agreement'(#'ProtobufBroker.PermissionsUpdate.Agreement'{key
													 =
													 PFkey,
												     body
													 =
													 PFbody},
						       #'ProtobufBroker.PermissionsUpdate.Agreement'{key
													 =
													 NFkey,
												     body
													 =
													 NFbody},
						       _) ->
    #'ProtobufBroker.PermissionsUpdate.Agreement'{key =
						      if NFkey =:= undefined ->
							     PFkey;
							 true -> NFkey
						      end,
						  body =
						      if NFbody =:= undefined ->
							     PFbody;
							 true -> NFbody
						      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'/3}).
'merge_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(#'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy
														   =
														   PFbuy,
													       sell
														   =
														   PFsell},
							    #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy
														   =
														   NFbuy,
													       sell
														   =
														   NFsell},
							    TrUserData) ->
    #'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy =
							   if PFbuy /=
								undefined,
							      NFbuy /=
								undefined ->
								  'erlang_++'(PFbuy,
									      NFbuy,
									      TrUserData);
							      PFbuy ==
								undefined ->
								  NFbuy;
							      NFbuy ==
								undefined ->
								  PFbuy
							   end,
						       sell =
							   if PFsell /=
								undefined,
							      NFsell /=
								undefined ->
								  'erlang_++'(PFsell,
									      NFsell,
									      TrUserData);
							      PFsell ==
								undefined ->
								  NFsell;
							      NFsell ==
								undefined ->
								  PFsell
							   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PermissionsUpdate'/3}).
'merge_msg_ProtobufBroker.PermissionsUpdate'(#'ProtobufBroker.PermissionsUpdate'{orderTypes
										     =
										     PForderTypes,
										 fundingTypes
										     =
										     PFfundingTypes,
										 agreements
										     =
										     PFagreements,
										 currencyPairAllowed
										     =
										     PFcurrencyPairAllowed,
										 leverageLevels
										     =
										     PFleverageLevels,
										 supportsOrderExpiry
										     =
										     PFsupportsOrderExpiry},
					     #'ProtobufBroker.PermissionsUpdate'{orderTypes
										     =
										     NForderTypes,
										 fundingTypes
										     =
										     NFfundingTypes,
										 agreements
										     =
										     NFagreements,
										 currencyPairAllowed
										     =
										     NFcurrencyPairAllowed,
										 leverageLevels
										     =
										     NFleverageLevels,
										 supportsOrderExpiry
										     =
										     NFsupportsOrderExpiry},
					     TrUserData) ->
    #'ProtobufBroker.PermissionsUpdate'{orderTypes =
					    if PForderTypes /= undefined,
					       NForderTypes /= undefined ->
						   'erlang_++'(PForderTypes,
							       NForderTypes,
							       TrUserData);
					       PForderTypes == undefined ->
						   NForderTypes;
					       NForderTypes == undefined ->
						   PForderTypes
					    end,
					fundingTypes =
					    if PFfundingTypes /= undefined,
					       NFfundingTypes /= undefined ->
						   'erlang_++'(PFfundingTypes,
							       NFfundingTypes,
							       TrUserData);
					       PFfundingTypes == undefined ->
						   NFfundingTypes;
					       NFfundingTypes == undefined ->
						   PFfundingTypes
					    end,
					agreements =
					    if PFagreements /= undefined,
					       NFagreements /= undefined ->
						   'erlang_++'(PFagreements,
							       NFagreements,
							       TrUserData);
					       PFagreements == undefined ->
						   NFagreements;
					       NFagreements == undefined ->
						   PFagreements
					    end,
					currencyPairAllowed =
					    if NFcurrencyPairAllowed =:=
						 undefined ->
						   PFcurrencyPairAllowed;
					       true -> NFcurrencyPairAllowed
					    end,
					leverageLevels =
					    if PFleverageLevels /= undefined,
					       NFleverageLevels /= undefined ->
						   'merge_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(PFleverageLevels,
													       NFleverageLevels,
													       TrUserData);
					       PFleverageLevels == undefined ->
						   NFleverageLevels;
					       NFleverageLevels == undefined ->
						   PFleverageLevels
					    end,
					supportsOrderExpiry =
					    if NFsupportsOrderExpiry =:=
						 undefined ->
						   PFsupportsOrderExpiry;
					       true -> NFsupportsOrderExpiry
					    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.APIAccessorStatusUpdate'/3}).
'merge_msg_ProtobufBroker.APIAccessorStatusUpdate'(#'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess
												 =
												 PFhasAccess,
											     status
												 =
												 PFstatus,
											     statusString
												 =
												 PFstatusString},
						   #'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess
												 =
												 NFhasAccess,
											     status
												 =
												 NFstatus,
											     statusString
												 =
												 NFstatusString},
						   _) ->
    #'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess =
						  if NFhasAccess =:=
						       undefined ->
							 PFhasAccess;
						     true -> NFhasAccess
						  end,
					      status =
						  if NFstatus =:= undefined ->
							 PFstatus;
						     true -> NFstatus
						  end,
					      statusString =
						  if NFstatusString =:=
						       undefined ->
							 PFstatusString;
						     true -> NFstatusString
						  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.BrokerUpdateMessage'/3}).
'merge_msg_ProtobufBroker.BrokerUpdateMessage'(#'ProtobufBroker.BrokerUpdateMessage'{marketId
											 =
											 PFmarketId,
										     'Update'
											 =
											 PFUpdate},
					       #'ProtobufBroker.BrokerUpdateMessage'{marketId
											 =
											 NFmarketId,
										     'Update'
											 =
											 NFUpdate},
					       TrUserData) ->
    #'ProtobufBroker.BrokerUpdateMessage'{marketId =
					      if NFmarketId =:= undefined ->
						     PFmarketId;
						 true -> NFmarketId
					      end,
					  'Update' =
					      case {PFUpdate, NFUpdate} of
						{{ordersUpdate, OPFUpdate},
						 {ordersUpdate, ONFUpdate}} ->
						    {ordersUpdate,
						     'merge_msg_ProtobufBroker.OrdersUpdate'(OPFUpdate,
											     ONFUpdate,
											     TrUserData)};
						{{tradesUpdate, OPFUpdate},
						 {tradesUpdate, ONFUpdate}} ->
						    {tradesUpdate,
						     'merge_msg_ProtobufBroker.TradesUpdate'(OPFUpdate,
											     ONFUpdate,
											     TrUserData)};
						{{balancesUpdate, OPFUpdate},
						 {balancesUpdate, ONFUpdate}} ->
						    {balancesUpdate,
						     'merge_msg_ProtobufBroker.BalancesUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
						{{positionsUpdate, OPFUpdate},
						 {positionsUpdate,
						  ONFUpdate}} ->
						    {positionsUpdate,
						     'merge_msg_ProtobufBroker.PositionsUpdate'(OPFUpdate,
												ONFUpdate,
												TrUserData)};
						{{requestResolutionUpdate,
						  OPFUpdate},
						 {requestResolutionUpdate,
						  ONFUpdate}} ->
						    {requestResolutionUpdate,
						     'merge_msg_ProtobufBroker.RequestResolutionUpdate'(OPFUpdate,
													ONFUpdate,
													TrUserData)};
						{{anonymousSessionStatusUpdate,
						  OPFUpdate},
						 {anonymousSessionStatusUpdate,
						  ONFUpdate}} ->
						    {anonymousSessionStatusUpdate,
						     'merge_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(OPFUpdate,
													     ONFUpdate,
													     TrUserData)};
						{{permissionsUpdate, OPFUpdate},
						 {permissionsUpdate,
						  ONFUpdate}} ->
						    {permissionsUpdate,
						     'merge_msg_ProtobufBroker.PermissionsUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						{{sessionStatusUpdate,
						  OPFUpdate},
						 {sessionStatusUpdate,
						  ONFUpdate}} ->
						    {sessionStatusUpdate,
						     'merge_msg_ProtobufBroker.SessionStatusUpdate'(OPFUpdate,
												    ONFUpdate,
												    TrUserData)};
						{{apiAccessorStatusUpdate,
						  OPFUpdate},
						 {apiAccessorStatusUpdate,
						  ONFUpdate}} ->
						    {apiAccessorStatusUpdate,
						     'merge_msg_ProtobufBroker.APIAccessorStatusUpdate'(OPFUpdate,
													ONFUpdate,
													TrUserData)};
						{{authenticationResult,
						  OPFUpdate},
						 {authenticationResult,
						  ONFUpdate}} ->
						    {authenticationResult,
						     'merge_msg_ProtobufStream.AuthenticationResult'(OPFUpdate,
												     ONFUpdate,
												     TrUserData)};
						{{subscriptionResult,
						  OPFUpdate},
						 {subscriptionResult,
						  ONFUpdate}} ->
						    {subscriptionResult,
						     'merge_msg_ProtobufStream.SubscriptionResult'(OPFUpdate,
												   ONFUpdate,
												   TrUserData)};
						{_, undefined} -> PFUpdate;
						_ -> NFUpdate
					      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivateOrder.PriceParam'/3}).
'merge_msg_ProtobufBroker.PrivateOrder.PriceParam'(#'ProtobufBroker.PrivateOrder.PriceParam'{value
												 =
												 PFvalue,
											     valueString
												 =
												 PFvalueString,
											     type
												 =
												 PFtype},
						   #'ProtobufBroker.PrivateOrder.PriceParam'{value
												 =
												 NFvalue,
											     valueString
												 =
												 NFvalueString,
											     type
												 =
												 NFtype},
						   _) ->
    #'ProtobufBroker.PrivateOrder.PriceParam'{value =
						  if NFvalue =:= undefined ->
							 PFvalue;
						     true -> NFvalue
						  end,
					      valueString =
						  if NFvalueString =:=
						       undefined ->
							 PFvalueString;
						     true -> NFvalueString
						  end,
					      type =
						  if NFtype =:= undefined ->
							 PFtype;
						     true -> NFtype
						  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivateOrder'/3}).
'merge_msg_ProtobufBroker.PrivateOrder'(#'ProtobufBroker.PrivateOrder'{id
									   =
									   PFid,
								       time =
									   PFtime,
								       price =
									   PFprice,
								       amount =
									   PFamount,
								       side =
									   PFside,
								       type =
									   PFtype,
								       fundingType
									   =
									   PFfundingType,
								       priceParams
									   =
									   PFpriceParams,
								       amountParam
									   =
									   PFamountParam,
								       amountParamString
									   =
									   PFamountParamString,
								       amountFilledString
									   =
									   PFamountFilledString,
								       leverage
									   =
									   PFleverage,
								       currentStop
									   =
									   PFcurrentStop,
								       initialStop
									   =
									   PFinitialStop,
								       currentStopString
									   =
									   PFcurrentStopString,
								       initialStopString
									   =
									   PFinitialStopString,
								       startTime
									   =
									   PFstartTime,
								       expireTime
									   =
									   PFexpireTime,
								       rate =
									   PFrate,
								       hasClosingOrder
									   =
									   PFhasClosingOrder,
								       closingOrderType
									   =
									   PFclosingOrderType,
								       closingOrderPriceParams
									   =
									   PFclosingOrderPriceParams},
					#'ProtobufBroker.PrivateOrder'{id =
									   NFid,
								       time =
									   NFtime,
								       price =
									   NFprice,
								       amount =
									   NFamount,
								       side =
									   NFside,
								       type =
									   NFtype,
								       fundingType
									   =
									   NFfundingType,
								       priceParams
									   =
									   NFpriceParams,
								       amountParam
									   =
									   NFamountParam,
								       amountParamString
									   =
									   NFamountParamString,
								       amountFilledString
									   =
									   NFamountFilledString,
								       leverage
									   =
									   NFleverage,
								       currentStop
									   =
									   NFcurrentStop,
								       initialStop
									   =
									   NFinitialStop,
								       currentStopString
									   =
									   NFcurrentStopString,
								       initialStopString
									   =
									   NFinitialStopString,
								       startTime
									   =
									   NFstartTime,
								       expireTime
									   =
									   NFexpireTime,
								       rate =
									   NFrate,
								       hasClosingOrder
									   =
									   NFhasClosingOrder,
								       closingOrderType
									   =
									   NFclosingOrderType,
								       closingOrderPriceParams
									   =
									   NFclosingOrderPriceParams},
					TrUserData) ->
    #'ProtobufBroker.PrivateOrder'{id =
				       if NFid =:= undefined -> PFid;
					  true -> NFid
				       end,
				   time =
				       if NFtime =:= undefined -> PFtime;
					  true -> NFtime
				       end,
				   price =
				       if NFprice =:= undefined -> PFprice;
					  true -> NFprice
				       end,
				   amount =
				       if NFamount =:= undefined -> PFamount;
					  true -> NFamount
				       end,
				   side =
				       if NFside =:= undefined -> PFside;
					  true -> NFside
				       end,
				   type =
				       if NFtype =:= undefined -> PFtype;
					  true -> NFtype
				       end,
				   fundingType =
				       if NFfundingType =:= undefined ->
					      PFfundingType;
					  true -> NFfundingType
				       end,
				   priceParams =
				       if PFpriceParams /= undefined,
					  NFpriceParams /= undefined ->
					      'erlang_++'(PFpriceParams,
							  NFpriceParams,
							  TrUserData);
					  PFpriceParams == undefined ->
					      NFpriceParams;
					  NFpriceParams == undefined ->
					      PFpriceParams
				       end,
				   amountParam =
				       if NFamountParam =:= undefined ->
					      PFamountParam;
					  true -> NFamountParam
				       end,
				   amountParamString =
				       if NFamountParamString =:= undefined ->
					      PFamountParamString;
					  true -> NFamountParamString
				       end,
				   amountFilledString =
				       if NFamountFilledString =:= undefined ->
					      PFamountFilledString;
					  true -> NFamountFilledString
				       end,
				   leverage =
				       if NFleverage =:= undefined ->
					      PFleverage;
					  true -> NFleverage
				       end,
				   currentStop =
				       if NFcurrentStop =:= undefined ->
					      PFcurrentStop;
					  true -> NFcurrentStop
				       end,
				   initialStop =
				       if NFinitialStop =:= undefined ->
					      PFinitialStop;
					  true -> NFinitialStop
				       end,
				   currentStopString =
				       if NFcurrentStopString =:= undefined ->
					      PFcurrentStopString;
					  true -> NFcurrentStopString
				       end,
				   initialStopString =
				       if NFinitialStopString =:= undefined ->
					      PFinitialStopString;
					  true -> NFinitialStopString
				       end,
				   startTime =
				       if NFstartTime =:= undefined ->
					      PFstartTime;
					  true -> NFstartTime
				       end,
				   expireTime =
				       if NFexpireTime =:= undefined ->
					      PFexpireTime;
					  true -> NFexpireTime
				       end,
				   rate =
				       if NFrate =:= undefined -> PFrate;
					  true -> NFrate
				       end,
				   hasClosingOrder =
				       if NFhasClosingOrder =:= undefined ->
					      PFhasClosingOrder;
					  true -> NFhasClosingOrder
				       end,
				   closingOrderType =
				       if NFclosingOrderType =:= undefined ->
					      PFclosingOrderType;
					  true -> NFclosingOrderType
				       end,
				   closingOrderPriceParams =
				       if PFclosingOrderPriceParams /=
					    undefined,
					  NFclosingOrderPriceParams /=
					    undefined ->
					      'erlang_++'(PFclosingOrderPriceParams,
							  NFclosingOrderPriceParams,
							  TrUserData);
					  PFclosingOrderPriceParams ==
					    undefined ->
					      NFclosingOrderPriceParams;
					  NFclosingOrderPriceParams ==
					    undefined ->
					      PFclosingOrderPriceParams
				       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivateTrade'/3}).
'merge_msg_ProtobufBroker.PrivateTrade'(#'ProtobufBroker.PrivateTrade'{externalId
									   =
									   PFexternalId,
								       orderId =
									   PForderId,
								       time =
									   PFtime,
								       timeMillis
									   =
									   PFtimeMillis,
								       price =
									   PFprice,
								       priceString
									   =
									   PFpriceString,
								       amount =
									   PFamount,
								       amountString
									   =
									   PFamountString,
								       side =
									   PFside,
								       id =
									   PFid},
					#'ProtobufBroker.PrivateTrade'{externalId
									   =
									   NFexternalId,
								       orderId =
									   NForderId,
								       time =
									   NFtime,
								       timeMillis
									   =
									   NFtimeMillis,
								       price =
									   NFprice,
								       priceString
									   =
									   NFpriceString,
								       amount =
									   NFamount,
								       amountString
									   =
									   NFamountString,
								       side =
									   NFside,
								       id =
									   NFid},
					_) ->
    #'ProtobufBroker.PrivateTrade'{externalId =
				       if NFexternalId =:= undefined ->
					      PFexternalId;
					  true -> NFexternalId
				       end,
				   orderId =
				       if NForderId =:= undefined -> PForderId;
					  true -> NForderId
				       end,
				   time =
				       if NFtime =:= undefined -> PFtime;
					  true -> NFtime
				       end,
				   timeMillis =
				       if NFtimeMillis =:= undefined ->
					      PFtimeMillis;
					  true -> NFtimeMillis
				       end,
				   price =
				       if NFprice =:= undefined -> PFprice;
					  true -> NFprice
				       end,
				   priceString =
				       if NFpriceString =:= undefined ->
					      PFpriceString;
					  true -> NFpriceString
				       end,
				   amount =
				       if NFamount =:= undefined -> PFamount;
					  true -> NFamount
				       end,
				   amountString =
				       if NFamountString =:= undefined ->
					      PFamountString;
					  true -> NFamountString
				       end,
				   side =
				       if NFside =:= undefined -> PFside;
					  true -> NFside
				       end,
				   id =
				       if NFid =:= undefined -> PFid;
					  true -> NFid
				       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.PrivatePosition'/3}).
'merge_msg_ProtobufBroker.PrivatePosition'(#'ProtobufBroker.PrivatePosition'{id
										 =
										 PFid,
									     time
										 =
										 PFtime,
									     side
										 =
										 PFside,
									     avgPrice
										 =
										 PFavgPrice,
									     avgPriceString
										 =
										 PFavgPriceString,
									     amountOpen
										 =
										 PFamountOpen,
									     amountClosed
										 =
										 PFamountClosed,
									     amountOpenString
										 =
										 PFamountOpenString,
									     amountClosedString
										 =
										 PFamountClosedString,
									     orderIds
										 =
										 PForderIds,
									     tradeIds
										 =
										 PFtradeIds},
					   #'ProtobufBroker.PrivatePosition'{id
										 =
										 NFid,
									     time
										 =
										 NFtime,
									     side
										 =
										 NFside,
									     avgPrice
										 =
										 NFavgPrice,
									     avgPriceString
										 =
										 NFavgPriceString,
									     amountOpen
										 =
										 NFamountOpen,
									     amountClosed
										 =
										 NFamountClosed,
									     amountOpenString
										 =
										 NFamountOpenString,
									     amountClosedString
										 =
										 NFamountClosedString,
									     orderIds
										 =
										 NForderIds,
									     tradeIds
										 =
										 NFtradeIds},
					   TrUserData) ->
    #'ProtobufBroker.PrivatePosition'{id =
					  if NFid =:= undefined -> PFid;
					     true -> NFid
					  end,
				      time =
					  if NFtime =:= undefined -> PFtime;
					     true -> NFtime
					  end,
				      side =
					  if NFside =:= undefined -> PFside;
					     true -> NFside
					  end,
				      avgPrice =
					  if NFavgPrice =:= undefined ->
						 PFavgPrice;
					     true -> NFavgPrice
					  end,
				      avgPriceString =
					  if NFavgPriceString =:= undefined ->
						 PFavgPriceString;
					     true -> NFavgPriceString
					  end,
				      amountOpen =
					  if NFamountOpen =:= undefined ->
						 PFamountOpen;
					     true -> NFamountOpen
					  end,
				      amountClosed =
					  if NFamountClosed =:= undefined ->
						 PFamountClosed;
					     true -> NFamountClosed
					  end,
				      amountOpenString =
					  if NFamountOpenString =:= undefined ->
						 PFamountOpenString;
					     true -> NFamountOpenString
					  end,
				      amountClosedString =
					  if NFamountClosedString =:=
					       undefined ->
						 PFamountClosedString;
					     true -> NFamountClosedString
					  end,
				      orderIds =
					  if PForderIds /= undefined,
					     NForderIds /= undefined ->
						 'erlang_++'(PForderIds,
							     NForderIds,
							     TrUserData);
					     PForderIds == undefined ->
						 NForderIds;
					     NForderIds == undefined ->
						 PForderIds
					  end,
				      tradeIds =
					  if PFtradeIds /= undefined,
					     NFtradeIds /= undefined ->
						 'erlang_++'(PFtradeIds,
							     NFtradeIds,
							     TrUserData);
					     PFtradeIds == undefined ->
						 NFtradeIds;
					     NFtradeIds == undefined ->
						 PFtradeIds
					  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.Balance'/3}).
'merge_msg_ProtobufBroker.Balance'(#'ProtobufBroker.Balance'{currency
								 = PFcurrency,
							     amount = PFamount,
							     amountString =
								 PFamountString},
				   #'ProtobufBroker.Balance'{currency =
								 NFcurrency,
							     amount = NFamount,
							     amountString =
								 NFamountString},
				   _) ->
    #'ProtobufBroker.Balance'{currency =
				  if NFcurrency =:= undefined -> PFcurrency;
				     true -> NFcurrency
				  end,
			      amount =
				  if NFamount =:= undefined -> PFamount;
				     true -> NFamount
				  end,
			      amountString =
				  if NFamountString =:= undefined ->
					 PFamountString;
				     true -> NFamountString
				  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufBroker.Balances'/3}).
'merge_msg_ProtobufBroker.Balances'(#'ProtobufBroker.Balances'{fundingType
								   =
								   PFfundingType,
							       balances =
								   PFbalances},
				    #'ProtobufBroker.Balances'{fundingType =
								   NFfundingType,
							       balances =
								   NFbalances},
				    TrUserData) ->
    #'ProtobufBroker.Balances'{fundingType =
				   if NFfundingType =:= undefined ->
					  PFfundingType;
				      true -> NFfundingType
				   end,
			       balances =
				   if PFbalances /= undefined,
				      NFbalances /= undefined ->
					  'erlang_++'(PFbalances, NFbalances,
						      TrUserData);
				      PFbalances == undefined -> NFbalances;
				      NFbalances == undefined -> PFbalances
				   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.StreamMessage'/3}).
'merge_msg_ProtobufStream.StreamMessage'(#'ProtobufStream.StreamMessage'{body
									     =
									     PFbody},
					 #'ProtobufStream.StreamMessage'{body =
									     NFbody},
					 TrUserData) ->
    #'ProtobufStream.StreamMessage'{body =
					case {PFbody, NFbody} of
					  {{authenticationResult, OPFbody},
					   {authenticationResult, ONFbody}} ->
					      {authenticationResult,
					       'merge_msg_ProtobufStream.AuthenticationResult'(OPFbody,
											       ONFbody,
											       TrUserData)};
					  {{subscriptionResult, OPFbody},
					   {subscriptionResult, ONFbody}} ->
					      {subscriptionResult,
					       'merge_msg_ProtobufStream.SubscriptionResult'(OPFbody,
											     ONFbody,
											     TrUserData)};
					  {{unsubscriptionResult, OPFbody},
					   {unsubscriptionResult, ONFbody}} ->
					      {unsubscriptionResult,
					       'merge_msg_ProtobufStream.UnsubscriptionResult'(OPFbody,
											       ONFbody,
											       TrUserData)};
					  {{missedMessages, OPFbody},
					   {missedMessages, ONFbody}} ->
					      {missedMessages,
					       'merge_msg_ProtobufStream.MissedMessages'(OPFbody,
											 ONFbody,
											 TrUserData)};
					  {{marketUpdate, OPFbody},
					   {marketUpdate, ONFbody}} ->
					      {marketUpdate,
					       'merge_msg_ProtobufMarkets.MarketUpdateMessage'(OPFbody,
											       ONFbody,
											       TrUserData)};
					  {{pairUpdate, OPFbody},
					   {pairUpdate, ONFbody}} ->
					      {pairUpdate,
					       'merge_msg_ProtobufMarkets.PairUpdateMessage'(OPFbody,
											     ONFbody,
											     TrUserData)};
					  {{assetUpdate, OPFbody},
					   {assetUpdate, ONFbody}} ->
					      {assetUpdate,
					       'merge_msg_ProtobufMarkets.AssetUpdateMessage'(OPFbody,
											      ONFbody,
											      TrUserData)};
					  {{indexUpdate, OPFbody},
					   {indexUpdate, ONFbody}} ->
					      {indexUpdate,
					       'merge_msg_ProtobufMarkets.IndexUpdateMessage'(OPFbody,
											      ONFbody,
											      TrUserData)};
					  {_, undefined} -> PFbody;
					  _ -> NFbody
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.AuthenticationResult'/3}).
'merge_msg_ProtobufStream.AuthenticationResult'(#'ProtobufStream.AuthenticationResult'{status
											   =
											   PFstatus},
						#'ProtobufStream.AuthenticationResult'{status
											   =
											   NFstatus},
						_) ->
    #'ProtobufStream.AuthenticationResult'{status =
					       if NFstatus =:= undefined ->
						      PFstatus;
						  true -> NFstatus
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.SubscriptionResult'/3}).
'merge_msg_ProtobufStream.SubscriptionResult'(#'ProtobufStream.SubscriptionResult'{subscribed
										       =
										       PFsubscribed,
										   failed
										       =
										       PFfailed,
										   status
										       =
										       PFstatus,
										   subscriptions
										       =
										       PFsubscriptions},
					      #'ProtobufStream.SubscriptionResult'{subscribed
										       =
										       NFsubscribed,
										   failed
										       =
										       NFfailed,
										   status
										       =
										       NFstatus,
										   subscriptions
										       =
										       NFsubscriptions},
					      TrUserData) ->
    #'ProtobufStream.SubscriptionResult'{subscribed =
					     if PFsubscribed /= undefined,
						NFsubscribed /= undefined ->
						    'erlang_++'(PFsubscribed,
								NFsubscribed,
								TrUserData);
						PFsubscribed == undefined ->
						    NFsubscribed;
						NFsubscribed == undefined ->
						    PFsubscribed
					     end,
					 failed =
					     if PFfailed /= undefined,
						NFfailed /= undefined ->
						    'erlang_++'(PFfailed,
								NFfailed,
								TrUserData);
						PFfailed == undefined ->
						    NFfailed;
						NFfailed == undefined ->
						    PFfailed
					     end,
					 status =
					     if PFstatus /= undefined,
						NFstatus /= undefined ->
						    'merge_msg_ProtobufStream.SubscriptionStatus'(PFstatus,
												  NFstatus,
												  TrUserData);
						PFstatus == undefined ->
						    NFstatus;
						NFstatus == undefined ->
						    PFstatus
					     end,
					 subscriptions =
					     if PFsubscriptions /= undefined,
						NFsubscriptions /= undefined ->
						    'erlang_++'(PFsubscriptions,
								NFsubscriptions,
								TrUserData);
						PFsubscriptions == undefined ->
						    NFsubscriptions;
						NFsubscriptions == undefined ->
						    PFsubscriptions
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.UnsubscriptionResult'/3}).
'merge_msg_ProtobufStream.UnsubscriptionResult'(#'ProtobufStream.UnsubscriptionResult'{unsubscribed
											   =
											   PFunsubscribed,
										       failed
											   =
											   PFfailed,
										       status
											   =
											   PFstatus,
										       subscriptions
											   =
											   PFsubscriptions},
						#'ProtobufStream.UnsubscriptionResult'{unsubscribed
											   =
											   NFunsubscribed,
										       failed
											   =
											   NFfailed,
										       status
											   =
											   NFstatus,
										       subscriptions
											   =
											   NFsubscriptions},
						TrUserData) ->
    #'ProtobufStream.UnsubscriptionResult'{unsubscribed =
					       if PFunsubscribed /= undefined,
						  NFunsubscribed /= undefined ->
						      'erlang_++'(PFunsubscribed,
								  NFunsubscribed,
								  TrUserData);
						  PFunsubscribed == undefined ->
						      NFunsubscribed;
						  NFunsubscribed == undefined ->
						      PFunsubscribed
					       end,
					   failed =
					       if PFfailed /= undefined,
						  NFfailed /= undefined ->
						      'erlang_++'(PFfailed,
								  NFfailed,
								  TrUserData);
						  PFfailed == undefined ->
						      NFfailed;
						  NFfailed == undefined ->
						      PFfailed
					       end,
					   status =
					       if PFstatus /= undefined,
						  NFstatus /= undefined ->
						      'merge_msg_ProtobufStream.SubscriptionStatus'(PFstatus,
												    NFstatus,
												    TrUserData);
						  PFstatus == undefined ->
						      NFstatus;
						  NFstatus == undefined ->
						      PFstatus
					       end,
					   subscriptions =
					       if PFsubscriptions /= undefined,
						  NFsubscriptions /=
						    undefined ->
						      'erlang_++'(PFsubscriptions,
								  NFsubscriptions,
								  TrUserData);
						  PFsubscriptions ==
						    undefined ->
						      NFsubscriptions;
						  NFsubscriptions ==
						    undefined ->
						      PFsubscriptions
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.SubscribeError'/3}).
'merge_msg_ProtobufStream.SubscribeError'(#'ProtobufStream.SubscribeError'{key
									       =
									       PFkey,
									   error
									       =
									       PFerror,
									   subscription
									       =
									       PFsubscription},
					  #'ProtobufStream.SubscribeError'{key =
									       NFkey,
									   error
									       =
									       NFerror,
									   subscription
									       =
									       NFsubscription},
					  TrUserData) ->
    #'ProtobufStream.SubscribeError'{key =
					 if NFkey =:= undefined -> PFkey;
					    true -> NFkey
					 end,
				     error =
					 if NFerror =:= undefined -> PFerror;
					    true -> NFerror
					 end,
				     subscription =
					 if PFsubscription /= undefined,
					    NFsubscription /= undefined ->
						'merge_msg_ProtobufClient.ClientSubscription'(PFsubscription,
											      NFsubscription,
											      TrUserData);
					    PFsubscription == undefined ->
						NFsubscription;
					    NFsubscription == undefined ->
						PFsubscription
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.UnsubscribeError'/3}).
'merge_msg_ProtobufStream.UnsubscribeError'(#'ProtobufStream.UnsubscribeError'{key
										   =
										   PFkey,
									       error
										   =
										   PFerror,
									       subscription
										   =
										   PFsubscription},
					    #'ProtobufStream.UnsubscribeError'{key
										   =
										   NFkey,
									       error
										   =
										   NFerror,
									       subscription
										   =
										   NFsubscription},
					    TrUserData) ->
    #'ProtobufStream.UnsubscribeError'{key =
					   if NFkey =:= undefined -> PFkey;
					      true -> NFkey
					   end,
				       error =
					   if NFerror =:= undefined -> PFerror;
					      true -> NFerror
					   end,
				       subscription =
					   if PFsubscription /= undefined,
					      NFsubscription /= undefined ->
						  'merge_msg_ProtobufClient.ClientSubscription'(PFsubscription,
												NFsubscription,
												TrUserData);
					      PFsubscription == undefined ->
						  NFsubscription;
					      NFsubscription == undefined ->
						  PFsubscription
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.SubscriptionStatus'/3}).
'merge_msg_ProtobufStream.SubscriptionStatus'(#'ProtobufStream.SubscriptionStatus'{keys
										       =
										       PFkeys,
										   subscriptions
										       =
										       PFsubscriptions},
					      #'ProtobufStream.SubscriptionStatus'{keys
										       =
										       NFkeys,
										   subscriptions
										       =
										       NFsubscriptions},
					      TrUserData) ->
    #'ProtobufStream.SubscriptionStatus'{keys =
					     if PFkeys /= undefined,
						NFkeys /= undefined ->
						    'erlang_++'(PFkeys, NFkeys,
								TrUserData);
						PFkeys == undefined -> NFkeys;
						NFkeys == undefined -> PFkeys
					     end,
					 subscriptions =
					     if PFsubscriptions /= undefined,
						NFsubscriptions /= undefined ->
						    'erlang_++'(PFsubscriptions,
								NFsubscriptions,
								TrUserData);
						PFsubscriptions == undefined ->
						    NFsubscriptions;
						NFsubscriptions == undefined ->
						    PFsubscriptions
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufStream.MissedMessages'/3}).
'merge_msg_ProtobufStream.MissedMessages'(#'ProtobufStream.MissedMessages'{numMissedMessages
									       =
									       PFnumMissedMessages},
					  #'ProtobufStream.MissedMessages'{numMissedMessages
									       =
									       NFnumMissedMessages},
					  _) ->
    #'ProtobufStream.MissedMessages'{numMissedMessages =
					 if NFnumMissedMessages =:= undefined ->
						PFnumMissedMessages;
					    true -> NFnumMissedMessages
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientMessage'/3}).
'merge_msg_ProtobufClient.ClientMessage'(#'ProtobufClient.ClientMessage'{body
									     =
									     PFbody},
					 #'ProtobufClient.ClientMessage'{body =
									     NFbody},
					 TrUserData) ->
    #'ProtobufClient.ClientMessage'{body =
					case {PFbody, NFbody} of
					  {{identification, OPFbody},
					   {identification, ONFbody}} ->
					      {identification,
					       'merge_msg_ProtobufClient.ClientIdentificationMessage'(OPFbody,
												      ONFbody,
												      TrUserData)};
					  {{subscribe, OPFbody},
					   {subscribe, ONFbody}} ->
					      {subscribe,
					       'merge_msg_ProtobufClient.ClientSubscribeMessage'(OPFbody,
												 ONFbody,
												 TrUserData)};
					  {{unsubscribe, OPFbody},
					   {unsubscribe, ONFbody}} ->
					      {unsubscribe,
					       'merge_msg_ProtobufClient.ClientUnsubscribeMessage'(OPFbody,
												   ONFbody,
												   TrUserData)};
					  {{webAuthentication, OPFbody},
					   {webAuthentication, ONFbody}} ->
					      {webAuthentication,
					       'merge_msg_ProtobufClient.WebAuthenticationMessage'(OPFbody,
												   ONFbody,
												   TrUserData)};
					  {{apiAuthentication, OPFbody},
					   {apiAuthentication, ONFbody}} ->
					      {apiAuthentication,
					       'merge_msg_ProtobufClient.APIAuthenticationMessage'(OPFbody,
												   ONFbody,
												   TrUserData)};
					  {_, undefined} -> PFbody;
					  _ -> NFbody
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientIdentificationMessage'/3}).
'merge_msg_ProtobufClient.ClientIdentificationMessage'(#'ProtobufClient.ClientIdentificationMessage'{useragent
													 =
													 PFuseragent,
												     revision
													 =
													 PFrevision,
												     integration
													 =
													 PFintegration,
												     locale
													 =
													 PFlocale,
												     subscriptions
													 =
													 PFsubscriptions},
						       #'ProtobufClient.ClientIdentificationMessage'{useragent
													 =
													 NFuseragent,
												     revision
													 =
													 NFrevision,
												     integration
													 =
													 NFintegration,
												     locale
													 =
													 NFlocale,
												     subscriptions
													 =
													 NFsubscriptions},
						       TrUserData) ->
    #'ProtobufClient.ClientIdentificationMessage'{useragent
						      =
						      if NFuseragent =:=
							   undefined ->
							     PFuseragent;
							 true -> NFuseragent
						      end,
						  revision =
						      if NFrevision =:=
							   undefined ->
							     PFrevision;
							 true -> NFrevision
						      end,
						  integration =
						      if NFintegration =:=
							   undefined ->
							     PFintegration;
							 true -> NFintegration
						      end,
						  locale =
						      if NFlocale =:=
							   undefined ->
							     PFlocale;
							 true -> NFlocale
						      end,
						  subscriptions =
						      if PFsubscriptions /=
							   undefined,
							 NFsubscriptions /=
							   undefined ->
							     'erlang_++'(PFsubscriptions,
									 NFsubscriptions,
									 TrUserData);
							 PFsubscriptions ==
							   undefined ->
							     NFsubscriptions;
							 NFsubscriptions ==
							   undefined ->
							     PFsubscriptions
						      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.WebAuthenticationMessage'/3}).
'merge_msg_ProtobufClient.WebAuthenticationMessage'(#'ProtobufClient.WebAuthenticationMessage'{identification
												   =
												   PFidentification,
											       token
												   =
												   PFtoken,
											       nonce
												   =
												   PFnonce,
											       access_list
												   =
												   PFaccess_list},
						    #'ProtobufClient.WebAuthenticationMessage'{identification
												   =
												   NFidentification,
											       token
												   =
												   NFtoken,
											       nonce
												   =
												   NFnonce,
											       access_list
												   =
												   NFaccess_list},
						    TrUserData) ->
    #'ProtobufClient.WebAuthenticationMessage'{identification
						   =
						   if PFidentification /=
							undefined,
						      NFidentification /=
							undefined ->
							  'merge_msg_ProtobufClient.ClientIdentificationMessage'(PFidentification,
														 NFidentification,
														 TrUserData);
						      PFidentification ==
							undefined ->
							  NFidentification;
						      NFidentification ==
							undefined ->
							  PFidentification
						   end,
					       token =
						   if NFtoken =:= undefined ->
							  PFtoken;
						      true -> NFtoken
						   end,
					       nonce =
						   if NFnonce =:= undefined ->
							  PFnonce;
						      true -> NFnonce
						   end,
					       access_list =
						   if PFaccess_list /=
							undefined,
						      NFaccess_list /=
							undefined ->
							  'erlang_++'(PFaccess_list,
								      NFaccess_list,
								      TrUserData);
						      PFaccess_list ==
							undefined ->
							  NFaccess_list;
						      NFaccess_list ==
							undefined ->
							  PFaccess_list
						   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.TradeSessionAuth'/3}).
'merge_msg_ProtobufClient.TradeSessionAuth'(#'ProtobufClient.TradeSessionAuth'{api_key
										   =
										   PFapi_key,
									       api_secret
										   =
										   PFapi_secret,
									       customer_id
										   =
										   PFcustomer_id,
									       key_passphrase
										   =
										   PFkey_passphrase},
					    #'ProtobufClient.TradeSessionAuth'{api_key
										   =
										   NFapi_key,
									       api_secret
										   =
										   NFapi_secret,
									       customer_id
										   =
										   NFcustomer_id,
									       key_passphrase
										   =
										   NFkey_passphrase},
					    _) ->
    #'ProtobufClient.TradeSessionAuth'{api_key =
					   if NFapi_key =:= undefined ->
						  PFapi_key;
					      true -> NFapi_key
					   end,
				       api_secret =
					   if NFapi_secret =:= undefined ->
						  PFapi_secret;
					      true -> NFapi_secret
					   end,
				       customer_id =
					   if NFcustomer_id =:= undefined ->
						  PFcustomer_id;
					      true -> NFcustomer_id
					   end,
				       key_passphrase =
					   if NFkey_passphrase =:= undefined ->
						  PFkey_passphrase;
					      true -> NFkey_passphrase
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.TradeSubscription'/3}).
'merge_msg_ProtobufClient.TradeSubscription'(#'ProtobufClient.TradeSubscription'{marketId
										     =
										     PFmarketId,
										 auth
										     =
										     PFauth},
					     #'ProtobufClient.TradeSubscription'{marketId
										     =
										     NFmarketId,
										 auth
										     =
										     NFauth},
					     TrUserData) ->
    #'ProtobufClient.TradeSubscription'{marketId =
					    if NFmarketId =:= undefined ->
						   PFmarketId;
					       true -> NFmarketId
					    end,
					auth =
					    if PFauth /= undefined,
					       NFauth /= undefined ->
						   'merge_msg_ProtobufClient.TradeSessionAuth'(PFauth,
											       NFauth,
											       TrUserData);
					       PFauth == undefined -> NFauth;
					       NFauth == undefined -> PFauth
					    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.StreamSubscription'/3}).
'merge_msg_ProtobufClient.StreamSubscription'(#'ProtobufClient.StreamSubscription'{resource
										       =
										       PFresource},
					      #'ProtobufClient.StreamSubscription'{resource
										       =
										       NFresource},
					      _) ->
    #'ProtobufClient.StreamSubscription'{resource =
					     if NFresource =:= undefined ->
						    PFresource;
						true -> NFresource
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientSubscription'/3}).
'merge_msg_ProtobufClient.ClientSubscription'(#'ProtobufClient.ClientSubscription'{body
										       =
										       PFbody},
					      #'ProtobufClient.ClientSubscription'{body
										       =
										       NFbody},
					      TrUserData) ->
    #'ProtobufClient.ClientSubscription'{body =
					     case {PFbody, NFbody} of
					       {{stream_subscription, OPFbody},
						{stream_subscription,
						 ONFbody}} ->
						   {stream_subscription,
						    'merge_msg_ProtobufClient.StreamSubscription'(OPFbody,
												  ONFbody,
												  TrUserData)};
					       {{trade_subscription, OPFbody},
						{trade_subscription,
						 ONFbody}} ->
						   {trade_subscription,
						    'merge_msg_ProtobufClient.TradeSubscription'(OPFbody,
												 ONFbody,
												 TrUserData)};
					       {_, undefined} -> PFbody;
					       _ -> NFbody
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.APIAuthenticationMessage'/3}).
'merge_msg_ProtobufClient.APIAuthenticationMessage'(#'ProtobufClient.APIAuthenticationMessage'{token
												   =
												   PFtoken,
											       nonce
												   =
												   PFnonce,
											       api_key
												   =
												   PFapi_key,
											       source
												   =
												   PFsource,
											       version
												   =
												   PFversion,
											       subscriptions
												   =
												   PFsubscriptions,
											       client_subscriptions
												   =
												   PFclient_subscriptions},
						    #'ProtobufClient.APIAuthenticationMessage'{token
												   =
												   NFtoken,
											       nonce
												   =
												   NFnonce,
											       api_key
												   =
												   NFapi_key,
											       source
												   =
												   NFsource,
											       version
												   =
												   NFversion,
											       subscriptions
												   =
												   NFsubscriptions,
											       client_subscriptions
												   =
												   NFclient_subscriptions},
						    TrUserData) ->
    #'ProtobufClient.APIAuthenticationMessage'{token =
						   if NFtoken =:= undefined ->
							  PFtoken;
						      true -> NFtoken
						   end,
					       nonce =
						   if NFnonce =:= undefined ->
							  PFnonce;
						      true -> NFnonce
						   end,
					       api_key =
						   if NFapi_key =:= undefined ->
							  PFapi_key;
						      true -> NFapi_key
						   end,
					       source =
						   if NFsource =:= undefined ->
							  PFsource;
						      true -> NFsource
						   end,
					       version =
						   if NFversion =:= undefined ->
							  PFversion;
						      true -> NFversion
						   end,
					       subscriptions =
						   if PFsubscriptions /=
							undefined,
						      NFsubscriptions /=
							undefined ->
							  'erlang_++'(PFsubscriptions,
								      NFsubscriptions,
								      TrUserData);
						      PFsubscriptions ==
							undefined ->
							  NFsubscriptions;
						      NFsubscriptions ==
							undefined ->
							  PFsubscriptions
						   end,
					       client_subscriptions =
						   if PFclient_subscriptions /=
							undefined,
						      NFclient_subscriptions /=
							undefined ->
							  'erlang_++'(PFclient_subscriptions,
								      NFclient_subscriptions,
								      TrUserData);
						      PFclient_subscriptions ==
							undefined ->
							  NFclient_subscriptions;
						      NFclient_subscriptions ==
							undefined ->
							  PFclient_subscriptions
						   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientSessionMessage.Session'/3}).
'merge_msg_ProtobufClient.ClientSessionMessage.Session'(#'ProtobufClient.ClientSessionMessage.Session'{userId
													   =
													   PFuserId,
												       expires
													   =
													   PFexpires,
												       token
													   =
													   PFtoken,
												       mfaToken
													   =
													   PFmfaToken},
							#'ProtobufClient.ClientSessionMessage.Session'{userId
													   =
													   NFuserId,
												       expires
													   =
													   NFexpires,
												       token
													   =
													   NFtoken,
												       mfaToken
													   =
													   NFmfaToken},
							_) ->
    #'ProtobufClient.ClientSessionMessage.Session'{userId =
						       if NFuserId =:=
							    undefined ->
							      PFuserId;
							  true -> NFuserId
						       end,
						   expires =
						       if NFexpires =:=
							    undefined ->
							      PFexpires;
							  true -> NFexpires
						       end,
						   token =
						       if NFtoken =:=
							    undefined ->
							      PFtoken;
							  true -> NFtoken
						       end,
						   mfaToken =
						       if NFmfaToken =:=
							    undefined ->
							      PFmfaToken;
							  true -> NFmfaToken
						       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'/3}).
'merge_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(#'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
																	   =
																	   PFexchange,
																       token
																	   =
																	   PFtoken,
																       expiration
																	   =
																	   PFexpiration},
									#'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
																	   =
																	   NFexchange,
																       token
																	   =
																	   NFtoken,
																       expiration
																	   =
																	   NFexpiration},
									_) ->
    #'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
								       =
								       if
									 NFexchange
									   =:=
									   undefined ->
									     PFexchange;
									 true ->
									     NFexchange
								       end,
								   token =
								       if
									 NFtoken
									   =:=
									   undefined ->
									     PFtoken;
									 true ->
									     NFtoken
								       end,
								   expiration =
								       if
									 NFexpiration
									   =:=
									   undefined ->
									     PFexpiration;
									 true ->
									     NFexpiration
								       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientSessionMessage'/3}).
'merge_msg_ProtobufClient.ClientSessionMessage'(#'ProtobufClient.ClientSessionMessage'{'SessionConfig'
											   =
											   PFSessionConfig},
						#'ProtobufClient.ClientSessionMessage'{'SessionConfig'
											   =
											   NFSessionConfig},
						TrUserData) ->
    #'ProtobufClient.ClientSessionMessage'{'SessionConfig' =
					       case {PFSessionConfig,
						     NFSessionConfig}
						   of
						 {{session, OPFSessionConfig},
						  {session,
						   ONFSessionConfig}} ->
						     {session,
						      'merge_msg_ProtobufClient.ClientSessionMessage.Session'(OPFSessionConfig,
													      ONFSessionConfig,
													      TrUserData)};
						 {{anonymousTradingSession,
						   OPFSessionConfig},
						  {anonymousTradingSession,
						   ONFSessionConfig}} ->
						     {anonymousTradingSession,
						      'merge_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(OPFSessionConfig,
															      ONFSessionConfig,
															      TrUserData)};
						 {_, undefined} ->
						     PFSessionConfig;
						 _ -> NFSessionConfig
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientSubscribeMessage'/3}).
'merge_msg_ProtobufClient.ClientSubscribeMessage'(#'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
											       =
											       PFsubscriptionKeys,
											   subscriptions
											       =
											       PFsubscriptions},
						  #'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
											       =
											       NFsubscriptionKeys,
											   subscriptions
											       =
											       NFsubscriptions},
						  TrUserData) ->
    #'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
						 =
						 if PFsubscriptionKeys /=
						      undefined,
						    NFsubscriptionKeys /=
						      undefined ->
							'erlang_++'(PFsubscriptionKeys,
								    NFsubscriptionKeys,
								    TrUserData);
						    PFsubscriptionKeys ==
						      undefined ->
							NFsubscriptionKeys;
						    NFsubscriptionKeys ==
						      undefined ->
							PFsubscriptionKeys
						 end,
					     subscriptions =
						 if PFsubscriptions /=
						      undefined,
						    NFsubscriptions /=
						      undefined ->
							'erlang_++'(PFsubscriptions,
								    NFsubscriptions,
								    TrUserData);
						    PFsubscriptions ==
						      undefined ->
							NFsubscriptions;
						    NFsubscriptions ==
						      undefined ->
							PFsubscriptions
						 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufClient.ClientUnsubscribeMessage'/3}).
'merge_msg_ProtobufClient.ClientUnsubscribeMessage'(#'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
												   =
												   PFsubscriptionKeys,
											       subscriptions
												   =
												   PFsubscriptions},
						    #'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
												   =
												   NFsubscriptionKeys,
											       subscriptions
												   =
												   NFsubscriptions},
						    TrUserData) ->
    #'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
						   =
						   if PFsubscriptionKeys /=
							undefined,
						      NFsubscriptionKeys /=
							undefined ->
							  'erlang_++'(PFsubscriptionKeys,
								      NFsubscriptionKeys,
								      TrUserData);
						      PFsubscriptionKeys ==
							undefined ->
							  NFsubscriptionKeys;
						      NFsubscriptionKeys ==
							undefined ->
							  PFsubscriptionKeys
						   end,
					       subscriptions =
						   if PFsubscriptions /=
							undefined,
						      NFsubscriptions /=
							undefined ->
							  'erlang_++'(PFsubscriptions,
								      NFsubscriptions,
								      TrUserData);
						      PFsubscriptions ==
							undefined ->
							  NFsubscriptions;
						      NFsubscriptions ==
							undefined ->
							  PFsubscriptions
						   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Market'/3}).
'merge_msg_ProtobufMarkets.Market'(#'ProtobufMarkets.Market'{exchangeId
								 = PFexchangeId,
							     currencyPairId =
								 PFcurrencyPairId,
							     marketId =
								 PFmarketId,
							     exchange =
								 PFexchange,
							     currencyPair =
								 PFcurrencyPair},
				   #'ProtobufMarkets.Market'{exchangeId =
								 NFexchangeId,
							     currencyPairId =
								 NFcurrencyPairId,
							     marketId =
								 NFmarketId,
							     exchange =
								 NFexchange,
							     currencyPair =
								 NFcurrencyPair},
				   _) ->
    #'ProtobufMarkets.Market'{exchangeId =
				  if NFexchangeId =:= undefined -> PFexchangeId;
				     true -> NFexchangeId
				  end,
			      currencyPairId =
				  if NFcurrencyPairId =:= undefined ->
					 PFcurrencyPairId;
				     true -> NFcurrencyPairId
				  end,
			      marketId =
				  if NFmarketId =:= undefined -> PFmarketId;
				     true -> NFmarketId
				  end,
			      exchange =
				  if NFexchange =:= undefined -> PFexchange;
				     true -> NFexchange
				  end,
			      currencyPair =
				  if NFcurrencyPair =:= undefined ->
					 PFcurrencyPair;
				     true -> NFcurrencyPair
				  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Order'/3}).
'merge_msg_ProtobufMarkets.Order'(#'ProtobufMarkets.Order'{priceStr
							       = PFpriceStr,
							   amountStr =
							       PFamountStr,
							   price = PFprice,
							   amount = PFamount},
				  #'ProtobufMarkets.Order'{priceStr =
							       NFpriceStr,
							   amountStr =
							       NFamountStr,
							   price = NFprice,
							   amount = NFamount},
				  _) ->
    #'ProtobufMarkets.Order'{priceStr =
				 if NFpriceStr =:= undefined -> PFpriceStr;
				    true -> NFpriceStr
				 end,
			     amountStr =
				 if NFamountStr =:= undefined -> PFamountStr;
				    true -> NFamountStr
				 end,
			     price =
				 if NFprice =:= undefined -> PFprice;
				    true -> NFprice
				 end,
			     amount =
				 if NFamount =:= undefined -> PFamount;
				    true -> NFamount
				 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Trade'/3}).
'merge_msg_ProtobufMarkets.Trade'(#'ProtobufMarkets.Trade'{externalId
							       = PFexternalId,
							   timestamp =
							       PFtimestamp,
							   timestampMillis =
							       PFtimestampMillis,
							   timestampNano =
							       PFtimestampNano,
							   priceStr =
							       PFpriceStr,
							   amountStr =
							       PFamountStr,
							   price = PFprice,
							   amount = PFamount,
							   priceDouble =
							       PFpriceDouble,
							   amountDouble =
							       PFamountDouble,
							   id = PFid},
				  #'ProtobufMarkets.Trade'{externalId =
							       NFexternalId,
							   timestamp =
							       NFtimestamp,
							   timestampMillis =
							       NFtimestampMillis,
							   timestampNano =
							       NFtimestampNano,
							   priceStr =
							       NFpriceStr,
							   amountStr =
							       NFamountStr,
							   price = NFprice,
							   amount = NFamount,
							   priceDouble =
							       NFpriceDouble,
							   amountDouble =
							       NFamountDouble,
							   id = NFid},
				  _) ->
    #'ProtobufMarkets.Trade'{externalId =
				 if NFexternalId =:= undefined -> PFexternalId;
				    true -> NFexternalId
				 end,
			     timestamp =
				 if NFtimestamp =:= undefined -> PFtimestamp;
				    true -> NFtimestamp
				 end,
			     timestampMillis =
				 if NFtimestampMillis =:= undefined ->
					PFtimestampMillis;
				    true -> NFtimestampMillis
				 end,
			     timestampNano =
				 if NFtimestampNano =:= undefined ->
					PFtimestampNano;
				    true -> NFtimestampNano
				 end,
			     priceStr =
				 if NFpriceStr =:= undefined -> PFpriceStr;
				    true -> NFpriceStr
				 end,
			     amountStr =
				 if NFamountStr =:= undefined -> PFamountStr;
				    true -> NFamountStr
				 end,
			     price =
				 if NFprice =:= undefined -> PFprice;
				    true -> NFprice
				 end,
			     amount =
				 if NFamount =:= undefined -> PFamount;
				    true -> NFamount
				 end,
			     priceDouble =
				 if NFpriceDouble =:= undefined ->
					PFpriceDouble;
				    true -> NFpriceDouble
				 end,
			     amountDouble =
				 if NFamountDouble =:= undefined ->
					PFamountDouble;
				    true -> NFamountDouble
				 end,
			     id =
				 if NFid =:= undefined -> PFid;
				    true -> NFid
				 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.MarketUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.MarketUpdateMessage'(#'ProtobufMarkets.MarketUpdateMessage'{market
											   =
											   PFmarket,
										       'Update'
											   =
											   PFUpdate},
						#'ProtobufMarkets.MarketUpdateMessage'{market
											   =
											   NFmarket,
										       'Update'
											   =
											   NFUpdate},
						TrUserData) ->
    #'ProtobufMarkets.MarketUpdateMessage'{market =
					       if PFmarket /= undefined,
						  NFmarket /= undefined ->
						      'merge_msg_ProtobufMarkets.Market'(PFmarket,
											 NFmarket,
											 TrUserData);
						  PFmarket == undefined ->
						      NFmarket;
						  NFmarket == undefined ->
						      PFmarket
					       end,
					   'Update' =
					       case {PFUpdate, NFUpdate} of
						 {{orderBookUpdate, OPFUpdate},
						  {orderBookUpdate,
						   ONFUpdate}} ->
						     {orderBookUpdate,
						      'merge_msg_ProtobufMarkets.OrderBookUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						 {{orderBookDeltaUpdate,
						   OPFUpdate},
						  {orderBookDeltaUpdate,
						   ONFUpdate}} ->
						     {orderBookDeltaUpdate,
						      'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(OPFUpdate,
												       ONFUpdate,
												       TrUserData)};
						 {{orderBookSpreadUpdate,
						   OPFUpdate},
						  {orderBookSpreadUpdate,
						   ONFUpdate}} ->
						     {orderBookSpreadUpdate,
						      'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(OPFUpdate,
													ONFUpdate,
													TrUserData)};
						 {{tradesUpdate, OPFUpdate},
						  {tradesUpdate, ONFUpdate}} ->
						     {tradesUpdate,
						      'merge_msg_ProtobufMarkets.TradesUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
						 {{intervalsUpdate, OPFUpdate},
						  {intervalsUpdate,
						   ONFUpdate}} ->
						     {intervalsUpdate,
						      'merge_msg_ProtobufMarkets.IntervalsUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						 {{summaryUpdate, OPFUpdate},
						  {summaryUpdate, ONFUpdate}} ->
						     {summaryUpdate,
						      'merge_msg_ProtobufMarkets.SummaryUpdate'(OPFUpdate,
												ONFUpdate,
												TrUserData)};
						 {{sparklineUpdate, OPFUpdate},
						  {sparklineUpdate,
						   ONFUpdate}} ->
						     {sparklineUpdate,
						      'merge_msg_ProtobufMarkets.SparklineUpdate'(OPFUpdate,
												  ONFUpdate,
												  TrUserData)};
						 {_, undefined} -> PFUpdate;
						 _ -> NFUpdate
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookUpdate'/3}).
'merge_msg_ProtobufMarkets.OrderBookUpdate'(#'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
										   =
										   PFaggregationModulusStr,
									       seqNum
										   =
										   PFseqNum,
									       bids
										   =
										   PFbids,
									       asks
										   =
										   PFasks,
									       aggregationModulus
										   =
										   PFaggregationModulus},
					    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
										   =
										   NFaggregationModulusStr,
									       seqNum
										   =
										   NFseqNum,
									       bids
										   =
										   NFbids,
									       asks
										   =
										   NFasks,
									       aggregationModulus
										   =
										   NFaggregationModulus},
					    TrUserData) ->
    #'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
					   =
					   if NFaggregationModulusStr =:=
						undefined ->
						  PFaggregationModulusStr;
					      true -> NFaggregationModulusStr
					   end,
				       seqNum =
					   if NFseqNum =:= undefined ->
						  PFseqNum;
					      true -> NFseqNum
					   end,
				       bids =
					   if PFbids /= undefined,
					      NFbids /= undefined ->
						  'erlang_++'(PFbids, NFbids,
							      TrUserData);
					      PFbids == undefined -> NFbids;
					      NFbids == undefined -> PFbids
					   end,
				       asks =
					   if PFasks /= undefined,
					      NFasks /= undefined ->
						  'erlang_++'(PFasks, NFasks,
							      TrUserData);
					      PFasks == undefined -> NFasks;
					      NFasks == undefined -> PFasks
					   end,
				       aggregationModulus =
					   if NFaggregationModulus =:=
						undefined ->
						  PFaggregationModulus;
					      true -> NFaggregationModulus
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/3}).
'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(#'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														     =
														     PFset,
														 delta
														     =
														     PFdelta,
														 remove
														     =
														     PFremove,
														 removeStr
														     =
														     PFremoveStr},
							     #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														     =
														     NFset,
														 delta
														     =
														     NFdelta,
														 remove
														     =
														     NFremove,
														 removeStr
														     =
														     NFremoveStr},
							     TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
							    =
							    if PFset /=
								 undefined,
							       NFset /=
								 undefined ->
								   'erlang_++'(PFset,
									       NFset,
									       TrUserData);
							       PFset ==
								 undefined ->
								   NFset;
							       NFset ==
								 undefined ->
								   PFset
							    end,
							delta =
							    if PFdelta /=
								 undefined,
							       NFdelta /=
								 undefined ->
								   'erlang_++'(PFdelta,
									       NFdelta,
									       TrUserData);
							       PFdelta ==
								 undefined ->
								   NFdelta;
							       NFdelta ==
								 undefined ->
								   PFdelta
							    end,
							remove =
							    if PFremove /=
								 undefined,
							       NFremove /=
								 undefined ->
								   'erlang_++'(PFremove,
									       NFremove,
									       TrUserData);
							       PFremove ==
								 undefined ->
								   NFremove;
							       NFremove ==
								 undefined ->
								   PFremove
							    end,
							removeStr =
							    if PFremoveStr /=
								 undefined,
							       NFremoveStr /=
								 undefined ->
								   'erlang_++'(PFremoveStr,
									       NFremoveStr,
									       TrUserData);
							       PFremoveStr ==
								 undefined ->
								   NFremoveStr;
							       NFremoveStr ==
								 undefined ->
								   PFremoveStr
							    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'/3}).
'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate'(#'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											     =
											     PFaggregationModulus,
											 aggregationModulusStr
											     =
											     PFaggregationModulusStr,
											 seqNum
											     =
											     PFseqNum,
											 bids
											     =
											     PFbids,
											 asks
											     =
											     PFasks},
						 #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											     =
											     NFaggregationModulus,
											 aggregationModulusStr
											     =
											     NFaggregationModulusStr,
											 seqNum
											     =
											     NFseqNum,
											 bids
											     =
											     NFbids,
											 asks
											     =
											     NFasks},
						 TrUserData) ->
    #'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
						=
						if NFaggregationModulus =:=
						     undefined ->
						       PFaggregationModulus;
						   true -> NFaggregationModulus
						end,
					    aggregationModulusStr =
						if NFaggregationModulusStr =:=
						     undefined ->
						       PFaggregationModulusStr;
						   true ->
						       NFaggregationModulusStr
						end,
					    seqNum =
						if NFseqNum =:= undefined ->
						       PFseqNum;
						   true -> NFseqNum
						end,
					    bids =
						if PFbids /= undefined,
						   NFbids /= undefined ->
						       'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(PFbids,
														    NFbids,
														    TrUserData);
						   PFbids == undefined ->
						       NFbids;
						   NFbids == undefined -> PFbids
						end,
					    asks =
						if PFasks /= undefined,
						   NFasks /= undefined ->
						       'merge_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(PFasks,
														    NFasks,
														    TrUserData);
						   PFasks == undefined ->
						       NFasks;
						   NFasks == undefined -> PFasks
						end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'/3}).
'merge_msg_ProtobufMarkets.OrderBookSpreadUpdate'(#'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
											       =
											       PFtimestamp,
											   bid
											       =
											       PFbid,
											   ask
											       =
											       PFask},
						  #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
											       =
											       NFtimestamp,
											   bid
											       =
											       NFbid,
											   ask
											       =
											       NFask},
						  TrUserData) ->
    #'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp =
						 if NFtimestamp =:= undefined ->
							PFtimestamp;
						    true -> NFtimestamp
						 end,
					     bid =
						 if PFbid /= undefined,
						    NFbid /= undefined ->
							'merge_msg_ProtobufMarkets.Order'(PFbid,
											  NFbid,
											  TrUserData);
						    PFbid == undefined -> NFbid;
						    NFbid == undefined -> PFbid
						 end,
					     ask =
						 if PFask /= undefined,
						    NFask /= undefined ->
							'merge_msg_ProtobufMarkets.Order'(PFask,
											  NFask,
											  TrUserData);
						    PFask == undefined -> NFask;
						    NFask == undefined -> PFask
						 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.TradesUpdate'/3}).
'merge_msg_ProtobufMarkets.TradesUpdate'(#'ProtobufMarkets.TradesUpdate'{trades
									     =
									     PFtrades},
					 #'ProtobufMarkets.TradesUpdate'{trades
									     =
									     NFtrades},
					 TrUserData) ->
    #'ProtobufMarkets.TradesUpdate'{trades =
					if PFtrades /= undefined,
					   NFtrades /= undefined ->
					       'erlang_++'(PFtrades, NFtrades,
							   TrUserData);
					   PFtrades == undefined -> NFtrades;
					   NFtrades == undefined -> PFtrades
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Interval.OHLC'/3}).
'merge_msg_ProtobufMarkets.Interval.OHLC'(#'ProtobufMarkets.Interval.OHLC'{openStr
									       =
									       PFopenStr,
									   highStr
									       =
									       PFhighStr,
									   lowStr
									       =
									       PFlowStr,
									   closeStr
									       =
									       PFcloseStr,
									   open
									       =
									       PFopen,
									   high
									       =
									       PFhigh,
									   low =
									       PFlow,
									   close
									       =
									       PFclose},
					  #'ProtobufMarkets.Interval.OHLC'{openStr
									       =
									       NFopenStr,
									   highStr
									       =
									       NFhighStr,
									   lowStr
									       =
									       NFlowStr,
									   closeStr
									       =
									       NFcloseStr,
									   open
									       =
									       NFopen,
									   high
									       =
									       NFhigh,
									   low =
									       NFlow,
									   close
									       =
									       NFclose},
					  _) ->
    #'ProtobufMarkets.Interval.OHLC'{openStr =
					 if NFopenStr =:= undefined ->
						PFopenStr;
					    true -> NFopenStr
					 end,
				     highStr =
					 if NFhighStr =:= undefined ->
						PFhighStr;
					    true -> NFhighStr
					 end,
				     lowStr =
					 if NFlowStr =:= undefined -> PFlowStr;
					    true -> NFlowStr
					 end,
				     closeStr =
					 if NFcloseStr =:= undefined ->
						PFcloseStr;
					    true -> NFcloseStr
					 end,
				     open =
					 if NFopen =:= undefined -> PFopen;
					    true -> NFopen
					 end,
				     high =
					 if NFhigh =:= undefined -> PFhigh;
					    true -> NFhigh
					 end,
				     low =
					 if NFlow =:= undefined -> PFlow;
					    true -> NFlow
					 end,
				     close =
					 if NFclose =:= undefined -> PFclose;
					    true -> NFclose
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Interval'/3}).
'merge_msg_ProtobufMarkets.Interval'(#'ProtobufMarkets.Interval'{closetime
								     =
								     PFclosetime,
								 period =
								     PFperiod,
								 ohlc = PFohlc,
								 volumeBaseStr =
								     PFvolumeBaseStr,
								 volumeQuoteStr
								     =
								     PFvolumeQuoteStr,
								 volumeBase =
								     PFvolumeBase,
								 volumeQuote =
								     PFvolumeQuote},
				     #'ProtobufMarkets.Interval'{closetime =
								     NFclosetime,
								 period =
								     NFperiod,
								 ohlc = NFohlc,
								 volumeBaseStr =
								     NFvolumeBaseStr,
								 volumeQuoteStr
								     =
								     NFvolumeQuoteStr,
								 volumeBase =
								     NFvolumeBase,
								 volumeQuote =
								     NFvolumeQuote},
				     TrUserData) ->
    #'ProtobufMarkets.Interval'{closetime =
				    if NFclosetime =:= undefined -> PFclosetime;
				       true -> NFclosetime
				    end,
				period =
				    if NFperiod =:= undefined -> PFperiod;
				       true -> NFperiod
				    end,
				ohlc =
				    if PFohlc /= undefined,
				       NFohlc /= undefined ->
					   'merge_msg_ProtobufMarkets.Interval.OHLC'(PFohlc,
										     NFohlc,
										     TrUserData);
				       PFohlc == undefined -> NFohlc;
				       NFohlc == undefined -> PFohlc
				    end,
				volumeBaseStr =
				    if NFvolumeBaseStr =:= undefined ->
					   PFvolumeBaseStr;
				       true -> NFvolumeBaseStr
				    end,
				volumeQuoteStr =
				    if NFvolumeQuoteStr =:= undefined ->
					   PFvolumeQuoteStr;
				       true -> NFvolumeQuoteStr
				    end,
				volumeBase =
				    if NFvolumeBase =:= undefined ->
					   PFvolumeBase;
				       true -> NFvolumeBase
				    end,
				volumeQuote =
				    if NFvolumeQuote =:= undefined ->
					   PFvolumeQuote;
				       true -> NFvolumeQuote
				    end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.IntervalsUpdate'/3}).
'merge_msg_ProtobufMarkets.IntervalsUpdate'(#'ProtobufMarkets.IntervalsUpdate'{intervals
										   =
										   PFintervals},
					    #'ProtobufMarkets.IntervalsUpdate'{intervals
										   =
										   NFintervals},
					    TrUserData) ->
    #'ProtobufMarkets.IntervalsUpdate'{intervals =
					   if PFintervals /= undefined,
					      NFintervals /= undefined ->
						  'erlang_++'(PFintervals,
							      NFintervals,
							      TrUserData);
					      PFintervals == undefined ->
						  NFintervals;
					      NFintervals == undefined ->
						  PFintervals
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.SummaryUpdate'/3}).
'merge_msg_ProtobufMarkets.SummaryUpdate'(#'ProtobufMarkets.SummaryUpdate'{lastStr
									       =
									       PFlastStr,
									   highStr
									       =
									       PFhighStr,
									   lowStr
									       =
									       PFlowStr,
									   volumeBaseStr
									       =
									       PFvolumeBaseStr,
									   volumeQuoteStr
									       =
									       PFvolumeQuoteStr,
									   changeAbsoluteStr
									       =
									       PFchangeAbsoluteStr,
									   changePercentStr
									       =
									       PFchangePercentStr,
									   numTrades
									       =
									       PFnumTrades,
									   last
									       =
									       PFlast,
									   high
									       =
									       PFhigh,
									   low =
									       PFlow,
									   volumeBase
									       =
									       PFvolumeBase,
									   volumeQuote
									       =
									       PFvolumeQuote,
									   changeAbsolute
									       =
									       PFchangeAbsolute,
									   changePercent
									       =
									       PFchangePercent},
					  #'ProtobufMarkets.SummaryUpdate'{lastStr
									       =
									       NFlastStr,
									   highStr
									       =
									       NFhighStr,
									   lowStr
									       =
									       NFlowStr,
									   volumeBaseStr
									       =
									       NFvolumeBaseStr,
									   volumeQuoteStr
									       =
									       NFvolumeQuoteStr,
									   changeAbsoluteStr
									       =
									       NFchangeAbsoluteStr,
									   changePercentStr
									       =
									       NFchangePercentStr,
									   numTrades
									       =
									       NFnumTrades,
									   last
									       =
									       NFlast,
									   high
									       =
									       NFhigh,
									   low =
									       NFlow,
									   volumeBase
									       =
									       NFvolumeBase,
									   volumeQuote
									       =
									       NFvolumeQuote,
									   changeAbsolute
									       =
									       NFchangeAbsolute,
									   changePercent
									       =
									       NFchangePercent},
					  _) ->
    #'ProtobufMarkets.SummaryUpdate'{lastStr =
					 if NFlastStr =:= undefined ->
						PFlastStr;
					    true -> NFlastStr
					 end,
				     highStr =
					 if NFhighStr =:= undefined ->
						PFhighStr;
					    true -> NFhighStr
					 end,
				     lowStr =
					 if NFlowStr =:= undefined -> PFlowStr;
					    true -> NFlowStr
					 end,
				     volumeBaseStr =
					 if NFvolumeBaseStr =:= undefined ->
						PFvolumeBaseStr;
					    true -> NFvolumeBaseStr
					 end,
				     volumeQuoteStr =
					 if NFvolumeQuoteStr =:= undefined ->
						PFvolumeQuoteStr;
					    true -> NFvolumeQuoteStr
					 end,
				     changeAbsoluteStr =
					 if NFchangeAbsoluteStr =:= undefined ->
						PFchangeAbsoluteStr;
					    true -> NFchangeAbsoluteStr
					 end,
				     changePercentStr =
					 if NFchangePercentStr =:= undefined ->
						PFchangePercentStr;
					    true -> NFchangePercentStr
					 end,
				     numTrades =
					 if NFnumTrades =:= undefined ->
						PFnumTrades;
					    true -> NFnumTrades
					 end,
				     last =
					 if NFlast =:= undefined -> PFlast;
					    true -> NFlast
					 end,
				     high =
					 if NFhigh =:= undefined -> PFhigh;
					    true -> NFhigh
					 end,
				     low =
					 if NFlow =:= undefined -> PFlow;
					    true -> NFlow
					 end,
				     volumeBase =
					 if NFvolumeBase =:= undefined ->
						PFvolumeBase;
					    true -> NFvolumeBase
					 end,
				     volumeQuote =
					 if NFvolumeQuote =:= undefined ->
						PFvolumeQuote;
					    true -> NFvolumeQuote
					 end,
				     changeAbsolute =
					 if NFchangeAbsolute =:= undefined ->
						PFchangeAbsolute;
					    true -> NFchangeAbsolute
					 end,
				     changePercent =
					 if NFchangePercent =:= undefined ->
						PFchangePercent;
					    true -> NFchangePercent
					 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.SparklineUpdate'/3}).
'merge_msg_ProtobufMarkets.SparklineUpdate'(#'ProtobufMarkets.SparklineUpdate'{time
										   =
										   PFtime,
									       price
										   =
										   PFprice,
									       priceStr
										   =
										   PFpriceStr},
					    #'ProtobufMarkets.SparklineUpdate'{time
										   =
										   NFtime,
									       price
										   =
										   NFprice,
									       priceStr
										   =
										   NFpriceStr},
					    _) ->
    #'ProtobufMarkets.SparklineUpdate'{time =
					   if NFtime =:= undefined -> PFtime;
					      true -> NFtime
					   end,
				       price =
					   if NFprice =:= undefined -> PFprice;
					      true -> NFprice
					   end,
				       priceStr =
					   if NFpriceStr =:= undefined ->
						  PFpriceStr;
					      true -> NFpriceStr
					   end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Index'/3}).
'merge_msg_ProtobufMarkets.Index'(#'ProtobufMarkets.Index'{id
							       = PFid,
							   symbol = PFsymbol,
							   indexType =
							       PFindexType,
							   cwIndex = PFcwIndex,
							   exchangeId =
							       PFexchangeId,
							   instrumentId =
							       PFinstrumentId},
				  #'ProtobufMarkets.Index'{id = NFid,
							   symbol = NFsymbol,
							   indexType =
							       NFindexType,
							   cwIndex = NFcwIndex,
							   exchangeId =
							       NFexchangeId,
							   instrumentId =
							       NFinstrumentId},
				  _) ->
    #'ProtobufMarkets.Index'{id =
				 if NFid =:= undefined -> PFid;
				    true -> NFid
				 end,
			     symbol =
				 if NFsymbol =:= undefined -> PFsymbol;
				    true -> NFsymbol
				 end,
			     indexType =
				 if NFindexType =:= undefined -> PFindexType;
				    true -> NFindexType
				 end,
			     cwIndex =
				 if NFcwIndex =:= undefined -> PFcwIndex;
				    true -> NFcwIndex
				 end,
			     exchangeId =
				 if NFexchangeId =:= undefined -> PFexchangeId;
				    true -> NFexchangeId
				 end,
			     instrumentId =
				 if NFinstrumentId =:= undefined ->
					PFinstrumentId;
				    true -> NFinstrumentId
				 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.IndexUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.IndexUpdateMessage'(#'ProtobufMarkets.IndexUpdateMessage'{index
											 =
											 PFindex,
										     'Update'
											 =
											 PFUpdate},
					       #'ProtobufMarkets.IndexUpdateMessage'{index
											 =
											 NFindex,
										     'Update'
											 =
											 NFUpdate},
					       TrUserData) ->
    #'ProtobufMarkets.IndexUpdateMessage'{index =
					      if PFindex /= undefined,
						 NFindex /= undefined ->
						     'merge_msg_ProtobufMarkets.Index'(PFindex,
										       NFindex,
										       TrUserData);
						 PFindex == undefined ->
						     NFindex;
						 NFindex == undefined -> PFindex
					      end,
					  'Update' =
					      case {PFUpdate, NFUpdate} of
						{{tickerUpdate, OPFUpdate},
						 {tickerUpdate, ONFUpdate}} ->
						    {tickerUpdate,
						     'merge_msg_ProtobufMarkets.TickerUpdate'(OPFUpdate,
											      ONFUpdate,
											      TrUserData)};
						{{intervalsUpdate, OPFUpdate},
						 {intervalsUpdate,
						  ONFUpdate}} ->
						    {intervalsUpdate,
						     'merge_msg_ProtobufMarkets.IntervalsUpdate'(OPFUpdate,
												 ONFUpdate,
												 TrUserData)};
						{{summaryUpdate, OPFUpdate},
						 {summaryUpdate, ONFUpdate}} ->
						    {summaryUpdate,
						     'merge_msg_ProtobufMarkets.SummaryUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
						{{sparklineUpdate, OPFUpdate},
						 {sparklineUpdate,
						  ONFUpdate}} ->
						    {sparklineUpdate,
						     'merge_msg_ProtobufMarkets.SparklineUpdate'(OPFUpdate,
												 ONFUpdate,
												 TrUserData)};
						{_, undefined} -> PFUpdate;
						_ -> NFUpdate
					      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.TickerUpdate'/3}).
'merge_msg_ProtobufMarkets.TickerUpdate'(#'ProtobufMarkets.TickerUpdate'{tickers
									     =
									     PFtickers},
					 #'ProtobufMarkets.TickerUpdate'{tickers
									     =
									     NFtickers},
					 TrUserData) ->
    #'ProtobufMarkets.TickerUpdate'{tickers =
					if PFtickers /= undefined,
					   NFtickers /= undefined ->
					       'erlang_++'(PFtickers, NFtickers,
							   TrUserData);
					   PFtickers == undefined -> NFtickers;
					   NFtickers == undefined -> PFtickers
					end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.Ticker'/3}).
'merge_msg_ProtobufMarkets.Ticker'(#'ProtobufMarkets.Ticker'{value
								 = PFvalue,
							     timestamp =
								 PFtimestamp,
							     timestampNano =
								 PFtimestampNano},
				   #'ProtobufMarkets.Ticker'{value = NFvalue,
							     timestamp =
								 NFtimestamp,
							     timestampNano =
								 NFtimestampNano},
				   _) ->
    #'ProtobufMarkets.Ticker'{value =
				  if NFvalue =:= undefined -> PFvalue;
				     true -> NFvalue
				  end,
			      timestamp =
				  if NFtimestamp =:= undefined -> PFtimestamp;
				     true -> NFtimestamp
				  end,
			      timestampNano =
				  if NFtimestampNano =:= undefined ->
					 PFtimestampNano;
				     true -> NFtimestampNano
				  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.PairUpdateMessage'(#'ProtobufMarkets.PairUpdateMessage'{pair
										       =
										       PFpair,
										   'Update'
										       =
										       PFUpdate},
					      #'ProtobufMarkets.PairUpdateMessage'{pair
										       =
										       NFpair,
										   'Update'
										       =
										       NFUpdate},
					      TrUserData) ->
    #'ProtobufMarkets.PairUpdateMessage'{pair =
					     if NFpair =:= undefined -> PFpair;
						true -> NFpair
					     end,
					 'Update' =
					     case {PFUpdate, NFUpdate} of
					       {{vwapUpdate, OPFUpdate},
						{vwapUpdate, ONFUpdate}} ->
						   {vwapUpdate,
						    'merge_msg_ProtobufMarkets.PairVwapUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
					       {{performanceUpdate, OPFUpdate},
						{performanceUpdate,
						 ONFUpdate}} ->
						   {performanceUpdate,
						    'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(OPFUpdate,
												      ONFUpdate,
												      TrUserData)};
					       {{trendlineUpdate, OPFUpdate},
						{trendlineUpdate, ONFUpdate}} ->
						   {trendlineUpdate,
						    'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(OPFUpdate,
												    ONFUpdate,
												    TrUserData)};
					       {_, undefined} -> PFUpdate;
					       _ -> NFUpdate
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairVwapUpdate'/3}).
'merge_msg_ProtobufMarkets.PairVwapUpdate'(#'ProtobufMarkets.PairVwapUpdate'{vwap
										 =
										 PFvwap,
									     timestamp
										 =
										 PFtimestamp},
					   #'ProtobufMarkets.PairVwapUpdate'{vwap
										 =
										 NFvwap,
									     timestamp
										 =
										 NFtimestamp},
					   _) ->
    #'ProtobufMarkets.PairVwapUpdate'{vwap =
					  if NFvwap =:= undefined -> PFvwap;
					     true -> NFvwap
					  end,
				      timestamp =
					  if NFtimestamp =:= undefined ->
						 PFtimestamp;
					     true -> NFtimestamp
					  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairPerformanceUpdate'/3}).
'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(#'ProtobufMarkets.PairPerformanceUpdate'{window
											       =
											       PFwindow,
											   performance
											       =
											       PFperformance},
						  #'ProtobufMarkets.PairPerformanceUpdate'{window
											       =
											       NFwindow,
											   performance
											       =
											       NFperformance},
						  _) ->
    #'ProtobufMarkets.PairPerformanceUpdate'{window =
						 if NFwindow =:= undefined ->
							PFwindow;
						    true -> NFwindow
						 end,
					     performance =
						 if NFperformance =:=
						      undefined ->
							PFperformance;
						    true -> NFperformance
						 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairTrendlineUpdate'/3}).
'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(#'ProtobufMarkets.PairTrendlineUpdate'{window
											   =
											   PFwindow,
										       time
											   =
											   PFtime,
										       price
											   =
											   PFprice,
										       volume
											   =
											   PFvolume},
						#'ProtobufMarkets.PairTrendlineUpdate'{window
											   =
											   NFwindow,
										       time
											   =
											   NFtime,
										       price
											   =
											   NFprice,
										       volume
											   =
											   NFvolume},
						_) ->
    #'ProtobufMarkets.PairTrendlineUpdate'{window =
					       if NFwindow =:= undefined ->
						      PFwindow;
						  true -> NFwindow
					       end,
					   time =
					       if NFtime =:= undefined ->
						      PFtime;
						  true -> NFtime
					       end,
					   price =
					       if NFprice =:= undefined ->
						      PFprice;
						  true -> NFprice
					       end,
					   volume =
					       if NFvolume =:= undefined ->
						      PFvolume;
						  true -> NFvolume
					       end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.AssetUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.AssetUpdateMessage'(#'ProtobufMarkets.AssetUpdateMessage'{asset
											 =
											 PFasset,
										     'Update'
											 =
											 PFUpdate},
					       #'ProtobufMarkets.AssetUpdateMessage'{asset
											 =
											 NFasset,
										     'Update'
											 =
											 NFUpdate},
					       TrUserData) ->
    #'ProtobufMarkets.AssetUpdateMessage'{asset =
					      if NFasset =:= undefined ->
						     PFasset;
						 true -> NFasset
					      end,
					  'Update' =
					      case {PFUpdate, NFUpdate} of
						{{usdVolumeUpdate, OPFUpdate},
						 {usdVolumeUpdate,
						  ONFUpdate}} ->
						    {usdVolumeUpdate,
						     'merge_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(OPFUpdate,
												      ONFUpdate,
												      TrUserData)};
						{_, undefined} -> PFUpdate;
						_ -> NFUpdate
					      end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.AssetUSDVolumeUpdate'/3}).
'merge_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(#'ProtobufMarkets.AssetUSDVolumeUpdate'{volume
											     =
											     PFvolume},
						 #'ProtobufMarkets.AssetUSDVolumeUpdate'{volume
											     =
											     NFvolume},
						 _) ->
    #'ProtobufMarkets.AssetUSDVolumeUpdate'{volume =
						if NFvolume =:= undefined ->
						       PFvolume;
						   true -> NFvolume
						end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufBroker.BrokerSessionMessage.Session' ->
	  'v_msg_ProtobufBroker.BrokerSessionMessage.Session'(Msg,
							      [MsgName],
							      TrUserData);
      'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession' ->
	  'v_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(Msg,
									      [MsgName],
									      TrUserData);
      'ProtobufBroker.BrokerSessionMessage' ->
	  'v_msg_ProtobufBroker.BrokerSessionMessage'(Msg,
						      [MsgName], TrUserData);
      'ProtobufBroker.PlaceOrderRequest' ->
	  'v_msg_ProtobufBroker.PlaceOrderRequest'(Msg, [MsgName],
						   TrUserData);
      'ProtobufBroker.PlaceOrderResult' ->
	  'v_msg_ProtobufBroker.PlaceOrderResult'(Msg, [MsgName],
						  TrUserData);
      'ProtobufBroker.CancelOrderRequest' ->
	  'v_msg_ProtobufBroker.CancelOrderRequest'(Msg,
						    [MsgName], TrUserData);
      'ProtobufBroker.CancelOrderResult' ->
	  'v_msg_ProtobufBroker.CancelOrderResult'(Msg, [MsgName],
						   TrUserData);
      'ProtobufBroker.ReplaceOrderRequest' ->
	  'v_msg_ProtobufBroker.ReplaceOrderRequest'(Msg,
						     [MsgName], TrUserData);
      'ProtobufBroker.ClosePositionRequest' ->
	  'v_msg_ProtobufBroker.ClosePositionRequest'(Msg,
						      [MsgName], TrUserData);
      'ProtobufBroker.SyncRequest' ->
	  'v_msg_ProtobufBroker.SyncRequest'(Msg, [MsgName],
					     TrUserData);
      'ProtobufBroker.BrokerRequest' ->
	  'v_msg_ProtobufBroker.BrokerRequest'(Msg, [MsgName],
					       TrUserData);
      'ProtobufBroker.OrdersUpdate' ->
	  'v_msg_ProtobufBroker.OrdersUpdate'(Msg, [MsgName],
					      TrUserData);
      'ProtobufBroker.TradesUpdate' ->
	  'v_msg_ProtobufBroker.TradesUpdate'(Msg, [MsgName],
					      TrUserData);
      'ProtobufBroker.PositionsUpdate' ->
	  'v_msg_ProtobufBroker.PositionsUpdate'(Msg, [MsgName],
						 TrUserData);
      'ProtobufBroker.BalancesUpdate' ->
	  'v_msg_ProtobufBroker.BalancesUpdate'(Msg, [MsgName],
						TrUserData);
      'ProtobufBroker.RequestResolutionUpdate' ->
	  'v_msg_ProtobufBroker.RequestResolutionUpdate'(Msg,
							 [MsgName], TrUserData);
      'ProtobufBroker.AnonymousSessionStatusUpdate' ->
	  'v_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(Msg,
							      [MsgName],
							      TrUserData);
      'ProtobufBroker.SessionStatusUpdate' ->
	  'v_msg_ProtobufBroker.SessionStatusUpdate'(Msg,
						     [MsgName], TrUserData);
      'ProtobufBroker.PermissionsUpdate.Agreement' ->
	  'v_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Msg,
							     [MsgName],
							     TrUserData);
      'ProtobufBroker.PermissionsUpdate.LeverageLevels' ->
	  'v_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(Msg,
								  [MsgName],
								  TrUserData);
      'ProtobufBroker.PermissionsUpdate' ->
	  'v_msg_ProtobufBroker.PermissionsUpdate'(Msg, [MsgName],
						   TrUserData);
      'ProtobufBroker.APIAccessorStatusUpdate' ->
	  'v_msg_ProtobufBroker.APIAccessorStatusUpdate'(Msg,
							 [MsgName], TrUserData);
      'ProtobufBroker.BrokerUpdateMessage' ->
	  'v_msg_ProtobufBroker.BrokerUpdateMessage'(Msg,
						     [MsgName], TrUserData);
      'ProtobufBroker.PrivateOrder.PriceParam' ->
	  'v_msg_ProtobufBroker.PrivateOrder.PriceParam'(Msg,
							 [MsgName], TrUserData);
      'ProtobufBroker.PrivateOrder' ->
	  'v_msg_ProtobufBroker.PrivateOrder'(Msg, [MsgName],
					      TrUserData);
      'ProtobufBroker.PrivateTrade' ->
	  'v_msg_ProtobufBroker.PrivateTrade'(Msg, [MsgName],
					      TrUserData);
      'ProtobufBroker.PrivatePosition' ->
	  'v_msg_ProtobufBroker.PrivatePosition'(Msg, [MsgName],
						 TrUserData);
      'ProtobufBroker.Balance' ->
	  'v_msg_ProtobufBroker.Balance'(Msg, [MsgName],
					 TrUserData);
      'ProtobufBroker.Balances' ->
	  'v_msg_ProtobufBroker.Balances'(Msg, [MsgName],
					  TrUserData);
      'ProtobufStream.StreamMessage' ->
	  'v_msg_ProtobufStream.StreamMessage'(Msg, [MsgName],
					       TrUserData);
      'ProtobufStream.AuthenticationResult' ->
	  'v_msg_ProtobufStream.AuthenticationResult'(Msg,
						      [MsgName], TrUserData);
      'ProtobufStream.SubscriptionResult' ->
	  'v_msg_ProtobufStream.SubscriptionResult'(Msg,
						    [MsgName], TrUserData);
      'ProtobufStream.UnsubscriptionResult' ->
	  'v_msg_ProtobufStream.UnsubscriptionResult'(Msg,
						      [MsgName], TrUserData);
      'ProtobufStream.SubscribeError' ->
	  'v_msg_ProtobufStream.SubscribeError'(Msg, [MsgName],
						TrUserData);
      'ProtobufStream.UnsubscribeError' ->
	  'v_msg_ProtobufStream.UnsubscribeError'(Msg, [MsgName],
						  TrUserData);
      'ProtobufStream.SubscriptionStatus' ->
	  'v_msg_ProtobufStream.SubscriptionStatus'(Msg,
						    [MsgName], TrUserData);
      'ProtobufStream.MissedMessages' ->
	  'v_msg_ProtobufStream.MissedMessages'(Msg, [MsgName],
						TrUserData);
      'ProtobufClient.ClientMessage' ->
	  'v_msg_ProtobufClient.ClientMessage'(Msg, [MsgName],
					       TrUserData);
      'ProtobufClient.ClientIdentificationMessage' ->
	  'v_msg_ProtobufClient.ClientIdentificationMessage'(Msg,
							     [MsgName],
							     TrUserData);
      'ProtobufClient.WebAuthenticationMessage' ->
	  'v_msg_ProtobufClient.WebAuthenticationMessage'(Msg,
							  [MsgName],
							  TrUserData);
      'ProtobufClient.TradeSessionAuth' ->
	  'v_msg_ProtobufClient.TradeSessionAuth'(Msg, [MsgName],
						  TrUserData);
      'ProtobufClient.TradeSubscription' ->
	  'v_msg_ProtobufClient.TradeSubscription'(Msg, [MsgName],
						   TrUserData);
      'ProtobufClient.StreamSubscription' ->
	  'v_msg_ProtobufClient.StreamSubscription'(Msg,
						    [MsgName], TrUserData);
      'ProtobufClient.ClientSubscription' ->
	  'v_msg_ProtobufClient.ClientSubscription'(Msg,
						    [MsgName], TrUserData);
      'ProtobufClient.APIAuthenticationMessage' ->
	  'v_msg_ProtobufClient.APIAuthenticationMessage'(Msg,
							  [MsgName],
							  TrUserData);
      'ProtobufClient.ClientSessionMessage.Session' ->
	  'v_msg_ProtobufClient.ClientSessionMessage.Session'(Msg,
							      [MsgName],
							      TrUserData);
      'ProtobufClient.ClientSessionMessage.AnonymousTradingSession' ->
	  'v_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(Msg,
									      [MsgName],
									      TrUserData);
      'ProtobufClient.ClientSessionMessage' ->
	  'v_msg_ProtobufClient.ClientSessionMessage'(Msg,
						      [MsgName], TrUserData);
      'ProtobufClient.ClientSubscribeMessage' ->
	  'v_msg_ProtobufClient.ClientSubscribeMessage'(Msg,
							[MsgName], TrUserData);
      'ProtobufClient.ClientUnsubscribeMessage' ->
	  'v_msg_ProtobufClient.ClientUnsubscribeMessage'(Msg,
							  [MsgName],
							  TrUserData);
      'ProtobufMarkets.Market' ->
	  'v_msg_ProtobufMarkets.Market'(Msg, [MsgName],
					 TrUserData);
      'ProtobufMarkets.Order' ->
	  'v_msg_ProtobufMarkets.Order'(Msg, [MsgName],
					TrUserData);
      'ProtobufMarkets.Trade' ->
	  'v_msg_ProtobufMarkets.Trade'(Msg, [MsgName],
					TrUserData);
      'ProtobufMarkets.MarketUpdateMessage' ->
	  'v_msg_ProtobufMarkets.MarketUpdateMessage'(Msg,
						      [MsgName], TrUserData);
      'ProtobufMarkets.OrderBookUpdate' ->
	  'v_msg_ProtobufMarkets.OrderBookUpdate'(Msg, [MsgName],
						  TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas' ->
	  'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(Msg,
								   [MsgName],
								   TrUserData);
      'ProtobufMarkets.OrderBookDeltaUpdate' ->
	  'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(Msg,
						       [MsgName], TrUserData);
      'ProtobufMarkets.OrderBookSpreadUpdate' ->
	  'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(Msg,
							[MsgName], TrUserData);
      'ProtobufMarkets.TradesUpdate' ->
	  'v_msg_ProtobufMarkets.TradesUpdate'(Msg, [MsgName],
					       TrUserData);
      'ProtobufMarkets.Interval.OHLC' ->
	  'v_msg_ProtobufMarkets.Interval.OHLC'(Msg, [MsgName],
						TrUserData);
      'ProtobufMarkets.Interval' ->
	  'v_msg_ProtobufMarkets.Interval'(Msg, [MsgName],
					   TrUserData);
      'ProtobufMarkets.IntervalsUpdate' ->
	  'v_msg_ProtobufMarkets.IntervalsUpdate'(Msg, [MsgName],
						  TrUserData);
      'ProtobufMarkets.SummaryUpdate' ->
	  'v_msg_ProtobufMarkets.SummaryUpdate'(Msg, [MsgName],
						TrUserData);
      'ProtobufMarkets.SparklineUpdate' ->
	  'v_msg_ProtobufMarkets.SparklineUpdate'(Msg, [MsgName],
						  TrUserData);
      'ProtobufMarkets.Index' ->
	  'v_msg_ProtobufMarkets.Index'(Msg, [MsgName],
					TrUserData);
      'ProtobufMarkets.IndexUpdateMessage' ->
	  'v_msg_ProtobufMarkets.IndexUpdateMessage'(Msg,
						     [MsgName], TrUserData);
      'ProtobufMarkets.TickerUpdate' ->
	  'v_msg_ProtobufMarkets.TickerUpdate'(Msg, [MsgName],
					       TrUserData);
      'ProtobufMarkets.Ticker' ->
	  'v_msg_ProtobufMarkets.Ticker'(Msg, [MsgName],
					 TrUserData);
      'ProtobufMarkets.PairUpdateMessage' ->
	  'v_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
						    [MsgName], TrUserData);
      'ProtobufMarkets.PairVwapUpdate' ->
	  'v_msg_ProtobufMarkets.PairVwapUpdate'(Msg, [MsgName],
						 TrUserData);
      'ProtobufMarkets.PairPerformanceUpdate' ->
	  'v_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
							[MsgName], TrUserData);
      'ProtobufMarkets.PairTrendlineUpdate' ->
	  'v_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
						      [MsgName], TrUserData);
      'ProtobufMarkets.AssetUpdateMessage' ->
	  'v_msg_ProtobufMarkets.AssetUpdateMessage'(Msg,
						     [MsgName], TrUserData);
      'ProtobufMarkets.AssetUSDVolumeUpdate' ->
	  'v_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(Msg,
						       [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_ProtobufBroker.BrokerSessionMessage.Session'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.BrokerSessionMessage.Session'/3}).
'v_msg_ProtobufBroker.BrokerSessionMessage.Session'(#'ProtobufBroker.BrokerSessionMessage.Session'{userId
												       =
												       F1,
												   expires
												       =
												       F2,
												   token
												       =
												       F3,
												   mfaToken
												       =
												       F4},
						    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [expires | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [token | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [mfaToken | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.BrokerSessionMessage.Session'(X,
						    Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.BrokerSessionMessage.Session'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'/3}).
'v_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(#'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'{exchange
																       =
																       F1,
																   token
																       =
																       F2,
																   expiration
																       =
																       F3},
								    Path,
								    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [exchange | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [token | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [expiration | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(X,
								    Path,
								    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.BrokerSessionMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.BrokerSessionMessage'/3}).
'v_msg_ProtobufBroker.BrokerSessionMessage'(#'ProtobufBroker.BrokerSessionMessage'{'SessionConfig'
										       =
										       F1,
										   marketId
										       =
										       F2},
					    Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {session, OF1} ->
	  'v_msg_ProtobufBroker.BrokerSessionMessage.Session'(OF1,
							      [session,
							       'SessionConfig'
							       | Path],
							      TrUserData);
      {anonymousTradingSession, OF1} ->
	  'v_msg_ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'(OF1,
									      [anonymousTradingSession,
									       'SessionConfig'
									       | Path],
									      TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F1,
			['SessionConfig' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [marketId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.BrokerSessionMessage'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.BrokerSessionMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PlaceOrderRequest'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PlaceOrderRequest'/3}).
'v_msg_ProtobufBroker.PlaceOrderRequest'(#'ProtobufBroker.PlaceOrderRequest'{order
										 =
										 F1,
									     closingOrder
										 =
										 F2},
					 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufBroker.PrivateOrder'(F1, [order | Path],
					       TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_ProtobufBroker.PrivateOrder'(F2,
					       [closingOrder | Path],
					       TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PlaceOrderRequest'(X, Path,
					 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PlaceOrderRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PlaceOrderResult'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PlaceOrderResult'/3}).
'v_msg_ProtobufBroker.PlaceOrderResult'(#'ProtobufBroker.PlaceOrderResult'{order
									       =
									       F1,
									   orderId
									       =
									       F2},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufBroker.PrivateOrder'(F1, [order | Path],
					       TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [orderId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PlaceOrderResult'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PlaceOrderResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.CancelOrderRequest'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.CancelOrderRequest'/3}).
'v_msg_ProtobufBroker.CancelOrderRequest'(#'ProtobufBroker.CancelOrderRequest'{orderId
										   =
										   F1},
					  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [orderId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.CancelOrderRequest'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.CancelOrderRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.CancelOrderResult'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.CancelOrderResult'/3}).
'v_msg_ProtobufBroker.CancelOrderResult'(#'ProtobufBroker.CancelOrderResult'{orderId
										 =
										 F1},
					 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [orderId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.CancelOrderResult'(X, Path,
					 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.CancelOrderResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.ReplaceOrderRequest'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.ReplaceOrderRequest'/3}).
'v_msg_ProtobufBroker.ReplaceOrderRequest'(#'ProtobufBroker.ReplaceOrderRequest'{orderId
										     =
										     F1,
										 replacement
										     =
										     F2,
										 replacementClosingOrder
										     =
										     F3},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [orderId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_ProtobufBroker.PrivateOrder'(F2,
					       [replacement | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufBroker.PrivateOrder'(F3,
					       [replacementClosingOrder | Path],
					       TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.ReplaceOrderRequest'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.ReplaceOrderRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.ClosePositionRequest'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.ClosePositionRequest'/3}).
'v_msg_ProtobufBroker.ClosePositionRequest'(#'ProtobufBroker.ClosePositionRequest'{positionId
										       =
										       F1},
					    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [positionId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.ClosePositionRequest'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.ClosePositionRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.SyncRequest'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.SyncRequest'/3}).
'v_msg_ProtobufBroker.SyncRequest'(#'ProtobufBroker.SyncRequest'{},
				   _Path, _) ->
    ok;
'v_msg_ProtobufBroker.SyncRequest'(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.SyncRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.BrokerRequest'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.BrokerRequest'/3}).
'v_msg_ProtobufBroker.BrokerRequest'(#'ProtobufBroker.BrokerRequest'{id
									 = F1,
								     marketId =
									 F2,
								     'Request' =
									 F3},
				     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [marketId | Path], TrUserData)
    end,
    case F3 of
      undefined -> ok;
      {placeOrderRequest, OF3} ->
	  'v_msg_ProtobufBroker.PlaceOrderRequest'(OF3,
						   [placeOrderRequest, 'Request'
						    | Path],
						   TrUserData);
      {cancelOrderRequest, OF3} ->
	  'v_msg_ProtobufBroker.CancelOrderRequest'(OF3,
						    [cancelOrderRequest,
						     'Request'
						     | Path],
						    TrUserData);
      {replaceOrderRequest, OF3} ->
	  'v_msg_ProtobufBroker.ReplaceOrderRequest'(OF3,
						     [replaceOrderRequest,
						      'Request'
						      | Path],
						     TrUserData);
      {syncRequest, OF3} ->
	  'v_msg_ProtobufBroker.SyncRequest'(OF3,
					     [syncRequest, 'Request' | Path],
					     TrUserData);
      {closePositionRequest, OF3} ->
	  'v_msg_ProtobufBroker.ClosePositionRequest'(OF3,
						      [closePositionRequest,
						       'Request'
						       | Path],
						      TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F3, ['Request' | Path])
    end,
    ok;
'v_msg_ProtobufBroker.BrokerRequest'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.BrokerRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.OrdersUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.OrdersUpdate'/3}).
'v_msg_ProtobufBroker.OrdersUpdate'(#'ProtobufBroker.OrdersUpdate'{orders
								       = F1},
				    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufBroker.PrivateOrder'(Elem,
						    [orders | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivateOrder'}},
			 F1, [orders | Path])
    end,
    ok;
'v_msg_ProtobufBroker.OrdersUpdate'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.OrdersUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.TradesUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.TradesUpdate'/3}).
'v_msg_ProtobufBroker.TradesUpdate'(#'ProtobufBroker.TradesUpdate'{trades
								       = F1},
				    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufBroker.PrivateTrade'(Elem,
						    [trades | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivateTrade'}},
			 F1, [trades | Path])
    end,
    ok;
'v_msg_ProtobufBroker.TradesUpdate'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.TradesUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PositionsUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PositionsUpdate'/3}).
'v_msg_ProtobufBroker.PositionsUpdate'(#'ProtobufBroker.PositionsUpdate'{positions
									     =
									     F1},
				       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufBroker.PrivatePosition'(Elem,
						       [positions | Path],
						       TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivatePosition'}},
			 F1, [positions | Path])
    end,
    ok;
'v_msg_ProtobufBroker.PositionsUpdate'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PositionsUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.BalancesUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.BalancesUpdate'/3}).
'v_msg_ProtobufBroker.BalancesUpdate'(#'ProtobufBroker.BalancesUpdate'{balances
									   =
									   F1},
				      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufBroker.Balances'(Elem,
						[balances | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.Balances'}},
			 F1, [balances | Path])
    end,
    ok;
'v_msg_ProtobufBroker.BalancesUpdate'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.BalancesUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.RequestResolutionUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.RequestResolutionUpdate'/3}).
'v_msg_ProtobufBroker.RequestResolutionUpdate'(#'ProtobufBroker.RequestResolutionUpdate'{id
											     =
											     F1,
											 error
											     =
											     F2,
											 message
											     =
											     F3,
											 'Result'
											     =
											     F4},
					       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [error | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [message | Path], TrUserData)
    end,
    case F4 of
      undefined -> ok;
      {placeOrderResult, OF4} ->
	  'v_msg_ProtobufBroker.PlaceOrderResult'(OF4,
						  [placeOrderResult, 'Result'
						   | Path],
						  TrUserData);
      {cancelOrderResult, OF4} ->
	  'v_msg_ProtobufBroker.CancelOrderResult'(OF4,
						   [cancelOrderResult, 'Result'
						    | Path],
						   TrUserData);
      _ -> mk_type_error(invalid_oneof, F4, ['Result' | Path])
    end,
    ok;
'v_msg_ProtobufBroker.RequestResolutionUpdate'(X, Path,
					       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.RequestResolutionUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.AnonymousSessionStatusUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.AnonymousSessionStatusUpdate'/3}).
'v_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(#'ProtobufBroker.AnonymousSessionStatusUpdate'{expiration
												       =
												       F1,
												   token
												       =
												       F2},
						    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_int64(F1, [expiration | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [token | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(X,
						    Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.AnonymousSessionStatusUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.SessionStatusUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.SessionStatusUpdate'/3}).
'v_msg_ProtobufBroker.SessionStatusUpdate'(#'ProtobufBroker.SessionStatusUpdate'{initialized
										     =
										     F1,
										 syncing
										     =
										     F2,
										 lastSyncTime
										     =
										     F3,
										 syncError
										     =
										     F4},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_bool(F1, [initialized | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [syncing | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [lastSyncTime | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [syncError | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.SessionStatusUpdate'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.SessionStatusUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PermissionsUpdate.Agreement'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PermissionsUpdate.Agreement'/3}).
'v_msg_ProtobufBroker.PermissionsUpdate.Agreement'(#'ProtobufBroker.PermissionsUpdate.Agreement'{key
												     =
												     F1,
												 body
												     =
												     F2},
						   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [body | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PermissionsUpdate.Agreement'(X,
						   Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PermissionsUpdate.Agreement'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'/3}).
'v_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(#'ProtobufBroker.PermissionsUpdate.LeverageLevels'{buy
													       =
													       F1,
													   sell
													       =
													       F2},
							Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [buy | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [buy | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [sell | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [sell | Path])
    end,
    ok;
'v_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(X,
							Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PermissionsUpdate.LeverageLevels'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PermissionsUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PermissionsUpdate'/3}).
'v_msg_ProtobufBroker.PermissionsUpdate'(#'ProtobufBroker.PermissionsUpdate'{orderTypes
										 =
										 F1,
									     fundingTypes
										 =
										 F2,
									     agreements
										 =
										 F3,
									     currencyPairAllowed
										 =
										 F4,
									     leverageLevels
										 =
										 F5,
									     supportsOrderExpiry
										 =
										 F6},
					 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_enum_ProtobufBroker.PrivateOrder.Type'(Elem,
							  [orderTypes | Path],
							  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {enum, 'ProtobufBroker.PrivateOrder.Type'}},
			 F1, [orderTypes | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_enum_ProtobufBroker.FundingType'(Elem,
						    [fundingTypes | Path],
						    TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {enum, 'ProtobufBroker.FundingType'}},
			 F2, [fundingTypes | Path])
    end,
    if is_list(F3) ->
	   _ =
	       ['v_msg_ProtobufBroker.PermissionsUpdate.Agreement'(Elem,
								   [agreements
								    | Path],
								   TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PermissionsUpdate.Agreement'}},
			 F3, [agreements | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bool(F4, [currencyPairAllowed | Path],
		       TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_ProtobufBroker.PermissionsUpdate.LeverageLevels'(F5,
								   [leverageLevels
								    | Path],
								   TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_bool(F6, [supportsOrderExpiry | Path],
		       TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PermissionsUpdate'(X, Path,
					 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PermissionsUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.APIAccessorStatusUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.APIAccessorStatusUpdate'/3}).
'v_msg_ProtobufBroker.APIAccessorStatusUpdate'(#'ProtobufBroker.APIAccessorStatusUpdate'{hasAccess
											     =
											     F1,
											 status
											     =
											     F2,
											 statusString
											     =
											     F3},
					       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [hasAccess | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [status | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [statusString | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.APIAccessorStatusUpdate'(X, Path,
					       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.APIAccessorStatusUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.BrokerUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.BrokerUpdateMessage'/3}).
'v_msg_ProtobufBroker.BrokerUpdateMessage'(#'ProtobufBroker.BrokerUpdateMessage'{marketId
										     =
										     F1,
										 'Update'
										     =
										     F2},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [marketId | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {ordersUpdate, OF2} ->
	  'v_msg_ProtobufBroker.OrdersUpdate'(OF2,
					      [ordersUpdate, 'Update' | Path],
					      TrUserData);
      {tradesUpdate, OF2} ->
	  'v_msg_ProtobufBroker.TradesUpdate'(OF2,
					      [tradesUpdate, 'Update' | Path],
					      TrUserData);
      {balancesUpdate, OF2} ->
	  'v_msg_ProtobufBroker.BalancesUpdate'(OF2,
						[balancesUpdate, 'Update'
						 | Path],
						TrUserData);
      {positionsUpdate, OF2} ->
	  'v_msg_ProtobufBroker.PositionsUpdate'(OF2,
						 [positionsUpdate, 'Update'
						  | Path],
						 TrUserData);
      {requestResolutionUpdate, OF2} ->
	  'v_msg_ProtobufBroker.RequestResolutionUpdate'(OF2,
							 [requestResolutionUpdate,
							  'Update'
							  | Path],
							 TrUserData);
      {anonymousSessionStatusUpdate, OF2} ->
	  'v_msg_ProtobufBroker.AnonymousSessionStatusUpdate'(OF2,
							      [anonymousSessionStatusUpdate,
							       'Update'
							       | Path],
							      TrUserData);
      {permissionsUpdate, OF2} ->
	  'v_msg_ProtobufBroker.PermissionsUpdate'(OF2,
						   [permissionsUpdate, 'Update'
						    | Path],
						   TrUserData);
      {sessionStatusUpdate, OF2} ->
	  'v_msg_ProtobufBroker.SessionStatusUpdate'(OF2,
						     [sessionStatusUpdate,
						      'Update'
						      | Path],
						     TrUserData);
      {apiAccessorStatusUpdate, OF2} ->
	  'v_msg_ProtobufBroker.APIAccessorStatusUpdate'(OF2,
							 [apiAccessorStatusUpdate,
							  'Update'
							  | Path],
							 TrUserData);
      {authenticationResult, OF2} ->
	  'v_msg_ProtobufStream.AuthenticationResult'(OF2,
						      [authenticationResult,
						       'Update'
						       | Path],
						      TrUserData);
      {subscriptionResult, OF2} ->
	  'v_msg_ProtobufStream.SubscriptionResult'(OF2,
						    [subscriptionResult,
						     'Update'
						     | Path],
						    TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufBroker.BrokerUpdateMessage'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.BrokerUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivateOrder.PriceParam'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivateOrder.PriceParam'/3}).
'v_msg_ProtobufBroker.PrivateOrder.PriceParam'(#'ProtobufBroker.PrivateOrder.PriceParam'{value
											     =
											     F1,
											 valueString
											     =
											     F2,
											 type
											     =
											     F3},
					       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_float(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [valueString | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'(F3,
							       [type | Path],
							       TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PrivateOrder.PriceParam'(X, Path,
					       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivateOrder.PriceParam'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivateOrder'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivateOrder'/3}).
'v_msg_ProtobufBroker.PrivateOrder'(#'ProtobufBroker.PrivateOrder'{id
								       = F1,
								   time = F2,
								   price = F3,
								   amount = F4,
								   side = F5,
								   type = F6,
								   fundingType =
								       F7,
								   priceParams =
								       F8,
								   amountParam =
								       F9,
								   amountParamString
								       = F10,
								   amountFilledString
								       = F11,
								   leverage =
								       F12,
								   currentStop =
								       F13,
								   initialStop =
								       F14,
								   currentStopString
								       = F15,
								   initialStopString
								       = F16,
								   startTime =
								       F17,
								   expireTime =
								       F18,
								   rate = F19,
								   hasClosingOrder
								       = F20,
								   closingOrderType
								       = F21,
								   closingOrderPriceParams
								       = F22},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_float(F3, [price | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [amount | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [side | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.PrivateOrder.Type'(F6,
						     [type | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.FundingType'(F7,
					       [fundingType | Path], TrUserData)
    end,
    if is_list(F8) ->
	   _ =
	       ['v_msg_ProtobufBroker.PrivateOrder.PriceParam'(Elem,
							       [priceParams
								| Path],
							       TrUserData)
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivateOrder.PriceParam'}},
			 F8, [priceParams | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_float(F9, [amountParam | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_string(F10, [amountParamString | Path],
			 TrUserData)
    end,
    if F11 == undefined -> ok;
       true ->
	   v_type_string(F11, [amountFilledString | Path],
			 TrUserData)
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_string(F12, [leverage | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_float(F13, [currentStop | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true ->
	   v_type_float(F14, [initialStop | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true ->
	   v_type_string(F15, [currentStopString | Path],
			 TrUserData)
    end,
    if F16 == undefined -> ok;
       true ->
	   v_type_string(F16, [initialStopString | Path],
			 TrUserData)
    end,
    if F17 == undefined -> ok;
       true ->
	   v_type_int64(F17, [startTime | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true ->
	   v_type_int64(F18, [expireTime | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true -> v_type_float(F19, [rate | Path], TrUserData)
    end,
    if F20 == undefined -> ok;
       true ->
	   v_type_bool(F20, [hasClosingOrder | Path], TrUserData)
    end,
    if F21 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.PrivateOrder.Type'(F21,
						     [closingOrderType | Path],
						     TrUserData)
    end,
    if is_list(F22) ->
	   _ =
	       ['v_msg_ProtobufBroker.PrivateOrder.PriceParam'(Elem,
							       [closingOrderPriceParams
								| Path],
							       TrUserData)
		|| Elem <- F22],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.PrivateOrder.PriceParam'}},
			 F22, [closingOrderPriceParams | Path])
    end,
    ok;
'v_msg_ProtobufBroker.PrivateOrder'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivateOrder'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivateTrade'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivateTrade'/3}).
'v_msg_ProtobufBroker.PrivateTrade'(#'ProtobufBroker.PrivateTrade'{externalId
								       = F1,
								   orderId = F2,
								   time = F3,
								   timeMillis =
								       F4,
								   price = F5,
								   priceString =
								       F6,
								   amount = F7,
								   amountString
								       = F8,
								   side = F9,
								   id = F10},
				    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [externalId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [orderId | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [time | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [timeMillis | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_float(F5, [price | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [priceString | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [amount | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_string(F8, [amountString | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [side | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.PrivateTrade'(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivateTrade'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.PrivatePosition'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.PrivatePosition'/3}).
'v_msg_ProtobufBroker.PrivatePosition'(#'ProtobufBroker.PrivatePosition'{id
									     =
									     F1,
									 time =
									     F2,
									 side =
									     F3,
									 avgPrice
									     =
									     F4,
									 avgPriceString
									     =
									     F5,
									 amountOpen
									     =
									     F6,
									 amountClosed
									     =
									     F7,
									 amountOpenString
									     =
									     F8,
									 amountClosedString
									     =
									     F9,
									 orderIds
									     =
									     F10,
									 tradeIds
									     =
									     F11},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [side | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [avgPrice | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [avgPriceString | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_float(F6, [amountOpen | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_float(F7, [amountClosed | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_type_string(F8, [amountOpenString | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_string(F9, [amountClosedString | Path],
			 TrUserData)
    end,
    if is_list(F10) ->
	   _ = [v_type_string(Elem, [orderIds | Path], TrUserData)
		|| Elem <- F10],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F10,
			 [orderIds | Path])
    end,
    if is_list(F11) ->
	   _ = [v_type_string(Elem, [tradeIds | Path], TrUserData)
		|| Elem <- F11],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F11,
			 [tradeIds | Path])
    end,
    ok;
'v_msg_ProtobufBroker.PrivatePosition'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufBroker.PrivatePosition'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.Balance'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.Balance'/3}).
'v_msg_ProtobufBroker.Balance'(#'ProtobufBroker.Balance'{currency
							     = F1,
							 amount = F2,
							 amountString = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [currency | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [amount | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [amountString | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufBroker.Balance'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufBroker.Balance'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufBroker.Balances'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufBroker.Balances'/3}).
'v_msg_ProtobufBroker.Balances'(#'ProtobufBroker.Balances'{fundingType
							       = F1,
							   balances = F2},
				Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_ProtobufBroker.FundingType'(F1,
					       [fundingType | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufBroker.Balance'(Elem,
					       [balances | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufBroker.Balance'}},
			 F2, [balances | Path])
    end,
    ok;
'v_msg_ProtobufBroker.Balances'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufBroker.Balances'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.StreamMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.StreamMessage'/3}).
'v_msg_ProtobufStream.StreamMessage'(#'ProtobufStream.StreamMessage'{body
									 = F1},
				     Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {authenticationResult, OF1} ->
	  'v_msg_ProtobufStream.AuthenticationResult'(OF1,
						      [authenticationResult,
						       body
						       | Path],
						      TrUserData);
      {subscriptionResult, OF1} ->
	  'v_msg_ProtobufStream.SubscriptionResult'(OF1,
						    [subscriptionResult, body
						     | Path],
						    TrUserData);
      {unsubscriptionResult, OF1} ->
	  'v_msg_ProtobufStream.UnsubscriptionResult'(OF1,
						      [unsubscriptionResult,
						       body
						       | Path],
						      TrUserData);
      {missedMessages, OF1} ->
	  'v_msg_ProtobufStream.MissedMessages'(OF1,
						[missedMessages, body | Path],
						TrUserData);
      {marketUpdate, OF1} ->
	  'v_msg_ProtobufMarkets.MarketUpdateMessage'(OF1,
						      [marketUpdate, body
						       | Path],
						      TrUserData);
      {pairUpdate, OF1} ->
	  'v_msg_ProtobufMarkets.PairUpdateMessage'(OF1,
						    [pairUpdate, body | Path],
						    TrUserData);
      {assetUpdate, OF1} ->
	  'v_msg_ProtobufMarkets.AssetUpdateMessage'(OF1,
						     [assetUpdate, body | Path],
						     TrUserData);
      {indexUpdate, OF1} ->
	  'v_msg_ProtobufMarkets.IndexUpdateMessage'(OF1,
						     [indexUpdate, body | Path],
						     TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [body | Path])
    end,
    ok;
'v_msg_ProtobufStream.StreamMessage'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.StreamMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.AuthenticationResult'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.AuthenticationResult'/3}).
'v_msg_ProtobufStream.AuthenticationResult'(#'ProtobufStream.AuthenticationResult'{status
										       =
										       F1},
					    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_ProtobufStream.AuthenticationResult.Status'(F1,
							       [status | Path],
							       TrUserData)
    end,
    ok;
'v_msg_ProtobufStream.AuthenticationResult'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.AuthenticationResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.SubscriptionResult'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.SubscriptionResult'/3}).
'v_msg_ProtobufStream.SubscriptionResult'(#'ProtobufStream.SubscriptionResult'{subscribed
										   =
										   F1,
									       failed
										   =
										   F2,
									       status
										   =
										   F3,
									       subscriptions
										   =
										   F4},
					  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [subscribed | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [subscribed | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufStream.SubscribeError'(Elem,
						      [failed | Path],
						      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufStream.SubscribeError'}},
			 F2, [failed | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufStream.SubscriptionStatus'(F3,
						     [status | Path],
						     TrUserData)
    end,
    if is_list(F4) ->
	   _ = ['v_msg_ProtobufClient.ClientSubscription'(Elem,
							  [subscriptions
							   | Path],
							  TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufClient.ClientSubscription'}},
			 F4, [subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufStream.SubscriptionResult'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.SubscriptionResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.UnsubscriptionResult'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.UnsubscriptionResult'/3}).
'v_msg_ProtobufStream.UnsubscriptionResult'(#'ProtobufStream.UnsubscriptionResult'{unsubscribed
										       =
										       F1,
										   failed
										       =
										       F2,
										   status
										       =
										       F3,
										   subscriptions
										       =
										       F4},
					    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [unsubscribed | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [unsubscribed | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufStream.UnsubscribeError'(Elem,
							[failed | Path],
							TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufStream.UnsubscribeError'}},
			 F2, [failed | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufStream.SubscriptionStatus'(F3,
						     [status | Path],
						     TrUserData)
    end,
    if is_list(F4) ->
	   _ = ['v_msg_ProtobufClient.ClientSubscription'(Elem,
							  [subscriptions
							   | Path],
							  TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufClient.ClientSubscription'}},
			 F4, [subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufStream.UnsubscriptionResult'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.UnsubscriptionResult'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.SubscribeError'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.SubscribeError'/3}).
'v_msg_ProtobufStream.SubscribeError'(#'ProtobufStream.SubscribeError'{key
									   = F1,
								       error =
									   F2,
								       subscription
									   =
									   F3},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufClient.ClientSubscription'(F3,
						     [subscription | Path],
						     TrUserData)
    end,
    ok;
'v_msg_ProtobufStream.SubscribeError'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.SubscribeError'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.UnsubscribeError'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.UnsubscribeError'/3}).
'v_msg_ProtobufStream.UnsubscribeError'(#'ProtobufStream.UnsubscribeError'{key
									       =
									       F1,
									   error
									       =
									       F2,
									   subscription
									       =
									       F3},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [error | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufClient.ClientSubscription'(F3,
						     [subscription | Path],
						     TrUserData)
    end,
    ok;
'v_msg_ProtobufStream.UnsubscribeError'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.UnsubscribeError'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.SubscriptionStatus'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.SubscriptionStatus'/3}).
'v_msg_ProtobufStream.SubscriptionStatus'(#'ProtobufStream.SubscriptionStatus'{keys
										   =
										   F1,
									       subscriptions
										   =
										   F2},
					  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [keys | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [keys | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufClient.ClientSubscription'(Elem,
							  [subscriptions
							   | Path],
							  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufClient.ClientSubscription'}},
			 F2, [subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufStream.SubscriptionStatus'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.SubscriptionStatus'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufStream.MissedMessages'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufStream.MissedMessages'/3}).
'v_msg_ProtobufStream.MissedMessages'(#'ProtobufStream.MissedMessages'{numMissedMessages
									   =
									   F1},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_int64(F1, [numMissedMessages | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufStream.MissedMessages'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufStream.MissedMessages'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientMessage'/3}).
'v_msg_ProtobufClient.ClientMessage'(#'ProtobufClient.ClientMessage'{body
									 = F1},
				     Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {identification, OF1} ->
	  'v_msg_ProtobufClient.ClientIdentificationMessage'(OF1,
							     [identification,
							      body
							      | Path],
							     TrUserData);
      {subscribe, OF1} ->
	  'v_msg_ProtobufClient.ClientSubscribeMessage'(OF1,
							[subscribe, body
							 | Path],
							TrUserData);
      {unsubscribe, OF1} ->
	  'v_msg_ProtobufClient.ClientUnsubscribeMessage'(OF1,
							  [unsubscribe, body
							   | Path],
							  TrUserData);
      {webAuthentication, OF1} ->
	  'v_msg_ProtobufClient.WebAuthenticationMessage'(OF1,
							  [webAuthentication,
							   body
							   | Path],
							  TrUserData);
      {apiAuthentication, OF1} ->
	  'v_msg_ProtobufClient.APIAuthenticationMessage'(OF1,
							  [apiAuthentication,
							   body
							   | Path],
							  TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [body | Path])
    end,
    ok;
'v_msg_ProtobufClient.ClientMessage'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientIdentificationMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientIdentificationMessage'/3}).
'v_msg_ProtobufClient.ClientIdentificationMessage'(#'ProtobufClient.ClientIdentificationMessage'{useragent
												     =
												     F1,
												 revision
												     =
												     F2,
												 integration
												     =
												     F3,
												 locale
												     =
												     F4,
												 subscriptions
												     =
												     F5},
						   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [useragent | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [revision | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [integration | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [locale | Path], TrUserData)
    end,
    if is_list(F5) ->
	   _ = [v_type_string(Elem, [subscriptions | Path],
			      TrUserData)
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F5,
			 [subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufClient.ClientIdentificationMessage'(X,
						   Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientIdentificationMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.WebAuthenticationMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.WebAuthenticationMessage'/3}).
'v_msg_ProtobufClient.WebAuthenticationMessage'(#'ProtobufClient.WebAuthenticationMessage'{identification
											       =
											       F1,
											   token
											       =
											       F2,
											   nonce
											       =
											       F3,
											   access_list
											       =
											       F4},
						Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufClient.ClientIdentificationMessage'(F1,
							      [identification
							       | Path],
							      TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [token | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [nonce | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [access_list | Path],
			      TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [access_list | Path])
    end,
    ok;
'v_msg_ProtobufClient.WebAuthenticationMessage'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.WebAuthenticationMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.TradeSessionAuth'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.TradeSessionAuth'/3}).
'v_msg_ProtobufClient.TradeSessionAuth'(#'ProtobufClient.TradeSessionAuth'{api_key
									       =
									       F1,
									   api_secret
									       =
									       F2,
									   customer_id
									       =
									       F3,
									   key_passphrase
									       =
									       F4},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [api_key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [api_secret | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [customer_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [key_passphrase | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufClient.TradeSessionAuth'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.TradeSessionAuth'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.TradeSubscription'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.TradeSubscription'/3}).
'v_msg_ProtobufClient.TradeSubscription'(#'ProtobufClient.TradeSubscription'{marketId
										 =
										 F1,
									     auth
										 =
										 F2},
					 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [marketId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_ProtobufClient.TradeSessionAuth'(F2,
						   [auth | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufClient.TradeSubscription'(X, Path,
					 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.TradeSubscription'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.StreamSubscription'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.StreamSubscription'/3}).
'v_msg_ProtobufClient.StreamSubscription'(#'ProtobufClient.StreamSubscription'{resource
										   =
										   F1},
					  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [resource | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufClient.StreamSubscription'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.StreamSubscription'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientSubscription'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientSubscription'/3}).
'v_msg_ProtobufClient.ClientSubscription'(#'ProtobufClient.ClientSubscription'{body
										   =
										   F1},
					  Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {stream_subscription, OF1} ->
	  'v_msg_ProtobufClient.StreamSubscription'(OF1,
						    [stream_subscription, body
						     | Path],
						    TrUserData);
      {trade_subscription, OF1} ->
	  'v_msg_ProtobufClient.TradeSubscription'(OF1,
						   [trade_subscription, body
						    | Path],
						   TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [body | Path])
    end,
    ok;
'v_msg_ProtobufClient.ClientSubscription'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientSubscription'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.APIAuthenticationMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.APIAuthenticationMessage'/3}).
'v_msg_ProtobufClient.APIAuthenticationMessage'(#'ProtobufClient.APIAuthenticationMessage'{token
											       =
											       F1,
											   nonce
											       =
											       F2,
											   api_key
											       =
											       F3,
											   source
											       =
											       F4,
											   version
											       =
											       F5,
											   subscriptions
											       =
											       F6,
											   client_subscriptions
											       =
											       F7},
						Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [token | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [nonce | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [api_key | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_ProtobufClient.APIAuthenticationMessage.Source'(F4,
								   [source
								    | Path],
								   TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [version | Path], TrUserData)
    end,
    if is_list(F6) ->
	   _ = [v_type_string(Elem, [subscriptions | Path],
			      TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F6,
			 [subscriptions | Path])
    end,
    if is_list(F7) ->
	   _ = ['v_msg_ProtobufClient.ClientSubscription'(Elem,
							  [client_subscriptions
							   | Path],
							  TrUserData)
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufClient.ClientSubscription'}},
			 F7, [client_subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufClient.APIAuthenticationMessage'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.APIAuthenticationMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientSessionMessage.Session'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientSessionMessage.Session'/3}).
'v_msg_ProtobufClient.ClientSessionMessage.Session'(#'ProtobufClient.ClientSessionMessage.Session'{userId
												       =
												       F1,
												   expires
												       =
												       F2,
												   token
												       =
												       F3,
												   mfaToken
												       =
												       F4},
						    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [userId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [expires | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [token | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [mfaToken | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufClient.ClientSessionMessage.Session'(X,
						    Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientSessionMessage.Session'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'/3}).
'v_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(#'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'{exchange
																       =
																       F1,
																   token
																       =
																       F2,
																   expiration
																       =
																       F3},
								    Path,
								    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [exchange | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [token | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [expiration | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(X,
								    Path,
								    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientSessionMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientSessionMessage'/3}).
'v_msg_ProtobufClient.ClientSessionMessage'(#'ProtobufClient.ClientSessionMessage'{'SessionConfig'
										       =
										       F1},
					    Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {session, OF1} ->
	  'v_msg_ProtobufClient.ClientSessionMessage.Session'(OF1,
							      [session,
							       'SessionConfig'
							       | Path],
							      TrUserData);
      {anonymousTradingSession, OF1} ->
	  'v_msg_ProtobufClient.ClientSessionMessage.AnonymousTradingSession'(OF1,
									      [anonymousTradingSession,
									       'SessionConfig'
									       | Path],
									      TrUserData);
      _ ->
	  mk_type_error(invalid_oneof, F1,
			['SessionConfig' | Path])
    end,
    ok;
'v_msg_ProtobufClient.ClientSessionMessage'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientSessionMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientSubscribeMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientSubscribeMessage'/3}).
'v_msg_ProtobufClient.ClientSubscribeMessage'(#'ProtobufClient.ClientSubscribeMessage'{subscriptionKeys
											   =
											   F1,
										       subscriptions
											   =
											   F2},
					      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [subscriptionKeys | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [subscriptionKeys | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufClient.ClientSubscription'(Elem,
							  [subscriptions
							   | Path],
							  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufClient.ClientSubscription'}},
			 F2, [subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufClient.ClientSubscribeMessage'(X, Path,
					      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientSubscribeMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufClient.ClientUnsubscribeMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufClient.ClientUnsubscribeMessage'/3}).
'v_msg_ProtobufClient.ClientUnsubscribeMessage'(#'ProtobufClient.ClientUnsubscribeMessage'{subscriptionKeys
											       =
											       F1,
											   subscriptions
											       =
											       F2},
						Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [subscriptionKeys | Path],
			      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [subscriptionKeys | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufClient.ClientSubscription'(Elem,
							  [subscriptions
							   | Path],
							  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufClient.ClientSubscription'}},
			 F2, [subscriptions | Path])
    end,
    ok;
'v_msg_ProtobufClient.ClientUnsubscribeMessage'(X, Path,
						_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufClient.ClientUnsubscribeMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Market'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Market'/3}).
'v_msg_ProtobufMarkets.Market'(#'ProtobufMarkets.Market'{exchangeId
							     = F1,
							 currencyPairId = F2,
							 marketId = F3,
							 exchange = F4,
							 currencyPair = F5},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_uint64(F1, [exchangeId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, [currencyPairId | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [marketId | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [exchange | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [currencyPair | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Market'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Market'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Order'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Order'/3}).
'v_msg_ProtobufMarkets.Order'(#'ProtobufMarkets.Order'{priceStr
							   = F1,
						       amountStr = F2,
						       price = F3, amount = F4},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [priceStr | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [amountStr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_float(F3, [price | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_float(F4, [amount | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Order'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Order'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Trade'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Trade'/3}).
'v_msg_ProtobufMarkets.Trade'(#'ProtobufMarkets.Trade'{externalId
							   = F1,
						       timestamp = F2,
						       timestampMillis = F3,
						       timestampNano = F4,
						       priceStr = F5,
						       amountStr = F6,
						       price = F7, amount = F8,
						       priceDouble = F9,
						       amountDouble = F10,
						       id = F11},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [externalId | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [timestampMillis | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [timestampNano | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [priceStr | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [amountStr | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [price | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [amount | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_double(F9, [priceDouble | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_type_double(F10, [amountDouble | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, [id | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Trade'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Trade'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.MarketUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.MarketUpdateMessage'/3}).
'v_msg_ProtobufMarkets.MarketUpdateMessage'(#'ProtobufMarkets.MarketUpdateMessage'{market
										       =
										       F1,
										   'Update'
										       =
										       F2},
					    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Market'(F1, [market | Path],
					  TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {orderBookUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.OrderBookUpdate'(OF2,
						  [orderBookUpdate, 'Update'
						   | Path],
						  TrUserData);
      {orderBookDeltaUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(OF2,
						       [orderBookDeltaUpdate,
							'Update'
							| Path],
						       TrUserData);
      {orderBookSpreadUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(OF2,
							[orderBookSpreadUpdate,
							 'Update'
							 | Path],
							TrUserData);
      {tradesUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.TradesUpdate'(OF2,
					       [tradesUpdate, 'Update' | Path],
					       TrUserData);
      {intervalsUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.IntervalsUpdate'(OF2,
						  [intervalsUpdate, 'Update'
						   | Path],
						  TrUserData);
      {summaryUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SummaryUpdate'(OF2,
						[summaryUpdate, 'Update'
						 | Path],
						TrUserData);
      {sparklineUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SparklineUpdate'(OF2,
						  [sparklineUpdate, 'Update'
						   | Path],
						  TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.MarketUpdateMessage'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.MarketUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookUpdate'/3}).
'v_msg_ProtobufMarkets.OrderBookUpdate'(#'ProtobufMarkets.OrderBookUpdate'{aggregationModulusStr
									       =
									       F1,
									   seqNum
									       =
									       F2,
									   bids
									       =
									       F3,
									   asks
									       =
									       F4,
									   aggregationModulus
									       =
									       F5},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_string(F1, [aggregationModulusStr | Path],
			 TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [seqNum | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [bids | Path],
					      TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F3, [bids | Path])
    end,
    if is_list(F4) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [asks | Path],
					      TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F4, [asks | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_float(F5, [aggregationModulus | Path],
			TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookUpdate'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'/3}).
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(#'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'{set
														 =
														 F1,
													     delta
														 =
														 F2,
													     remove
														 =
														 F3,
													     removeStr
														 =
														 F4},
							 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [set | Path],
					      TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F1, [set | Path])
    end,
    if is_list(F2) ->
	   _ = ['v_msg_ProtobufMarkets.Order'(Elem, [delta | Path],
					      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Order'}},
			 F2, [delta | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_float(Elem, [remove | Path], TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, float}, F3,
			 [remove | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_string(Elem, [removeStr | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F4,
			 [removeStr | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(X,
							 Path, _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'/3}).
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(#'ProtobufMarkets.OrderBookDeltaUpdate'{aggregationModulus
											 =
											 F1,
										     aggregationModulusStr
											 =
											 F2,
										     seqNum
											 =
											 F3,
										     bids
											 =
											 F4,
										     asks
											 =
											 F5},
					     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_float(F1, [aggregationModulus | Path],
			TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_string(F2, [aggregationModulusStr | Path],
			 TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [seqNum | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(F4,
								    [bids
								     | Path],
								    TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'(F5,
								    [asks
								     | Path],
								    TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookDeltaUpdate'(X, Path,
					     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'/3}).
'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(#'ProtobufMarkets.OrderBookSpreadUpdate'{timestamp
											   =
											   F1,
										       bid
											   =
											   F2,
										       ask
											   =
											   F3},
					      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [timestamp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Order'(F2, [bid | Path],
					 TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Order'(F3, [ask | Path],
					 TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.OrderBookSpreadUpdate'(X, Path,
					      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.OrderBookSpreadUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.TradesUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.TradesUpdate'/3}).
'v_msg_ProtobufMarkets.TradesUpdate'(#'ProtobufMarkets.TradesUpdate'{trades
									 = F1},
				     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Trade'(Elem,
					      [trades | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Trade'}},
			 F1, [trades | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.TradesUpdate'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.TradesUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Interval.OHLC'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Interval.OHLC'/3}).
'v_msg_ProtobufMarkets.Interval.OHLC'(#'ProtobufMarkets.Interval.OHLC'{openStr
									   = F1,
								       highStr =
									   F2,
								       lowStr =
									   F3,
								       closeStr
									   = F4,
								       open =
									   F5,
								       high =
									   F6,
								       low = F7,
								       close =
									   F8},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [openStr | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [highStr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [lowStr | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [closeStr | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_float(F5, [open | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_float(F6, [high | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_float(F7, [low | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_float(F8, [close | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Interval.OHLC'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.Interval.OHLC'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Interval'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Interval'/3}).
'v_msg_ProtobufMarkets.Interval'(#'ProtobufMarkets.Interval'{closetime
								 = F1,
							     period = F2,
							     ohlc = F3,
							     volumeBaseStr = F4,
							     volumeQuoteStr =
								 F5,
							     volumeBase = F6,
							     volumeQuote = F7},
				 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [closetime | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [period | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Interval.OHLC'(F3, [ohlc | Path],
						 TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [volumeBaseStr | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [volumeQuoteStr | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_float(F6, [volumeBase | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_float(F7, [volumeQuote | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Interval'(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.Interval'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.IntervalsUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.IntervalsUpdate'/3}).
'v_msg_ProtobufMarkets.IntervalsUpdate'(#'ProtobufMarkets.IntervalsUpdate'{intervals
									       =
									       F1},
					Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Interval'(Elem,
						 [intervals | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Interval'}},
			 F1, [intervals | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.IntervalsUpdate'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.IntervalsUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.SummaryUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.SummaryUpdate'/3}).
'v_msg_ProtobufMarkets.SummaryUpdate'(#'ProtobufMarkets.SummaryUpdate'{lastStr
									   = F1,
								       highStr =
									   F2,
								       lowStr =
									   F3,
								       volumeBaseStr
									   = F4,
								       volumeQuoteStr
									   = F5,
								       changeAbsoluteStr
									   = F6,
								       changePercentStr
									   = F7,
								       numTrades
									   = F8,
								       last =
									   F9,
								       high =
									   F10,
								       low =
									   F11,
								       volumeBase
									   =
									   F12,
								       volumeQuote
									   =
									   F13,
								       changeAbsolute
									   =
									   F14,
								       changePercent
									   =
									   F15},
				      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [lastStr | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [highStr | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [lowStr | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_string(F4, [volumeBaseStr | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_string(F5, [volumeQuoteStr | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [changeAbsoluteStr | Path],
			 TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_string(F7, [changePercentStr | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [numTrades | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_float(F9, [last | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_float(F10, [high | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_float(F11, [low | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true ->
	   v_type_float(F12, [volumeBase | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_float(F13, [volumeQuote | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true ->
	   v_type_float(F14, [changeAbsolute | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true ->
	   v_type_float(F15, [changePercent | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.SummaryUpdate'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.SummaryUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.SparklineUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.SparklineUpdate'/3}).
'v_msg_ProtobufMarkets.SparklineUpdate'(#'ProtobufMarkets.SparklineUpdate'{time
									       =
									       F1,
									   price
									       =
									       F2,
									   priceStr
									       =
									       F3},
					Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [time | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_float(F2, [price | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [priceStr | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.SparklineUpdate'(X, Path,
					_TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.SparklineUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Index'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Index'/3}).
'v_msg_ProtobufMarkets.Index'(#'ProtobufMarkets.Index'{id
							   = F1,
						       symbol = F2,
						       indexType = F3,
						       cwIndex = F4,
						       exchangeId = F5,
						       instrumentId = F6},
			      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [symbol | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_string(F3, [indexType | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [cwIndex | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_uint64(F5, [exchangeId | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_uint64(F6, [instrumentId | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Index'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Index'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.IndexUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.IndexUpdateMessage'/3}).
'v_msg_ProtobufMarkets.IndexUpdateMessage'(#'ProtobufMarkets.IndexUpdateMessage'{index
										     =
										     F1,
										 'Update'
										     =
										     F2},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_ProtobufMarkets.Index'(F1, [index | Path],
					 TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {tickerUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.TickerUpdate'(OF2,
					       [tickerUpdate, 'Update' | Path],
					       TrUserData);
      {intervalsUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.IntervalsUpdate'(OF2,
						  [intervalsUpdate, 'Update'
						   | Path],
						  TrUserData);
      {summaryUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SummaryUpdate'(OF2,
						[summaryUpdate, 'Update'
						 | Path],
						TrUserData);
      {sparklineUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.SparklineUpdate'(OF2,
						  [sparklineUpdate, 'Update'
						   | Path],
						  TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.IndexUpdateMessage'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.IndexUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.TickerUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.TickerUpdate'/3}).
'v_msg_ProtobufMarkets.TickerUpdate'(#'ProtobufMarkets.TickerUpdate'{tickers
									 = F1},
				     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = ['v_msg_ProtobufMarkets.Ticker'(Elem,
					       [tickers | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ProtobufMarkets.Ticker'}},
			 F1, [tickers | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.TickerUpdate'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.TickerUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.Ticker'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.Ticker'/3}).
'v_msg_ProtobufMarkets.Ticker'(#'ProtobufMarkets.Ticker'{value
							     = F1,
							 timestamp = F2,
							 timestampNano = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [timestampNano | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.Ticker'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ProtobufMarkets.Ticker'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairUpdateMessage'/3}).
'v_msg_ProtobufMarkets.PairUpdateMessage'(#'ProtobufMarkets.PairUpdateMessage'{pair
										   =
										   F1,
									       'Update'
										   =
										   F2},
					  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [pair | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {vwapUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.PairVwapUpdate'(OF2,
						 [vwapUpdate, 'Update' | Path],
						 TrUserData);
      {performanceUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.PairPerformanceUpdate'(OF2,
							[performanceUpdate,
							 'Update'
							 | Path],
							TrUserData);
      {trendlineUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.PairTrendlineUpdate'(OF2,
						      [trendlineUpdate, 'Update'
						       | Path],
						      TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.PairUpdateMessage'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairVwapUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairVwapUpdate'/3}).
'v_msg_ProtobufMarkets.PairVwapUpdate'(#'ProtobufMarkets.PairVwapUpdate'{vwap
									     =
									     F1,
									 timestamp
									     =
									     F2},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [vwap | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.PairVwapUpdate'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairVwapUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairPerformanceUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairPerformanceUpdate'/3}).
'v_msg_ProtobufMarkets.PairPerformanceUpdate'(#'ProtobufMarkets.PairPerformanceUpdate'{window
											   =
											   F1,
										       performance
											   =
											   F2},
					      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [window | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_double(F2, [performance | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.PairPerformanceUpdate'(X, Path,
					      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairPerformanceUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairTrendlineUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairTrendlineUpdate'/3}).
'v_msg_ProtobufMarkets.PairTrendlineUpdate'(#'ProtobufMarkets.PairTrendlineUpdate'{window
										       =
										       F1,
										   time
										       =
										       F2,
										   price
										       =
										       F3,
										   volume
										       =
										       F4},
					    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [window | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [price | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [volume | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.PairTrendlineUpdate'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairTrendlineUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.AssetUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.AssetUpdateMessage'/3}).
'v_msg_ProtobufMarkets.AssetUpdateMessage'(#'ProtobufMarkets.AssetUpdateMessage'{asset
										     =
										     F1,
										 'Update'
										     =
										     F2},
					   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [asset | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {usdVolumeUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(OF2,
						       [usdVolumeUpdate,
							'Update'
							| Path],
						       TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.AssetUpdateMessage'(X, Path,
					   _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.AssetUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.AssetUSDVolumeUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.AssetUSDVolumeUpdate'/3}).
'v_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(#'ProtobufMarkets.AssetUSDVolumeUpdate'{volume
											 =
											 F1},
					     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [volume | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.AssetUSDVolumeUpdate'(X, Path,
					     _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.AssetUSDVolumeUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufBroker.FundingType'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufBroker.FundingType'/3}).
'v_enum_ProtobufBroker.FundingType'('Spot', _Path,
				    _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.FundingType'('Margin', _Path,
				    _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.FundingType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufBroker.FundingType'(X, Path,
				    _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufBroker.FundingType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufBroker.PrivateOrder.Type'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufBroker.PrivateOrder.Type'/3}).
'v_enum_ProtobufBroker.PrivateOrder.Type'('Market',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('Limit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLoss',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TakeProfitLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfitLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLoss',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('TrailingStopLossLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('StopLossAndLimit',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('FillOrKill',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'('SettlePosition',
					  _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.Type'(V, Path,
					  TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufBroker.PrivateOrder.Type'(X, Path,
					  _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufBroker.PrivateOrder.Type'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'/3}).
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'('AbsoluteValue',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'('OffsetValue',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'('PrecentageOffsetValue',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'(V,
						    Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufBroker.PrivateOrder.PriceParamType'(X,
						    Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufBroker.PrivateOrder.PriceParamType'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufStream.AuthenticationResult.Status'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufStream.AuthenticationResult.Status'/3}).
'v_enum_ProtobufStream.AuthenticationResult.Status'('UNKNOWN',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufStream.AuthenticationResult.Status'('AUTHENTICATED',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufStream.AuthenticationResult.Status'('BAD_NONCE',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufStream.AuthenticationResult.Status'('BAD_TOKEN',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufStream.AuthenticationResult.Status'('TOKEN_EXPIRED',
						    _Path, _TrUserData) ->
    ok;
'v_enum_ProtobufStream.AuthenticationResult.Status'(V,
						    Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufStream.AuthenticationResult.Status'(X,
						    Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufStream.AuthenticationResult.Status'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_ProtobufClient.APIAuthenticationMessage.Source'/3}).
-dialyzer({nowarn_function,'v_enum_ProtobufClient.APIAuthenticationMessage.Source'/3}).
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'('UNKNOWN',
							_Path, _TrUserData) ->
    ok;
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'('GOLANG_SDK',
							_Path, _TrUserData) ->
    ok;
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'('JAVASCRIPT_SDK',
							_Path, _TrUserData) ->
    ok;
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'('NODE_SDK',
							_Path, _TrUserData) ->
    ok;
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'('RUST_SDK',
							_Path, _TrUserData) ->
    ok;
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'('CW_WEB',
							_Path, _TrUserData) ->
    ok;
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'(V,
							Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ProtobufClient.APIAuthenticationMessage.Source'(X,
							Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'ProtobufClient.APIAuthenticationMessage.Source'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'ProtobufBroker.FundingType'},
      [{'Spot', 0}, {'Margin', 1}]},
     {{enum, 'ProtobufBroker.PrivateOrder.Type'},
      [{'Market', 0}, {'Limit', 1}, {'StopLoss', 2},
       {'StopLossLimit', 3}, {'TakeProfit', 4},
       {'TakeProfitLimit', 5}, {'StopLossTakeProfit', 6},
       {'StopLossTakeProfitLimit', 7}, {'TrailingStopLoss', 8},
       {'TrailingStopLossLimit', 9}, {'StopLossAndLimit', 10},
       {'FillOrKill', 11}, {'SettlePosition', 12}]},
     {{enum, 'ProtobufBroker.PrivateOrder.PriceParamType'},
      [{'AbsoluteValue', 0}, {'OffsetValue', 1},
       {'PrecentageOffsetValue', 2}]},
     {{enum, 'ProtobufStream.AuthenticationResult.Status'},
      [{'UNKNOWN', 0}, {'AUTHENTICATED', 1}, {'BAD_NONCE', 2},
       {'BAD_TOKEN', 3}, {'TOKEN_EXPIRED', 4}]},
     {{enum,
       'ProtobufClient.APIAuthenticationMessage.Source'},
      [{'UNKNOWN', 0}, {'GOLANG_SDK', 1},
       {'JAVASCRIPT_SDK', 2}, {'NODE_SDK', 3}, {'RUST_SDK', 5},
       {'CW_WEB', 4}]},
     {{msg, 'ProtobufBroker.BrokerSessionMessage.Session'},
      [#field{name = userId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = expires, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = token, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = mfaToken, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]},
     {{msg,
       'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'},
      [#field{name = exchange, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = expiration, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.BrokerSessionMessage'},
      [#gpb_oneof{name = 'SessionConfig', rnum = 2,
		  fields =
		      [#field{name = session, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'ProtobufBroker.BrokerSessionMessage.Session'},
			      occurrence = optional, opts = []},
		       #field{name = anonymousTradingSession, fnum = 2,
			      rnum = 2,
			      type =
				  {msg,
				   'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'},
			      occurrence = optional, opts = []}]},
       #field{name = marketId, fnum = 3, rnum = 3,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PlaceOrderRequest'},
      [#field{name = order, fnum = 2, rnum = 2,
	      type = {msg, 'ProtobufBroker.PrivateOrder'},
	      occurrence = optional, opts = []},
       #field{name = closingOrder, fnum = 3, rnum = 3,
	      type = {msg, 'ProtobufBroker.PrivateOrder'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PlaceOrderResult'},
      [#field{name = order, fnum = 2, rnum = 2,
	      type = {msg, 'ProtobufBroker.PrivateOrder'},
	      occurrence = optional, opts = []},
       #field{name = orderId, fnum = 1, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.CancelOrderRequest'},
      [#field{name = orderId, fnum = 2, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.CancelOrderResult'},
      [#field{name = orderId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.ReplaceOrderRequest'},
      [#field{name = orderId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = replacement, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufBroker.PrivateOrder'},
	      occurrence = optional, opts = []},
       #field{name = replacementClosingOrder, fnum = 3,
	      rnum = 4, type = {msg, 'ProtobufBroker.PrivateOrder'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.ClosePositionRequest'},
      [#field{name = positionId, fnum = 2, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.SyncRequest'}, []},
     {{msg, 'ProtobufBroker.BrokerRequest'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = marketId, fnum = 7, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #gpb_oneof{name = 'Request', rnum = 4,
		  fields =
		      [#field{name = placeOrderRequest, fnum = 2, rnum = 4,
			      type = {msg, 'ProtobufBroker.PlaceOrderRequest'},
			      occurrence = optional, opts = []},
		       #field{name = cancelOrderRequest, fnum = 3, rnum = 4,
			      type = {msg, 'ProtobufBroker.CancelOrderRequest'},
			      occurrence = optional, opts = []},
		       #field{name = replaceOrderRequest, fnum = 6, rnum = 4,
			      type =
				  {msg, 'ProtobufBroker.ReplaceOrderRequest'},
			      occurrence = optional, opts = []},
		       #field{name = syncRequest, fnum = 4, rnum = 4,
			      type = {msg, 'ProtobufBroker.SyncRequest'},
			      occurrence = optional, opts = []},
		       #field{name = closePositionRequest, fnum = 5, rnum = 4,
			      type =
				  {msg, 'ProtobufBroker.ClosePositionRequest'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufBroker.OrdersUpdate'},
      [#field{name = orders, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufBroker.PrivateOrder'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.TradesUpdate'},
      [#field{name = trades, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufBroker.PrivateTrade'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.PositionsUpdate'},
      [#field{name = positions, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufBroker.PrivatePosition'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.BalancesUpdate'},
      [#field{name = balances, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufBroker.Balances'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.RequestResolutionUpdate'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = error, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = message, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #gpb_oneof{name = 'Result', rnum = 5,
		  fields =
		      [#field{name = placeOrderResult, fnum = 4, rnum = 5,
			      type = {msg, 'ProtobufBroker.PlaceOrderResult'},
			      occurrence = optional, opts = []},
		       #field{name = cancelOrderResult, fnum = 5, rnum = 5,
			      type = {msg, 'ProtobufBroker.CancelOrderResult'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufBroker.AnonymousSessionStatusUpdate'},
      [#field{name = expiration, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.SessionStatusUpdate'},
      [#field{name = initialized, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = syncing, fnum = 2, rnum = 3, type = bool,
	      occurrence = optional, opts = []},
       #field{name = lastSyncTime, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = syncError, fnum = 4, rnum = 5,
	      type = int32, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PermissionsUpdate.Agreement'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = body, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg,
       'ProtobufBroker.PermissionsUpdate.LeverageLevels'},
      [#field{name = buy, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = []},
       #field{name = sell, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.PermissionsUpdate'},
      [#field{name = orderTypes, fnum = 1, rnum = 2,
	      type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	      occurrence = repeated, opts = []},
       #field{name = fundingTypes, fnum = 2, rnum = 3,
	      type = {enum, 'ProtobufBroker.FundingType'},
	      occurrence = repeated, opts = []},
       #field{name = agreements, fnum = 4, rnum = 4,
	      type =
		  {msg, 'ProtobufBroker.PermissionsUpdate.Agreement'},
	      occurrence = repeated, opts = []},
       #field{name = currencyPairAllowed, fnum = 5, rnum = 5,
	      type = bool, occurrence = optional, opts = []},
       #field{name = leverageLevels, fnum = 6, rnum = 6,
	      type =
		  {msg,
		   'ProtobufBroker.PermissionsUpdate.LeverageLevels'},
	      occurrence = optional, opts = []},
       #field{name = supportsOrderExpiry, fnum = 7, rnum = 7,
	      type = bool, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.APIAccessorStatusUpdate'},
      [#field{name = hasAccess, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = status, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = statusString, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.BrokerUpdateMessage'},
      [#field{name = marketId, fnum = 11, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = ordersUpdate, fnum = 1, rnum = 3,
			      type = {msg, 'ProtobufBroker.OrdersUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = tradesUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufBroker.TradesUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = balancesUpdate, fnum = 3, rnum = 3,
			      type = {msg, 'ProtobufBroker.BalancesUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = positionsUpdate, fnum = 8, rnum = 3,
			      type = {msg, 'ProtobufBroker.PositionsUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = requestResolutionUpdate, fnum = 4,
			      rnum = 3,
			      type =
				  {msg,
				   'ProtobufBroker.RequestResolutionUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = anonymousSessionStatusUpdate, fnum = 5,
			      rnum = 3,
			      type =
				  {msg,
				   'ProtobufBroker.AnonymousSessionStatusUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = permissionsUpdate, fnum = 6, rnum = 3,
			      type = {msg, 'ProtobufBroker.PermissionsUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = sessionStatusUpdate, fnum = 7, rnum = 3,
			      type =
				  {msg, 'ProtobufBroker.SessionStatusUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = apiAccessorStatusUpdate, fnum = 9,
			      rnum = 3,
			      type =
				  {msg,
				   'ProtobufBroker.APIAccessorStatusUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = authenticationResult, fnum = 10, rnum = 3,
			      type =
				  {msg, 'ProtobufStream.AuthenticationResult'},
			      occurrence = optional, opts = []},
		       #field{name = subscriptionResult, fnum = 12, rnum = 3,
			      type = {msg, 'ProtobufStream.SubscriptionResult'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
      [#field{name = value, fnum = 1, rnum = 2, type = float,
	      occurrence = optional, opts = []},
       #field{name = valueString, fnum = 3, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = type, fnum = 2, rnum = 4,
	      type =
		  {enum, 'ProtobufBroker.PrivateOrder.PriceParamType'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PrivateOrder'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 4, type = float,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 5, type = float,
	      occurrence = optional, opts = []},
       #field{name = side, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = []},
       #field{name = type, fnum = 6, rnum = 7,
	      type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	      occurrence = optional, opts = []},
       #field{name = fundingType, fnum = 7, rnum = 8,
	      type = {enum, 'ProtobufBroker.FundingType'},
	      occurrence = optional, opts = []},
       #field{name = priceParams, fnum = 8, rnum = 9,
	      type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	      occurrence = repeated, opts = []},
       #field{name = amountParam, fnum = 9, rnum = 10,
	      type = float, occurrence = optional, opts = []},
       #field{name = amountParamString, fnum = 16, rnum = 11,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountFilledString, fnum = 17, rnum = 12,
	      type = string, occurrence = optional, opts = []},
       #field{name = leverage, fnum = 10, rnum = 13,
	      type = string, occurrence = optional, opts = []},
       #field{name = currentStop, fnum = 11, rnum = 14,
	      type = float, occurrence = optional, opts = []},
       #field{name = initialStop, fnum = 12, rnum = 15,
	      type = float, occurrence = optional, opts = []},
       #field{name = currentStopString, fnum = 18, rnum = 16,
	      type = string, occurrence = optional, opts = []},
       #field{name = initialStopString, fnum = 19, rnum = 17,
	      type = string, occurrence = optional, opts = []},
       #field{name = startTime, fnum = 13, rnum = 18,
	      type = int64, occurrence = optional, opts = []},
       #field{name = expireTime, fnum = 14, rnum = 19,
	      type = int64, occurrence = optional, opts = []},
       #field{name = rate, fnum = 15, rnum = 20, type = float,
	      occurrence = optional, opts = []},
       #field{name = hasClosingOrder, fnum = 20, rnum = 21,
	      type = bool, occurrence = optional, opts = []},
       #field{name = closingOrderType, fnum = 21, rnum = 22,
	      type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	      occurrence = optional, opts = []},
       #field{name = closingOrderPriceParams, fnum = 22,
	      rnum = 23,
	      type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.PrivateTrade'},
      [#field{name = externalId, fnum = 7, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = orderId, fnum = 8, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 4, type = int64,
	      occurrence = optional, opts = []},
       #field{name = timeMillis, fnum = 6, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 6, type = float,
	      occurrence = optional, opts = []},
       #field{name = priceString, fnum = 9, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = amountString, fnum = 10, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = side, fnum = 5, rnum = 10, type = int32,
	      occurrence = optional, opts = []},
       #field{name = id, fnum = 1, rnum = 11, type = int64,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.PrivatePosition'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = side, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = avgPrice, fnum = 4, rnum = 5,
	      type = float, occurrence = optional, opts = []},
       #field{name = avgPriceString, fnum = 9, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountOpen, fnum = 5, rnum = 7,
	      type = float, occurrence = optional, opts = []},
       #field{name = amountClosed, fnum = 6, rnum = 8,
	      type = float, occurrence = optional, opts = []},
       #field{name = amountOpenString, fnum = 10, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountClosedString, fnum = 11, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = orderIds, fnum = 7, rnum = 11,
	      type = string, occurrence = repeated, opts = []},
       #field{name = tradeIds, fnum = 8, rnum = 12,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufBroker.Balance'},
      [#field{name = currency, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 2, rnum = 3, type = float,
	      occurrence = optional, opts = []},
       #field{name = amountString, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufBroker.Balances'},
      [#field{name = fundingType, fnum = 1, rnum = 2,
	      type = {enum, 'ProtobufBroker.FundingType'},
	      occurrence = optional, opts = []},
       #field{name = balances, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufBroker.Balance'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufStream.StreamMessage'},
      [#gpb_oneof{name = body, rnum = 2,
		  fields =
		      [#field{name = authenticationResult, fnum = 1, rnum = 2,
			      type =
				  {msg, 'ProtobufStream.AuthenticationResult'},
			      occurrence = optional, opts = []},
		       #field{name = subscriptionResult, fnum = 5, rnum = 2,
			      type = {msg, 'ProtobufStream.SubscriptionResult'},
			      occurrence = optional, opts = []},
		       #field{name = unsubscriptionResult, fnum = 6, rnum = 2,
			      type =
				  {msg, 'ProtobufStream.UnsubscriptionResult'},
			      occurrence = optional, opts = []},
		       #field{name = missedMessages, fnum = 7, rnum = 2,
			      type = {msg, 'ProtobufStream.MissedMessages'},
			      occurrence = optional, opts = []},
		       #field{name = marketUpdate, fnum = 2, rnum = 2,
			      type =
				  {msg, 'ProtobufMarkets.MarketUpdateMessage'},
			      occurrence = optional, opts = []},
		       #field{name = pairUpdate, fnum = 3, rnum = 2,
			      type = {msg, 'ProtobufMarkets.PairUpdateMessage'},
			      occurrence = optional, opts = []},
		       #field{name = assetUpdate, fnum = 4, rnum = 2,
			      type =
				  {msg, 'ProtobufMarkets.AssetUpdateMessage'},
			      occurrence = optional, opts = []},
		       #field{name = indexUpdate, fnum = 8, rnum = 2,
			      type =
				  {msg, 'ProtobufMarkets.IndexUpdateMessage'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufStream.AuthenticationResult'},
      [#field{name = status, fnum = 1, rnum = 2,
	      type =
		  {enum, 'ProtobufStream.AuthenticationResult.Status'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufStream.SubscriptionResult'},
      [#field{name = subscribed, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated,
	      opts = [deprecated]},
       #field{name = failed, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufStream.SubscribeError'},
	      occurrence = repeated, opts = []},
       #field{name = status, fnum = 3, rnum = 4,
	      type = {msg, 'ProtobufStream.SubscriptionStatus'},
	      occurrence = optional, opts = []},
       #field{name = subscriptions, fnum = 4, rnum = 5,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufStream.UnsubscriptionResult'},
      [#field{name = unsubscribed, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated,
	      opts = [deprecated]},
       #field{name = failed, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufStream.UnsubscribeError'},
	      occurrence = repeated, opts = []},
       #field{name = status, fnum = 3, rnum = 4,
	      type = {msg, 'ProtobufStream.SubscriptionStatus'},
	      occurrence = optional, opts = []},
       #field{name = subscriptions, fnum = 4, rnum = 5,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufStream.SubscribeError'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = [deprecated]},
       #field{name = error, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = subscription, fnum = 3, rnum = 4,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufStream.UnsubscribeError'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = [deprecated]},
       #field{name = error, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = subscription, fnum = 3, rnum = 4,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufStream.SubscriptionStatus'},
      [#field{name = keys, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = [deprecated]},
       #field{name = subscriptions, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufStream.MissedMessages'},
      [#field{name = numMissedMessages, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufClient.ClientMessage'},
      [#gpb_oneof{name = body, rnum = 2,
		  fields =
		      [#field{name = identification, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.ClientIdentificationMessage'},
			      occurrence = optional, opts = []},
		       #field{name = subscribe, fnum = 2, rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.ClientSubscribeMessage'},
			      occurrence = optional, opts = []},
		       #field{name = unsubscribe, fnum = 3, rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.ClientUnsubscribeMessage'},
			      occurrence = optional, opts = []},
		       #field{name = webAuthentication, fnum = 4, rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.WebAuthenticationMessage'},
			      occurrence = optional, opts = []},
		       #field{name = apiAuthentication, fnum = 5, rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.APIAuthenticationMessage'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufClient.ClientIdentificationMessage'},
      [#field{name = useragent, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = revision, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = integration, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = locale, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = subscriptions, fnum = 5, rnum = 6,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufClient.WebAuthenticationMessage'},
      [#field{name = identification, fnum = 1, rnum = 2,
	      type =
		  {msg, 'ProtobufClient.ClientIdentificationMessage'},
	      occurrence = optional, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = nonce, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = access_list, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufClient.TradeSessionAuth'},
      [#field{name = api_key, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = api_secret, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = customer_id, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = key_passphrase, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufClient.TradeSubscription'},
      [#field{name = marketId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = auth, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufClient.TradeSessionAuth'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufClient.StreamSubscription'},
      [#field{name = resource, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufClient.ClientSubscription'},
      [#gpb_oneof{name = body, rnum = 2,
		  fields =
		      [#field{name = stream_subscription, fnum = 1, rnum = 2,
			      type = {msg, 'ProtobufClient.StreamSubscription'},
			      occurrence = optional, opts = []},
		       #field{name = trade_subscription, fnum = 2, rnum = 2,
			      type = {msg, 'ProtobufClient.TradeSubscription'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufClient.APIAuthenticationMessage'},
      [#field{name = token, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = nonce, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = api_key, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = source, fnum = 4, rnum = 5,
	      type =
		  {enum,
		   'ProtobufClient.APIAuthenticationMessage.Source'},
	      occurrence = optional, opts = []},
       #field{name = version, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = subscriptions, fnum = 6, rnum = 7,
	      type = string, occurrence = repeated,
	      opts = [deprecated]},
       #field{name = client_subscriptions, fnum = 7, rnum = 8,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufClient.ClientSessionMessage.Session'},
      [#field{name = userId, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = expires, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = token, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = mfaToken, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []}]},
     {{msg,
       'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'},
      [#field{name = exchange, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = token, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = expiration, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufClient.ClientSessionMessage'},
      [#gpb_oneof{name = 'SessionConfig', rnum = 2,
		  fields =
		      [#field{name = session, fnum = 1, rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.ClientSessionMessage.Session'},
			      occurrence = optional, opts = []},
		       #field{name = anonymousTradingSession, fnum = 2,
			      rnum = 2,
			      type =
				  {msg,
				   'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufClient.ClientSubscribeMessage'},
      [#field{name = subscriptionKeys, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated,
	      opts = [deprecated]},
       #field{name = subscriptions, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufClient.ClientUnsubscribeMessage'},
      [#field{name = subscriptionKeys, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated,
	      opts = [deprecated]},
       #field{name = subscriptions, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufClient.ClientSubscription'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.Market'},
      [#field{name = exchangeId, fnum = 3, rnum = 2,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = currencyPairId, fnum = 4, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = marketId, fnum = 5, rnum = 4,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = exchange, fnum = 1, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = currencyPair, fnum = 2, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Order'},
      [#field{name = priceStr, fnum = 3, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountStr, fnum = 4, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = price, fnum = 1, rnum = 4, type = float,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 2, rnum = 5, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Trade'},
      [#field{name = externalId, fnum = 11, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = timestampMillis, fnum = 5, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = timestampNano, fnum = 10, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = priceStr, fnum = 8, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = amountStr, fnum = 9, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 9, type = float,
	      occurrence = optional, opts = []},
       #field{name = priceDouble, fnum = 6, rnum = 10,
	      type = double, occurrence = optional, opts = []},
       #field{name = amountDouble, fnum = 7, rnum = 11,
	      type = double, occurrence = optional, opts = []},
       #field{name = id, fnum = 1, rnum = 12, type = int64,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.MarketUpdateMessage'},
      [#field{name = market, fnum = 9, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Market'},
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = orderBookUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufMarkets.OrderBookUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = orderBookDeltaUpdate, fnum = 3, rnum = 3,
			      type =
				  {msg, 'ProtobufMarkets.OrderBookDeltaUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = orderBookSpreadUpdate, fnum = 11,
			      rnum = 3,
			      type =
				  {msg,
				   'ProtobufMarkets.OrderBookSpreadUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = tradesUpdate, fnum = 4, rnum = 3,
			      type = {msg, 'ProtobufMarkets.TradesUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = intervalsUpdate, fnum = 5, rnum = 3,
			      type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = summaryUpdate, fnum = 6, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = sparklineUpdate, fnum = 7, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.OrderBookUpdate'},
      [#field{name = aggregationModulusStr, fnum = 4,
	      rnum = 2, type = string, occurrence = optional,
	      opts = []},
       #field{name = seqNum, fnum = 5, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = bids, fnum = 1, rnum = 4,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = asks, fnum = 2, rnum = 5,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = aggregationModulus, fnum = 3, rnum = 6,
	      type = float, occurrence = optional, opts = []}]},
     {{msg,
       'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
      [#field{name = set, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = delta, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = repeated, opts = []},
       #field{name = remove, fnum = 3, rnum = 4, type = float,
	      occurrence = repeated, opts = []},
       #field{name = removeStr, fnum = 4, rnum = 5,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.OrderBookDeltaUpdate'},
      [#field{name = aggregationModulus, fnum = 3, rnum = 2,
	      type = float, occurrence = optional, opts = []},
       #field{name = aggregationModulusStr, fnum = 4, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = seqNum, fnum = 5, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = bids, fnum = 1, rnum = 5,
	      type =
		  {msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	      occurrence = optional, opts = []},
       #field{name = asks, fnum = 2, rnum = 6,
	      type =
		  {msg,
		   'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.OrderBookSpreadUpdate'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = bid, fnum = 2, rnum = 3,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = optional, opts = []},
       #field{name = ask, fnum = 3, rnum = 4,
	      type = {msg, 'ProtobufMarkets.Order'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.TradesUpdate'},
      [#field{name = trades, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Trade'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.Interval.OHLC'},
      [#field{name = openStr, fnum = 5, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = highStr, fnum = 6, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = lowStr, fnum = 7, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = closeStr, fnum = 8, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = open, fnum = 1, rnum = 6, type = float,
	      occurrence = optional, opts = []},
       #field{name = high, fnum = 2, rnum = 7, type = float,
	      occurrence = optional, opts = []},
       #field{name = low, fnum = 3, rnum = 8, type = float,
	      occurrence = optional, opts = []},
       #field{name = close, fnum = 4, rnum = 9, type = float,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Interval'},
      [#field{name = closetime, fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = period, fnum = 4, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = ohlc, fnum = 2, rnum = 4,
	      type = {msg, 'ProtobufMarkets.Interval.OHLC'},
	      occurrence = optional, opts = []},
       #field{name = volumeBaseStr, fnum = 6, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeQuoteStr, fnum = 7, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeBase, fnum = 3, rnum = 7,
	      type = float, occurrence = optional, opts = []},
       #field{name = volumeQuote, fnum = 5, rnum = 8,
	      type = float, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.IntervalsUpdate'},
      [#field{name = intervals, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Interval'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.SummaryUpdate'},
      [#field{name = lastStr, fnum = 10, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = highStr, fnum = 11, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = lowStr, fnum = 12, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeBaseStr, fnum = 13, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = volumeQuoteStr, fnum = 14, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = changeAbsoluteStr, fnum = 15, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = changePercentStr, fnum = 16, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = numTrades, fnum = 8, rnum = 9,
	      type = int32, occurrence = optional, opts = []},
       #field{name = last, fnum = 2, rnum = 10, type = float,
	      occurrence = optional, opts = []},
       #field{name = high, fnum = 3, rnum = 11, type = float,
	      occurrence = optional, opts = []},
       #field{name = low, fnum = 4, rnum = 12, type = float,
	      occurrence = optional, opts = []},
       #field{name = volumeBase, fnum = 5, rnum = 13,
	      type = float, occurrence = optional, opts = []},
       #field{name = volumeQuote, fnum = 9, rnum = 14,
	      type = float, occurrence = optional, opts = []},
       #field{name = changeAbsolute, fnum = 6, rnum = 15,
	      type = float, occurrence = optional, opts = []},
       #field{name = changePercent, fnum = 7, rnum = 16,
	      type = float, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.SparklineUpdate'},
      [#field{name = time, fnum = 2, rnum = 2, type = int64,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 3, type = float,
	      occurrence = optional, opts = []},
       #field{name = priceStr, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.Index'},
      [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = symbol, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = indexType, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = cwIndex, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []},
       #field{name = exchangeId, fnum = 5, rnum = 6,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = instrumentId, fnum = 6, rnum = 7,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.IndexUpdateMessage'},
      [#field{name = index, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Index'},
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = tickerUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufMarkets.TickerUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = intervalsUpdate, fnum = 3, rnum = 3,
			      type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = summaryUpdate, fnum = 4, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = sparklineUpdate, fnum = 5, rnum = 3,
			      type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.TickerUpdate'},
      [#field{name = tickers, fnum = 1, rnum = 2,
	      type = {msg, 'ProtobufMarkets.Ticker'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ProtobufMarkets.Ticker'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = timestampNano, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.PairUpdateMessage'},
      [#field{name = pair, fnum = 1, rnum = 2, type = uint64,
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = vwapUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufMarkets.PairVwapUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = performanceUpdate, fnum = 3, rnum = 3,
			      type =
				  {msg,
				   'ProtobufMarkets.PairPerformanceUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = trendlineUpdate, fnum = 4, rnum = 3,
			      type =
				  {msg, 'ProtobufMarkets.PairTrendlineUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.PairVwapUpdate'},
      [#field{name = vwap, fnum = 1, rnum = 2, type = double,
	      occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.PairPerformanceUpdate'},
      [#field{name = window, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = performance, fnum = 2, rnum = 3,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.PairTrendlineUpdate'},
      [#field{name = window, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = volume, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.AssetUpdateMessage'},
      [#field{name = asset, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = usdVolumeUpdate, fnum = 2, rnum = 3,
			      type =
				  {msg, 'ProtobufMarkets.AssetUSDVolumeUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.AssetUSDVolumeUpdate'},
      [#field{name = volume, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['ProtobufBroker.BrokerSessionMessage.Session',
     'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession',
     'ProtobufBroker.BrokerSessionMessage',
     'ProtobufBroker.PlaceOrderRequest',
     'ProtobufBroker.PlaceOrderResult',
     'ProtobufBroker.CancelOrderRequest',
     'ProtobufBroker.CancelOrderResult',
     'ProtobufBroker.ReplaceOrderRequest',
     'ProtobufBroker.ClosePositionRequest',
     'ProtobufBroker.SyncRequest',
     'ProtobufBroker.BrokerRequest',
     'ProtobufBroker.OrdersUpdate',
     'ProtobufBroker.TradesUpdate',
     'ProtobufBroker.PositionsUpdate',
     'ProtobufBroker.BalancesUpdate',
     'ProtobufBroker.RequestResolutionUpdate',
     'ProtobufBroker.AnonymousSessionStatusUpdate',
     'ProtobufBroker.SessionStatusUpdate',
     'ProtobufBroker.PermissionsUpdate.Agreement',
     'ProtobufBroker.PermissionsUpdate.LeverageLevels',
     'ProtobufBroker.PermissionsUpdate',
     'ProtobufBroker.APIAccessorStatusUpdate',
     'ProtobufBroker.BrokerUpdateMessage',
     'ProtobufBroker.PrivateOrder.PriceParam',
     'ProtobufBroker.PrivateOrder',
     'ProtobufBroker.PrivateTrade',
     'ProtobufBroker.PrivatePosition',
     'ProtobufBroker.Balance', 'ProtobufBroker.Balances',
     'ProtobufStream.StreamMessage',
     'ProtobufStream.AuthenticationResult',
     'ProtobufStream.SubscriptionResult',
     'ProtobufStream.UnsubscriptionResult',
     'ProtobufStream.SubscribeError',
     'ProtobufStream.UnsubscribeError',
     'ProtobufStream.SubscriptionStatus',
     'ProtobufStream.MissedMessages',
     'ProtobufClient.ClientMessage',
     'ProtobufClient.ClientIdentificationMessage',
     'ProtobufClient.WebAuthenticationMessage',
     'ProtobufClient.TradeSessionAuth',
     'ProtobufClient.TradeSubscription',
     'ProtobufClient.StreamSubscription',
     'ProtobufClient.ClientSubscription',
     'ProtobufClient.APIAuthenticationMessage',
     'ProtobufClient.ClientSessionMessage.Session',
     'ProtobufClient.ClientSessionMessage.AnonymousTradingSession',
     'ProtobufClient.ClientSessionMessage',
     'ProtobufClient.ClientSubscribeMessage',
     'ProtobufClient.ClientUnsubscribeMessage',
     'ProtobufMarkets.Market', 'ProtobufMarkets.Order',
     'ProtobufMarkets.Trade',
     'ProtobufMarkets.MarketUpdateMessage',
     'ProtobufMarkets.OrderBookUpdate',
     'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
     'ProtobufMarkets.OrderBookDeltaUpdate',
     'ProtobufMarkets.OrderBookSpreadUpdate',
     'ProtobufMarkets.TradesUpdate',
     'ProtobufMarkets.Interval.OHLC',
     'ProtobufMarkets.Interval',
     'ProtobufMarkets.IntervalsUpdate',
     'ProtobufMarkets.SummaryUpdate',
     'ProtobufMarkets.SparklineUpdate',
     'ProtobufMarkets.Index',
     'ProtobufMarkets.IndexUpdateMessage',
     'ProtobufMarkets.TickerUpdate',
     'ProtobufMarkets.Ticker',
     'ProtobufMarkets.PairUpdateMessage',
     'ProtobufMarkets.PairVwapUpdate',
     'ProtobufMarkets.PairPerformanceUpdate',
     'ProtobufMarkets.PairTrendlineUpdate',
     'ProtobufMarkets.AssetUpdateMessage',
     'ProtobufMarkets.AssetUSDVolumeUpdate'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ProtobufBroker.BrokerSessionMessage.Session',
     'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession',
     'ProtobufBroker.BrokerSessionMessage',
     'ProtobufBroker.PlaceOrderRequest',
     'ProtobufBroker.PlaceOrderResult',
     'ProtobufBroker.CancelOrderRequest',
     'ProtobufBroker.CancelOrderResult',
     'ProtobufBroker.ReplaceOrderRequest',
     'ProtobufBroker.ClosePositionRequest',
     'ProtobufBroker.SyncRequest',
     'ProtobufBroker.BrokerRequest',
     'ProtobufBroker.OrdersUpdate',
     'ProtobufBroker.TradesUpdate',
     'ProtobufBroker.PositionsUpdate',
     'ProtobufBroker.BalancesUpdate',
     'ProtobufBroker.RequestResolutionUpdate',
     'ProtobufBroker.AnonymousSessionStatusUpdate',
     'ProtobufBroker.SessionStatusUpdate',
     'ProtobufBroker.PermissionsUpdate.Agreement',
     'ProtobufBroker.PermissionsUpdate.LeverageLevels',
     'ProtobufBroker.PermissionsUpdate',
     'ProtobufBroker.APIAccessorStatusUpdate',
     'ProtobufBroker.BrokerUpdateMessage',
     'ProtobufBroker.PrivateOrder.PriceParam',
     'ProtobufBroker.PrivateOrder',
     'ProtobufBroker.PrivateTrade',
     'ProtobufBroker.PrivatePosition',
     'ProtobufBroker.Balance', 'ProtobufBroker.Balances',
     'ProtobufStream.StreamMessage',
     'ProtobufStream.AuthenticationResult',
     'ProtobufStream.SubscriptionResult',
     'ProtobufStream.UnsubscriptionResult',
     'ProtobufStream.SubscribeError',
     'ProtobufStream.UnsubscribeError',
     'ProtobufStream.SubscriptionStatus',
     'ProtobufStream.MissedMessages',
     'ProtobufClient.ClientMessage',
     'ProtobufClient.ClientIdentificationMessage',
     'ProtobufClient.WebAuthenticationMessage',
     'ProtobufClient.TradeSessionAuth',
     'ProtobufClient.TradeSubscription',
     'ProtobufClient.StreamSubscription',
     'ProtobufClient.ClientSubscription',
     'ProtobufClient.APIAuthenticationMessage',
     'ProtobufClient.ClientSessionMessage.Session',
     'ProtobufClient.ClientSessionMessage.AnonymousTradingSession',
     'ProtobufClient.ClientSessionMessage',
     'ProtobufClient.ClientSubscribeMessage',
     'ProtobufClient.ClientUnsubscribeMessage',
     'ProtobufMarkets.Market', 'ProtobufMarkets.Order',
     'ProtobufMarkets.Trade',
     'ProtobufMarkets.MarketUpdateMessage',
     'ProtobufMarkets.OrderBookUpdate',
     'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
     'ProtobufMarkets.OrderBookDeltaUpdate',
     'ProtobufMarkets.OrderBookSpreadUpdate',
     'ProtobufMarkets.TradesUpdate',
     'ProtobufMarkets.Interval.OHLC',
     'ProtobufMarkets.Interval',
     'ProtobufMarkets.IntervalsUpdate',
     'ProtobufMarkets.SummaryUpdate',
     'ProtobufMarkets.SparklineUpdate',
     'ProtobufMarkets.Index',
     'ProtobufMarkets.IndexUpdateMessage',
     'ProtobufMarkets.TickerUpdate',
     'ProtobufMarkets.Ticker',
     'ProtobufMarkets.PairUpdateMessage',
     'ProtobufMarkets.PairVwapUpdate',
     'ProtobufMarkets.PairPerformanceUpdate',
     'ProtobufMarkets.PairTrendlineUpdate',
     'ProtobufMarkets.AssetUpdateMessage',
     'ProtobufMarkets.AssetUSDVolumeUpdate'].


get_enum_names() ->
    ['ProtobufBroker.FundingType',
     'ProtobufBroker.PrivateOrder.Type',
     'ProtobufBroker.PrivateOrder.PriceParamType',
     'ProtobufStream.AuthenticationResult.Status',
     'ProtobufClient.APIAuthenticationMessage.Source'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('ProtobufBroker.BrokerSessionMessage.Session') ->
    [#field{name = userId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = expires, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = token, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = mfaToken, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession') ->
    [#field{name = exchange, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = expiration, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.BrokerSessionMessage') ->
    [#gpb_oneof{name = 'SessionConfig', rnum = 2,
		fields =
		    [#field{name = session, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'ProtobufBroker.BrokerSessionMessage.Session'},
			    occurrence = optional, opts = []},
		     #field{name = anonymousTradingSession, fnum = 2,
			    rnum = 2,
			    type =
				{msg,
				 'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession'},
			    occurrence = optional, opts = []}]},
     #field{name = marketId, fnum = 3, rnum = 3,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PlaceOrderRequest') ->
    [#field{name = order, fnum = 2, rnum = 2,
	    type = {msg, 'ProtobufBroker.PrivateOrder'},
	    occurrence = optional, opts = []},
     #field{name = closingOrder, fnum = 3, rnum = 3,
	    type = {msg, 'ProtobufBroker.PrivateOrder'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PlaceOrderResult') ->
    [#field{name = order, fnum = 2, rnum = 2,
	    type = {msg, 'ProtobufBroker.PrivateOrder'},
	    occurrence = optional, opts = []},
     #field{name = orderId, fnum = 1, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.CancelOrderRequest') ->
    [#field{name = orderId, fnum = 2, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.CancelOrderResult') ->
    [#field{name = orderId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.ReplaceOrderRequest') ->
    [#field{name = orderId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = replacement, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufBroker.PrivateOrder'},
	    occurrence = optional, opts = []},
     #field{name = replacementClosingOrder, fnum = 3,
	    rnum = 4, type = {msg, 'ProtobufBroker.PrivateOrder'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.ClosePositionRequest') ->
    [#field{name = positionId, fnum = 2, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.SyncRequest') -> [];
find_msg_def('ProtobufBroker.BrokerRequest') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = marketId, fnum = 7, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #gpb_oneof{name = 'Request', rnum = 4,
		fields =
		    [#field{name = placeOrderRequest, fnum = 2, rnum = 4,
			    type = {msg, 'ProtobufBroker.PlaceOrderRequest'},
			    occurrence = optional, opts = []},
		     #field{name = cancelOrderRequest, fnum = 3, rnum = 4,
			    type = {msg, 'ProtobufBroker.CancelOrderRequest'},
			    occurrence = optional, opts = []},
		     #field{name = replaceOrderRequest, fnum = 6, rnum = 4,
			    type = {msg, 'ProtobufBroker.ReplaceOrderRequest'},
			    occurrence = optional, opts = []},
		     #field{name = syncRequest, fnum = 4, rnum = 4,
			    type = {msg, 'ProtobufBroker.SyncRequest'},
			    occurrence = optional, opts = []},
		     #field{name = closePositionRequest, fnum = 5, rnum = 4,
			    type = {msg, 'ProtobufBroker.ClosePositionRequest'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufBroker.OrdersUpdate') ->
    [#field{name = orders, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufBroker.PrivateOrder'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.TradesUpdate') ->
    [#field{name = trades, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufBroker.PrivateTrade'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.PositionsUpdate') ->
    [#field{name = positions, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufBroker.PrivatePosition'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.BalancesUpdate') ->
    [#field{name = balances, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufBroker.Balances'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.RequestResolutionUpdate') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = error, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = message, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #gpb_oneof{name = 'Result', rnum = 5,
		fields =
		    [#field{name = placeOrderResult, fnum = 4, rnum = 5,
			    type = {msg, 'ProtobufBroker.PlaceOrderResult'},
			    occurrence = optional, opts = []},
		     #field{name = cancelOrderResult, fnum = 5, rnum = 5,
			    type = {msg, 'ProtobufBroker.CancelOrderResult'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufBroker.AnonymousSessionStatusUpdate') ->
    [#field{name = expiration, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.SessionStatusUpdate') ->
    [#field{name = initialized, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = syncing, fnum = 2, rnum = 3, type = bool,
	    occurrence = optional, opts = []},
     #field{name = lastSyncTime, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = syncError, fnum = 4, rnum = 5,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PermissionsUpdate.Agreement') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = body, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PermissionsUpdate.LeverageLevels') ->
    [#field{name = buy, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = []},
     #field{name = sell, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.PermissionsUpdate') ->
    [#field{name = orderTypes, fnum = 1, rnum = 2,
	    type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	    occurrence = repeated, opts = []},
     #field{name = fundingTypes, fnum = 2, rnum = 3,
	    type = {enum, 'ProtobufBroker.FundingType'},
	    occurrence = repeated, opts = []},
     #field{name = agreements, fnum = 4, rnum = 4,
	    type =
		{msg, 'ProtobufBroker.PermissionsUpdate.Agreement'},
	    occurrence = repeated, opts = []},
     #field{name = currencyPairAllowed, fnum = 5, rnum = 5,
	    type = bool, occurrence = optional, opts = []},
     #field{name = leverageLevels, fnum = 6, rnum = 6,
	    type =
		{msg,
		 'ProtobufBroker.PermissionsUpdate.LeverageLevels'},
	    occurrence = optional, opts = []},
     #field{name = supportsOrderExpiry, fnum = 7, rnum = 7,
	    type = bool, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.APIAccessorStatusUpdate') ->
    [#field{name = hasAccess, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = status, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = statusString, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.BrokerUpdateMessage') ->
    [#field{name = marketId, fnum = 11, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = ordersUpdate, fnum = 1, rnum = 3,
			    type = {msg, 'ProtobufBroker.OrdersUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = tradesUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufBroker.TradesUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = balancesUpdate, fnum = 3, rnum = 3,
			    type = {msg, 'ProtobufBroker.BalancesUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = positionsUpdate, fnum = 8, rnum = 3,
			    type = {msg, 'ProtobufBroker.PositionsUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = requestResolutionUpdate, fnum = 4,
			    rnum = 3,
			    type =
				{msg, 'ProtobufBroker.RequestResolutionUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = anonymousSessionStatusUpdate, fnum = 5,
			    rnum = 3,
			    type =
				{msg,
				 'ProtobufBroker.AnonymousSessionStatusUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = permissionsUpdate, fnum = 6, rnum = 3,
			    type = {msg, 'ProtobufBroker.PermissionsUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = sessionStatusUpdate, fnum = 7, rnum = 3,
			    type = {msg, 'ProtobufBroker.SessionStatusUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = apiAccessorStatusUpdate, fnum = 9,
			    rnum = 3,
			    type =
				{msg, 'ProtobufBroker.APIAccessorStatusUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = authenticationResult, fnum = 10, rnum = 3,
			    type = {msg, 'ProtobufStream.AuthenticationResult'},
			    occurrence = optional, opts = []},
		     #field{name = subscriptionResult, fnum = 12, rnum = 3,
			    type = {msg, 'ProtobufStream.SubscriptionResult'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufBroker.PrivateOrder.PriceParam') ->
    [#field{name = value, fnum = 1, rnum = 2, type = float,
	    occurrence = optional, opts = []},
     #field{name = valueString, fnum = 3, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = type, fnum = 2, rnum = 4,
	    type =
		{enum, 'ProtobufBroker.PrivateOrder.PriceParamType'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PrivateOrder') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 4, type = float,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 5, type = float,
	    occurrence = optional, opts = []},
     #field{name = side, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = []},
     #field{name = type, fnum = 6, rnum = 7,
	    type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	    occurrence = optional, opts = []},
     #field{name = fundingType, fnum = 7, rnum = 8,
	    type = {enum, 'ProtobufBroker.FundingType'},
	    occurrence = optional, opts = []},
     #field{name = priceParams, fnum = 8, rnum = 9,
	    type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	    occurrence = repeated, opts = []},
     #field{name = amountParam, fnum = 9, rnum = 10,
	    type = float, occurrence = optional, opts = []},
     #field{name = amountParamString, fnum = 16, rnum = 11,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountFilledString, fnum = 17, rnum = 12,
	    type = string, occurrence = optional, opts = []},
     #field{name = leverage, fnum = 10, rnum = 13,
	    type = string, occurrence = optional, opts = []},
     #field{name = currentStop, fnum = 11, rnum = 14,
	    type = float, occurrence = optional, opts = []},
     #field{name = initialStop, fnum = 12, rnum = 15,
	    type = float, occurrence = optional, opts = []},
     #field{name = currentStopString, fnum = 18, rnum = 16,
	    type = string, occurrence = optional, opts = []},
     #field{name = initialStopString, fnum = 19, rnum = 17,
	    type = string, occurrence = optional, opts = []},
     #field{name = startTime, fnum = 13, rnum = 18,
	    type = int64, occurrence = optional, opts = []},
     #field{name = expireTime, fnum = 14, rnum = 19,
	    type = int64, occurrence = optional, opts = []},
     #field{name = rate, fnum = 15, rnum = 20, type = float,
	    occurrence = optional, opts = []},
     #field{name = hasClosingOrder, fnum = 20, rnum = 21,
	    type = bool, occurrence = optional, opts = []},
     #field{name = closingOrderType, fnum = 21, rnum = 22,
	    type = {enum, 'ProtobufBroker.PrivateOrder.Type'},
	    occurrence = optional, opts = []},
     #field{name = closingOrderPriceParams, fnum = 22,
	    rnum = 23,
	    type = {msg, 'ProtobufBroker.PrivateOrder.PriceParam'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.PrivateTrade') ->
    [#field{name = externalId, fnum = 7, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = orderId, fnum = 8, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 4, type = int64,
	    occurrence = optional, opts = []},
     #field{name = timeMillis, fnum = 6, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 6, type = float,
	    occurrence = optional, opts = []},
     #field{name = priceString, fnum = 9, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = amountString, fnum = 10, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = side, fnum = 5, rnum = 10, type = int32,
	    occurrence = optional, opts = []},
     #field{name = id, fnum = 1, rnum = 11, type = int64,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.PrivatePosition') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = side, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = avgPrice, fnum = 4, rnum = 5,
	    type = float, occurrence = optional, opts = []},
     #field{name = avgPriceString, fnum = 9, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountOpen, fnum = 5, rnum = 7,
	    type = float, occurrence = optional, opts = []},
     #field{name = amountClosed, fnum = 6, rnum = 8,
	    type = float, occurrence = optional, opts = []},
     #field{name = amountOpenString, fnum = 10, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountClosedString, fnum = 11, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = orderIds, fnum = 7, rnum = 11,
	    type = string, occurrence = repeated, opts = []},
     #field{name = tradeIds, fnum = 8, rnum = 12,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtobufBroker.Balance') ->
    [#field{name = currency, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 2, rnum = 3, type = float,
	    occurrence = optional, opts = []},
     #field{name = amountString, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufBroker.Balances') ->
    [#field{name = fundingType, fnum = 1, rnum = 2,
	    type = {enum, 'ProtobufBroker.FundingType'},
	    occurrence = optional, opts = []},
     #field{name = balances, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufBroker.Balance'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufStream.StreamMessage') ->
    [#gpb_oneof{name = body, rnum = 2,
		fields =
		    [#field{name = authenticationResult, fnum = 1, rnum = 2,
			    type = {msg, 'ProtobufStream.AuthenticationResult'},
			    occurrence = optional, opts = []},
		     #field{name = subscriptionResult, fnum = 5, rnum = 2,
			    type = {msg, 'ProtobufStream.SubscriptionResult'},
			    occurrence = optional, opts = []},
		     #field{name = unsubscriptionResult, fnum = 6, rnum = 2,
			    type = {msg, 'ProtobufStream.UnsubscriptionResult'},
			    occurrence = optional, opts = []},
		     #field{name = missedMessages, fnum = 7, rnum = 2,
			    type = {msg, 'ProtobufStream.MissedMessages'},
			    occurrence = optional, opts = []},
		     #field{name = marketUpdate, fnum = 2, rnum = 2,
			    type = {msg, 'ProtobufMarkets.MarketUpdateMessage'},
			    occurrence = optional, opts = []},
		     #field{name = pairUpdate, fnum = 3, rnum = 2,
			    type = {msg, 'ProtobufMarkets.PairUpdateMessage'},
			    occurrence = optional, opts = []},
		     #field{name = assetUpdate, fnum = 4, rnum = 2,
			    type = {msg, 'ProtobufMarkets.AssetUpdateMessage'},
			    occurrence = optional, opts = []},
		     #field{name = indexUpdate, fnum = 8, rnum = 2,
			    type = {msg, 'ProtobufMarkets.IndexUpdateMessage'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufStream.AuthenticationResult') ->
    [#field{name = status, fnum = 1, rnum = 2,
	    type =
		{enum, 'ProtobufStream.AuthenticationResult.Status'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufStream.SubscriptionResult') ->
    [#field{name = subscribed, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated,
	    opts = [deprecated]},
     #field{name = failed, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufStream.SubscribeError'},
	    occurrence = repeated, opts = []},
     #field{name = status, fnum = 3, rnum = 4,
	    type = {msg, 'ProtobufStream.SubscriptionStatus'},
	    occurrence = optional, opts = []},
     #field{name = subscriptions, fnum = 4, rnum = 5,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufStream.UnsubscriptionResult') ->
    [#field{name = unsubscribed, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated,
	    opts = [deprecated]},
     #field{name = failed, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufStream.UnsubscribeError'},
	    occurrence = repeated, opts = []},
     #field{name = status, fnum = 3, rnum = 4,
	    type = {msg, 'ProtobufStream.SubscriptionStatus'},
	    occurrence = optional, opts = []},
     #field{name = subscriptions, fnum = 4, rnum = 5,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufStream.SubscribeError') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = [deprecated]},
     #field{name = error, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = subscription, fnum = 3, rnum = 4,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufStream.UnsubscribeError') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = [deprecated]},
     #field{name = error, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = subscription, fnum = 3, rnum = 4,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufStream.SubscriptionStatus') ->
    [#field{name = keys, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = [deprecated]},
     #field{name = subscriptions, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufStream.MissedMessages') ->
    [#field{name = numMissedMessages, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufClient.ClientMessage') ->
    [#gpb_oneof{name = body, rnum = 2,
		fields =
		    [#field{name = identification, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'ProtobufClient.ClientIdentificationMessage'},
			    occurrence = optional, opts = []},
		     #field{name = subscribe, fnum = 2, rnum = 2,
			    type =
				{msg, 'ProtobufClient.ClientSubscribeMessage'},
			    occurrence = optional, opts = []},
		     #field{name = unsubscribe, fnum = 3, rnum = 2,
			    type =
				{msg,
				 'ProtobufClient.ClientUnsubscribeMessage'},
			    occurrence = optional, opts = []},
		     #field{name = webAuthentication, fnum = 4, rnum = 2,
			    type =
				{msg,
				 'ProtobufClient.WebAuthenticationMessage'},
			    occurrence = optional, opts = []},
		     #field{name = apiAuthentication, fnum = 5, rnum = 2,
			    type =
				{msg,
				 'ProtobufClient.APIAuthenticationMessage'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufClient.ClientIdentificationMessage') ->
    [#field{name = useragent, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = revision, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = integration, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = locale, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = subscriptions, fnum = 5, rnum = 6,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtobufClient.WebAuthenticationMessage') ->
    [#field{name = identification, fnum = 1, rnum = 2,
	    type =
		{msg, 'ProtobufClient.ClientIdentificationMessage'},
	    occurrence = optional, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = nonce, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = access_list, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtobufClient.TradeSessionAuth') ->
    [#field{name = api_key, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = api_secret, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = customer_id, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = key_passphrase, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufClient.TradeSubscription') ->
    [#field{name = marketId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = auth, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufClient.TradeSessionAuth'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufClient.StreamSubscription') ->
    [#field{name = resource, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufClient.ClientSubscription') ->
    [#gpb_oneof{name = body, rnum = 2,
		fields =
		    [#field{name = stream_subscription, fnum = 1, rnum = 2,
			    type = {msg, 'ProtobufClient.StreamSubscription'},
			    occurrence = optional, opts = []},
		     #field{name = trade_subscription, fnum = 2, rnum = 2,
			    type = {msg, 'ProtobufClient.TradeSubscription'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufClient.APIAuthenticationMessage') ->
    [#field{name = token, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = nonce, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = api_key, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = source, fnum = 4, rnum = 5,
	    type =
		{enum,
		 'ProtobufClient.APIAuthenticationMessage.Source'},
	    occurrence = optional, opts = []},
     #field{name = version, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = subscriptions, fnum = 6, rnum = 7,
	    type = string, occurrence = repeated,
	    opts = [deprecated]},
     #field{name = client_subscriptions, fnum = 7, rnum = 8,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufClient.ClientSessionMessage.Session') ->
    [#field{name = userId, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = expires, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = token, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = mfaToken, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufClient.ClientSessionMessage.AnonymousTradingSession') ->
    [#field{name = exchange, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = token, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = expiration, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufClient.ClientSessionMessage') ->
    [#gpb_oneof{name = 'SessionConfig', rnum = 2,
		fields =
		    [#field{name = session, fnum = 1, rnum = 2,
			    type =
				{msg,
				 'ProtobufClient.ClientSessionMessage.Session'},
			    occurrence = optional, opts = []},
		     #field{name = anonymousTradingSession, fnum = 2,
			    rnum = 2,
			    type =
				{msg,
				 'ProtobufClient.ClientSessionMessage.AnonymousTradingSession'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufClient.ClientSubscribeMessage') ->
    [#field{name = subscriptionKeys, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated,
	    opts = [deprecated]},
     #field{name = subscriptions, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufClient.ClientUnsubscribeMessage') ->
    [#field{name = subscriptionKeys, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated,
	    opts = [deprecated]},
     #field{name = subscriptions, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufClient.ClientSubscription'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.Market') ->
    [#field{name = exchangeId, fnum = 3, rnum = 2,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = currencyPairId, fnum = 4, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = marketId, fnum = 5, rnum = 4,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = exchange, fnum = 1, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = currencyPair, fnum = 2, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Order') ->
    [#field{name = priceStr, fnum = 3, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountStr, fnum = 4, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = price, fnum = 1, rnum = 4, type = float,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 2, rnum = 5, type = float,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Trade') ->
    [#field{name = externalId, fnum = 11, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = timestampMillis, fnum = 5, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = timestampNano, fnum = 10, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = priceStr, fnum = 8, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = amountStr, fnum = 9, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 9, type = float,
	    occurrence = optional, opts = []},
     #field{name = priceDouble, fnum = 6, rnum = 10,
	    type = double, occurrence = optional, opts = []},
     #field{name = amountDouble, fnum = 7, rnum = 11,
	    type = double, occurrence = optional, opts = []},
     #field{name = id, fnum = 1, rnum = 12, type = int64,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.MarketUpdateMessage') ->
    [#field{name = market, fnum = 9, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Market'},
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = orderBookUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufMarkets.OrderBookUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = orderBookDeltaUpdate, fnum = 3, rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.OrderBookDeltaUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = orderBookSpreadUpdate, fnum = 11,
			    rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.OrderBookSpreadUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = tradesUpdate, fnum = 4, rnum = 3,
			    type = {msg, 'ProtobufMarkets.TradesUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = intervalsUpdate, fnum = 5, rnum = 3,
			    type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = summaryUpdate, fnum = 6, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = sparklineUpdate, fnum = 7, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.OrderBookUpdate') ->
    [#field{name = aggregationModulusStr, fnum = 4,
	    rnum = 2, type = string, occurrence = optional,
	    opts = []},
     #field{name = seqNum, fnum = 5, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = bids, fnum = 1, rnum = 4,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = asks, fnum = 2, rnum = 5,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = aggregationModulus, fnum = 3, rnum = 6,
	    type = float, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas') ->
    [#field{name = set, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = delta, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = repeated, opts = []},
     #field{name = remove, fnum = 3, rnum = 4, type = float,
	    occurrence = repeated, opts = []},
     #field{name = removeStr, fnum = 4, rnum = 5,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.OrderBookDeltaUpdate') ->
    [#field{name = aggregationModulus, fnum = 3, rnum = 2,
	    type = float, occurrence = optional, opts = []},
     #field{name = aggregationModulusStr, fnum = 4, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = seqNum, fnum = 5, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = bids, fnum = 1, rnum = 5,
	    type =
		{msg,
		 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	    occurrence = optional, opts = []},
     #field{name = asks, fnum = 2, rnum = 6,
	    type =
		{msg,
		 'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.OrderBookSpreadUpdate') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = bid, fnum = 2, rnum = 3,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = optional, opts = []},
     #field{name = ask, fnum = 3, rnum = 4,
	    type = {msg, 'ProtobufMarkets.Order'},
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.TradesUpdate') ->
    [#field{name = trades, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Trade'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.Interval.OHLC') ->
    [#field{name = openStr, fnum = 5, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = highStr, fnum = 6, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = lowStr, fnum = 7, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = closeStr, fnum = 8, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = open, fnum = 1, rnum = 6, type = float,
	    occurrence = optional, opts = []},
     #field{name = high, fnum = 2, rnum = 7, type = float,
	    occurrence = optional, opts = []},
     #field{name = low, fnum = 3, rnum = 8, type = float,
	    occurrence = optional, opts = []},
     #field{name = close, fnum = 4, rnum = 9, type = float,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Interval') ->
    [#field{name = closetime, fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = period, fnum = 4, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = ohlc, fnum = 2, rnum = 4,
	    type = {msg, 'ProtobufMarkets.Interval.OHLC'},
	    occurrence = optional, opts = []},
     #field{name = volumeBaseStr, fnum = 6, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeQuoteStr, fnum = 7, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeBase, fnum = 3, rnum = 7,
	    type = float, occurrence = optional, opts = []},
     #field{name = volumeQuote, fnum = 5, rnum = 8,
	    type = float, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.IntervalsUpdate') ->
    [#field{name = intervals, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Interval'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.SummaryUpdate') ->
    [#field{name = lastStr, fnum = 10, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = highStr, fnum = 11, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = lowStr, fnum = 12, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeBaseStr, fnum = 13, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = volumeQuoteStr, fnum = 14, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = changeAbsoluteStr, fnum = 15, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = changePercentStr, fnum = 16, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = numTrades, fnum = 8, rnum = 9,
	    type = int32, occurrence = optional, opts = []},
     #field{name = last, fnum = 2, rnum = 10, type = float,
	    occurrence = optional, opts = []},
     #field{name = high, fnum = 3, rnum = 11, type = float,
	    occurrence = optional, opts = []},
     #field{name = low, fnum = 4, rnum = 12, type = float,
	    occurrence = optional, opts = []},
     #field{name = volumeBase, fnum = 5, rnum = 13,
	    type = float, occurrence = optional, opts = []},
     #field{name = volumeQuote, fnum = 9, rnum = 14,
	    type = float, occurrence = optional, opts = []},
     #field{name = changeAbsolute, fnum = 6, rnum = 15,
	    type = float, occurrence = optional, opts = []},
     #field{name = changePercent, fnum = 7, rnum = 16,
	    type = float, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.SparklineUpdate') ->
    [#field{name = time, fnum = 2, rnum = 2, type = int64,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 3, type = float,
	    occurrence = optional, opts = []},
     #field{name = priceStr, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.Index') ->
    [#field{name = id, fnum = 1, rnum = 2, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = symbol, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = indexType, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = cwIndex, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []},
     #field{name = exchangeId, fnum = 5, rnum = 6,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = instrumentId, fnum = 6, rnum = 7,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.IndexUpdateMessage') ->
    [#field{name = index, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Index'},
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = tickerUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufMarkets.TickerUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = intervalsUpdate, fnum = 3, rnum = 3,
			    type = {msg, 'ProtobufMarkets.IntervalsUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = summaryUpdate, fnum = 4, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SummaryUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = sparklineUpdate, fnum = 5, rnum = 3,
			    type = {msg, 'ProtobufMarkets.SparklineUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.TickerUpdate') ->
    [#field{name = tickers, fnum = 1, rnum = 2,
	    type = {msg, 'ProtobufMarkets.Ticker'},
	    occurrence = repeated, opts = []}];
find_msg_def('ProtobufMarkets.Ticker') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = timestampNano, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.PairUpdateMessage') ->
    [#field{name = pair, fnum = 1, rnum = 2, type = uint64,
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = vwapUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufMarkets.PairVwapUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = performanceUpdate, fnum = 3, rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.PairPerformanceUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = trendlineUpdate, fnum = 4, rnum = 3,
			    type = {msg, 'ProtobufMarkets.PairTrendlineUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.PairVwapUpdate') ->
    [#field{name = vwap, fnum = 1, rnum = 2, type = double,
	    occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.PairPerformanceUpdate') ->
    [#field{name = window, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = performance, fnum = 2, rnum = 3,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.PairTrendlineUpdate') ->
    [#field{name = window, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = volume, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.AssetUpdateMessage') ->
    [#field{name = asset, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = usdVolumeUpdate, fnum = 2, rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.AssetUSDVolumeUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.AssetUSDVolumeUpdate') ->
    [#field{name = volume, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('ProtobufBroker.FundingType') ->
    [{'Spot', 0}, {'Margin', 1}];
find_enum_def('ProtobufBroker.PrivateOrder.Type') ->
    [{'Market', 0}, {'Limit', 1}, {'StopLoss', 2},
     {'StopLossLimit', 3}, {'TakeProfit', 4},
     {'TakeProfitLimit', 5}, {'StopLossTakeProfit', 6},
     {'StopLossTakeProfitLimit', 7}, {'TrailingStopLoss', 8},
     {'TrailingStopLossLimit', 9}, {'StopLossAndLimit', 10},
     {'FillOrKill', 11}, {'SettlePosition', 12}];
find_enum_def('ProtobufBroker.PrivateOrder.PriceParamType') ->
    [{'AbsoluteValue', 0}, {'OffsetValue', 1},
     {'PrecentageOffsetValue', 2}];
find_enum_def('ProtobufStream.AuthenticationResult.Status') ->
    [{'UNKNOWN', 0}, {'AUTHENTICATED', 1}, {'BAD_NONCE', 2},
     {'BAD_TOKEN', 3}, {'TOKEN_EXPIRED', 4}];
find_enum_def('ProtobufClient.APIAuthenticationMessage.Source') ->
    [{'UNKNOWN', 0}, {'GOLANG_SDK', 1},
     {'JAVASCRIPT_SDK', 2}, {'NODE_SDK', 3}, {'RUST_SDK', 5},
     {'CW_WEB', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('ProtobufBroker.FundingType',
		     Value) ->
    'enum_symbol_by_value_ProtobufBroker.FundingType'(Value);
enum_symbol_by_value('ProtobufBroker.PrivateOrder.Type',
		     Value) ->
    'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(Value);
enum_symbol_by_value('ProtobufBroker.PrivateOrder.PriceParamType',
		     Value) ->
    'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(Value);
enum_symbol_by_value('ProtobufStream.AuthenticationResult.Status',
		     Value) ->
    'enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'(Value);
enum_symbol_by_value('ProtobufClient.APIAuthenticationMessage.Source',
		     Value) ->
    'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(Value).


enum_value_by_symbol('ProtobufBroker.FundingType',
		     Sym) ->
    'enum_value_by_symbol_ProtobufBroker.FundingType'(Sym);
enum_value_by_symbol('ProtobufBroker.PrivateOrder.Type',
		     Sym) ->
    'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'(Sym);
enum_value_by_symbol('ProtobufBroker.PrivateOrder.PriceParamType',
		     Sym) ->
    'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'(Sym);
enum_value_by_symbol('ProtobufStream.AuthenticationResult.Status',
		     Sym) ->
    'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'(Sym);
enum_value_by_symbol('ProtobufClient.APIAuthenticationMessage.Source',
		     Sym) ->
    'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'(Sym).


'enum_symbol_by_value_ProtobufBroker.FundingType'(0) ->
    'Spot';
'enum_symbol_by_value_ProtobufBroker.FundingType'(1) ->
    'Margin'.


'enum_value_by_symbol_ProtobufBroker.FundingType'('Spot') ->
    0;
'enum_value_by_symbol_ProtobufBroker.FundingType'('Margin') ->
    1.

'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(0) ->
    'Market';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(1) ->
    'Limit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(2) ->
    'StopLoss';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(3) ->
    'StopLossLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(4) ->
    'TakeProfit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(5) ->
    'TakeProfitLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(6) ->
    'StopLossTakeProfit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(7) ->
    'StopLossTakeProfitLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(8) ->
    'TrailingStopLoss';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(9) ->
    'TrailingStopLossLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(10) ->
    'StopLossAndLimit';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(11) ->
    'FillOrKill';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.Type'(12) ->
    'SettlePosition'.


'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('Market') ->
    0;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('Limit') ->
    1;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLoss') ->
    2;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossLimit') ->
    3;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TakeProfit') ->
    4;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TakeProfitLimit') ->
    5;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfit') ->
    6;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossTakeProfitLimit') ->
    7;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TrailingStopLoss') ->
    8;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('TrailingStopLossLimit') ->
    9;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('StopLossAndLimit') ->
    10;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('FillOrKill') ->
    11;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.Type'('SettlePosition') ->
    12.

'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(0) ->
    'AbsoluteValue';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(1) ->
    'OffsetValue';
'enum_symbol_by_value_ProtobufBroker.PrivateOrder.PriceParamType'(2) ->
    'PrecentageOffsetValue'.


'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'('AbsoluteValue') ->
    0;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'('OffsetValue') ->
    1;
'enum_value_by_symbol_ProtobufBroker.PrivateOrder.PriceParamType'('PrecentageOffsetValue') ->
    2.

'enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'(0) ->
    'UNKNOWN';
'enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'(1) ->
    'AUTHENTICATED';
'enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'(2) ->
    'BAD_NONCE';
'enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'(3) ->
    'BAD_TOKEN';
'enum_symbol_by_value_ProtobufStream.AuthenticationResult.Status'(4) ->
    'TOKEN_EXPIRED'.


'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'('UNKNOWN') ->
    0;
'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'('AUTHENTICATED') ->
    1;
'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'('BAD_NONCE') ->
    2;
'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'('BAD_TOKEN') ->
    3;
'enum_value_by_symbol_ProtobufStream.AuthenticationResult.Status'('TOKEN_EXPIRED') ->
    4.

'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(0) ->
    'UNKNOWN';
'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(1) ->
    'GOLANG_SDK';
'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(2) ->
    'JAVASCRIPT_SDK';
'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(3) ->
    'NODE_SDK';
'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(5) ->
    'RUST_SDK';
'enum_symbol_by_value_ProtobufClient.APIAuthenticationMessage.Source'(4) ->
    'CW_WEB'.


'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'('UNKNOWN') ->
    0;
'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'('GOLANG_SDK') ->
    1;
'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'('JAVASCRIPT_SDK') ->
    2;
'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'('NODE_SDK') ->
    3;
'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'('RUST_SDK') ->
    5;
'enum_value_by_symbol_ProtobufClient.APIAuthenticationMessage.Source'('CW_WEB') ->
    4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ProtobufBroker.BrokerSessionMessage.Session">>) ->
    'ProtobufBroker.BrokerSessionMessage.Session';
fqbin_to_msg_name(<<"ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession">>) ->
    'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession';
fqbin_to_msg_name(<<"ProtobufBroker.BrokerSessionMessage">>) ->
    'ProtobufBroker.BrokerSessionMessage';
fqbin_to_msg_name(<<"ProtobufBroker.PlaceOrderRequest">>) ->
    'ProtobufBroker.PlaceOrderRequest';
fqbin_to_msg_name(<<"ProtobufBroker.PlaceOrderResult">>) ->
    'ProtobufBroker.PlaceOrderResult';
fqbin_to_msg_name(<<"ProtobufBroker.CancelOrderRequest">>) ->
    'ProtobufBroker.CancelOrderRequest';
fqbin_to_msg_name(<<"ProtobufBroker.CancelOrderResult">>) ->
    'ProtobufBroker.CancelOrderResult';
fqbin_to_msg_name(<<"ProtobufBroker.ReplaceOrderRequest">>) ->
    'ProtobufBroker.ReplaceOrderRequest';
fqbin_to_msg_name(<<"ProtobufBroker.ClosePositionRequest">>) ->
    'ProtobufBroker.ClosePositionRequest';
fqbin_to_msg_name(<<"ProtobufBroker.SyncRequest">>) ->
    'ProtobufBroker.SyncRequest';
fqbin_to_msg_name(<<"ProtobufBroker.BrokerRequest">>) ->
    'ProtobufBroker.BrokerRequest';
fqbin_to_msg_name(<<"ProtobufBroker.OrdersUpdate">>) ->
    'ProtobufBroker.OrdersUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.TradesUpdate">>) ->
    'ProtobufBroker.TradesUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.PositionsUpdate">>) ->
    'ProtobufBroker.PositionsUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.BalancesUpdate">>) ->
    'ProtobufBroker.BalancesUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.RequestResolutionUpdate">>) ->
    'ProtobufBroker.RequestResolutionUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.AnonymousSessionStatusUpdate">>) ->
    'ProtobufBroker.AnonymousSessionStatusUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.SessionStatusUpdate">>) ->
    'ProtobufBroker.SessionStatusUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.PermissionsUpdate.Agreement">>) ->
    'ProtobufBroker.PermissionsUpdate.Agreement';
fqbin_to_msg_name(<<"ProtobufBroker.PermissionsUpdate.LeverageLevels">>) ->
    'ProtobufBroker.PermissionsUpdate.LeverageLevels';
fqbin_to_msg_name(<<"ProtobufBroker.PermissionsUpdate">>) ->
    'ProtobufBroker.PermissionsUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.APIAccessorStatusUpdate">>) ->
    'ProtobufBroker.APIAccessorStatusUpdate';
fqbin_to_msg_name(<<"ProtobufBroker.BrokerUpdateMessage">>) ->
    'ProtobufBroker.BrokerUpdateMessage';
fqbin_to_msg_name(<<"ProtobufBroker.PrivateOrder.PriceParam">>) ->
    'ProtobufBroker.PrivateOrder.PriceParam';
fqbin_to_msg_name(<<"ProtobufBroker.PrivateOrder">>) ->
    'ProtobufBroker.PrivateOrder';
fqbin_to_msg_name(<<"ProtobufBroker.PrivateTrade">>) ->
    'ProtobufBroker.PrivateTrade';
fqbin_to_msg_name(<<"ProtobufBroker.PrivatePosition">>) ->
    'ProtobufBroker.PrivatePosition';
fqbin_to_msg_name(<<"ProtobufBroker.Balance">>) -> 'ProtobufBroker.Balance';
fqbin_to_msg_name(<<"ProtobufBroker.Balances">>) -> 'ProtobufBroker.Balances';
fqbin_to_msg_name(<<"ProtobufStream.StreamMessage">>) ->
    'ProtobufStream.StreamMessage';
fqbin_to_msg_name(<<"ProtobufStream.AuthenticationResult">>) ->
    'ProtobufStream.AuthenticationResult';
fqbin_to_msg_name(<<"ProtobufStream.SubscriptionResult">>) ->
    'ProtobufStream.SubscriptionResult';
fqbin_to_msg_name(<<"ProtobufStream.UnsubscriptionResult">>) ->
    'ProtobufStream.UnsubscriptionResult';
fqbin_to_msg_name(<<"ProtobufStream.SubscribeError">>) ->
    'ProtobufStream.SubscribeError';
fqbin_to_msg_name(<<"ProtobufStream.UnsubscribeError">>) ->
    'ProtobufStream.UnsubscribeError';
fqbin_to_msg_name(<<"ProtobufStream.SubscriptionStatus">>) ->
    'ProtobufStream.SubscriptionStatus';
fqbin_to_msg_name(<<"ProtobufStream.MissedMessages">>) ->
    'ProtobufStream.MissedMessages';
fqbin_to_msg_name(<<"ProtobufClient.ClientMessage">>) ->
    'ProtobufClient.ClientMessage';
fqbin_to_msg_name(<<"ProtobufClient.ClientIdentificationMessage">>) ->
    'ProtobufClient.ClientIdentificationMessage';
fqbin_to_msg_name(<<"ProtobufClient.WebAuthenticationMessage">>) ->
    'ProtobufClient.WebAuthenticationMessage';
fqbin_to_msg_name(<<"ProtobufClient.TradeSessionAuth">>) ->
    'ProtobufClient.TradeSessionAuth';
fqbin_to_msg_name(<<"ProtobufClient.TradeSubscription">>) ->
    'ProtobufClient.TradeSubscription';
fqbin_to_msg_name(<<"ProtobufClient.StreamSubscription">>) ->
    'ProtobufClient.StreamSubscription';
fqbin_to_msg_name(<<"ProtobufClient.ClientSubscription">>) ->
    'ProtobufClient.ClientSubscription';
fqbin_to_msg_name(<<"ProtobufClient.APIAuthenticationMessage">>) ->
    'ProtobufClient.APIAuthenticationMessage';
fqbin_to_msg_name(<<"ProtobufClient.ClientSessionMessage.Session">>) ->
    'ProtobufClient.ClientSessionMessage.Session';
fqbin_to_msg_name(<<"ProtobufClient.ClientSessionMessage.AnonymousTradingSession">>) ->
    'ProtobufClient.ClientSessionMessage.AnonymousTradingSession';
fqbin_to_msg_name(<<"ProtobufClient.ClientSessionMessage">>) ->
    'ProtobufClient.ClientSessionMessage';
fqbin_to_msg_name(<<"ProtobufClient.ClientSubscribeMessage">>) ->
    'ProtobufClient.ClientSubscribeMessage';
fqbin_to_msg_name(<<"ProtobufClient.ClientUnsubscribeMessage">>) ->
    'ProtobufClient.ClientUnsubscribeMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.Market">>) -> 'ProtobufMarkets.Market';
fqbin_to_msg_name(<<"ProtobufMarkets.Order">>) -> 'ProtobufMarkets.Order';
fqbin_to_msg_name(<<"ProtobufMarkets.Trade">>) -> 'ProtobufMarkets.Trade';
fqbin_to_msg_name(<<"ProtobufMarkets.MarketUpdateMessage">>) ->
    'ProtobufMarkets.MarketUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookUpdate">>) ->
    'ProtobufMarkets.OrderBookUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas">>) ->
    'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookDeltaUpdate">>) ->
    'ProtobufMarkets.OrderBookDeltaUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.OrderBookSpreadUpdate">>) ->
    'ProtobufMarkets.OrderBookSpreadUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.TradesUpdate">>) ->
    'ProtobufMarkets.TradesUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.Interval.OHLC">>) ->
    'ProtobufMarkets.Interval.OHLC';
fqbin_to_msg_name(<<"ProtobufMarkets.Interval">>) ->
    'ProtobufMarkets.Interval';
fqbin_to_msg_name(<<"ProtobufMarkets.IntervalsUpdate">>) ->
    'ProtobufMarkets.IntervalsUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.SummaryUpdate">>) ->
    'ProtobufMarkets.SummaryUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.SparklineUpdate">>) ->
    'ProtobufMarkets.SparklineUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.Index">>) -> 'ProtobufMarkets.Index';
fqbin_to_msg_name(<<"ProtobufMarkets.IndexUpdateMessage">>) ->
    'ProtobufMarkets.IndexUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.TickerUpdate">>) ->
    'ProtobufMarkets.TickerUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.Ticker">>) -> 'ProtobufMarkets.Ticker';
fqbin_to_msg_name(<<"ProtobufMarkets.PairUpdateMessage">>) ->
    'ProtobufMarkets.PairUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.PairVwapUpdate">>) ->
    'ProtobufMarkets.PairVwapUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.PairPerformanceUpdate">>) ->
    'ProtobufMarkets.PairPerformanceUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.PairTrendlineUpdate">>) ->
    'ProtobufMarkets.PairTrendlineUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.AssetUpdateMessage">>) ->
    'ProtobufMarkets.AssetUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.AssetUSDVolumeUpdate">>) ->
    'ProtobufMarkets.AssetUSDVolumeUpdate';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ProtobufBroker.BrokerSessionMessage.Session') ->
    <<"ProtobufBroker.BrokerSessionMessage.Session">>;
msg_name_to_fqbin('ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession') ->
    <<"ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession">>;
msg_name_to_fqbin('ProtobufBroker.BrokerSessionMessage') ->
    <<"ProtobufBroker.BrokerSessionMessage">>;
msg_name_to_fqbin('ProtobufBroker.PlaceOrderRequest') ->
    <<"ProtobufBroker.PlaceOrderRequest">>;
msg_name_to_fqbin('ProtobufBroker.PlaceOrderResult') ->
    <<"ProtobufBroker.PlaceOrderResult">>;
msg_name_to_fqbin('ProtobufBroker.CancelOrderRequest') ->
    <<"ProtobufBroker.CancelOrderRequest">>;
msg_name_to_fqbin('ProtobufBroker.CancelOrderResult') ->
    <<"ProtobufBroker.CancelOrderResult">>;
msg_name_to_fqbin('ProtobufBroker.ReplaceOrderRequest') ->
    <<"ProtobufBroker.ReplaceOrderRequest">>;
msg_name_to_fqbin('ProtobufBroker.ClosePositionRequest') ->
    <<"ProtobufBroker.ClosePositionRequest">>;
msg_name_to_fqbin('ProtobufBroker.SyncRequest') ->
    <<"ProtobufBroker.SyncRequest">>;
msg_name_to_fqbin('ProtobufBroker.BrokerRequest') ->
    <<"ProtobufBroker.BrokerRequest">>;
msg_name_to_fqbin('ProtobufBroker.OrdersUpdate') ->
    <<"ProtobufBroker.OrdersUpdate">>;
msg_name_to_fqbin('ProtobufBroker.TradesUpdate') ->
    <<"ProtobufBroker.TradesUpdate">>;
msg_name_to_fqbin('ProtobufBroker.PositionsUpdate') ->
    <<"ProtobufBroker.PositionsUpdate">>;
msg_name_to_fqbin('ProtobufBroker.BalancesUpdate') ->
    <<"ProtobufBroker.BalancesUpdate">>;
msg_name_to_fqbin('ProtobufBroker.RequestResolutionUpdate') ->
    <<"ProtobufBroker.RequestResolutionUpdate">>;
msg_name_to_fqbin('ProtobufBroker.AnonymousSessionStatusUpdate') ->
    <<"ProtobufBroker.AnonymousSessionStatusUpdate">>;
msg_name_to_fqbin('ProtobufBroker.SessionStatusUpdate') ->
    <<"ProtobufBroker.SessionStatusUpdate">>;
msg_name_to_fqbin('ProtobufBroker.PermissionsUpdate.Agreement') ->
    <<"ProtobufBroker.PermissionsUpdate.Agreement">>;
msg_name_to_fqbin('ProtobufBroker.PermissionsUpdate.LeverageLevels') ->
    <<"ProtobufBroker.PermissionsUpdate.LeverageLevels">>;
msg_name_to_fqbin('ProtobufBroker.PermissionsUpdate') ->
    <<"ProtobufBroker.PermissionsUpdate">>;
msg_name_to_fqbin('ProtobufBroker.APIAccessorStatusUpdate') ->
    <<"ProtobufBroker.APIAccessorStatusUpdate">>;
msg_name_to_fqbin('ProtobufBroker.BrokerUpdateMessage') ->
    <<"ProtobufBroker.BrokerUpdateMessage">>;
msg_name_to_fqbin('ProtobufBroker.PrivateOrder.PriceParam') ->
    <<"ProtobufBroker.PrivateOrder.PriceParam">>;
msg_name_to_fqbin('ProtobufBroker.PrivateOrder') ->
    <<"ProtobufBroker.PrivateOrder">>;
msg_name_to_fqbin('ProtobufBroker.PrivateTrade') ->
    <<"ProtobufBroker.PrivateTrade">>;
msg_name_to_fqbin('ProtobufBroker.PrivatePosition') ->
    <<"ProtobufBroker.PrivatePosition">>;
msg_name_to_fqbin('ProtobufBroker.Balance') -> <<"ProtobufBroker.Balance">>;
msg_name_to_fqbin('ProtobufBroker.Balances') -> <<"ProtobufBroker.Balances">>;
msg_name_to_fqbin('ProtobufStream.StreamMessage') ->
    <<"ProtobufStream.StreamMessage">>;
msg_name_to_fqbin('ProtobufStream.AuthenticationResult') ->
    <<"ProtobufStream.AuthenticationResult">>;
msg_name_to_fqbin('ProtobufStream.SubscriptionResult') ->
    <<"ProtobufStream.SubscriptionResult">>;
msg_name_to_fqbin('ProtobufStream.UnsubscriptionResult') ->
    <<"ProtobufStream.UnsubscriptionResult">>;
msg_name_to_fqbin('ProtobufStream.SubscribeError') ->
    <<"ProtobufStream.SubscribeError">>;
msg_name_to_fqbin('ProtobufStream.UnsubscribeError') ->
    <<"ProtobufStream.UnsubscribeError">>;
msg_name_to_fqbin('ProtobufStream.SubscriptionStatus') ->
    <<"ProtobufStream.SubscriptionStatus">>;
msg_name_to_fqbin('ProtobufStream.MissedMessages') ->
    <<"ProtobufStream.MissedMessages">>;
msg_name_to_fqbin('ProtobufClient.ClientMessage') ->
    <<"ProtobufClient.ClientMessage">>;
msg_name_to_fqbin('ProtobufClient.ClientIdentificationMessage') ->
    <<"ProtobufClient.ClientIdentificationMessage">>;
msg_name_to_fqbin('ProtobufClient.WebAuthenticationMessage') ->
    <<"ProtobufClient.WebAuthenticationMessage">>;
msg_name_to_fqbin('ProtobufClient.TradeSessionAuth') ->
    <<"ProtobufClient.TradeSessionAuth">>;
msg_name_to_fqbin('ProtobufClient.TradeSubscription') ->
    <<"ProtobufClient.TradeSubscription">>;
msg_name_to_fqbin('ProtobufClient.StreamSubscription') ->
    <<"ProtobufClient.StreamSubscription">>;
msg_name_to_fqbin('ProtobufClient.ClientSubscription') ->
    <<"ProtobufClient.ClientSubscription">>;
msg_name_to_fqbin('ProtobufClient.APIAuthenticationMessage') ->
    <<"ProtobufClient.APIAuthenticationMessage">>;
msg_name_to_fqbin('ProtobufClient.ClientSessionMessage.Session') ->
    <<"ProtobufClient.ClientSessionMessage.Session">>;
msg_name_to_fqbin('ProtobufClient.ClientSessionMessage.AnonymousTradingSession') ->
    <<"ProtobufClient.ClientSessionMessage.AnonymousTradingSession">>;
msg_name_to_fqbin('ProtobufClient.ClientSessionMessage') ->
    <<"ProtobufClient.ClientSessionMessage">>;
msg_name_to_fqbin('ProtobufClient.ClientSubscribeMessage') ->
    <<"ProtobufClient.ClientSubscribeMessage">>;
msg_name_to_fqbin('ProtobufClient.ClientUnsubscribeMessage') ->
    <<"ProtobufClient.ClientUnsubscribeMessage">>;
msg_name_to_fqbin('ProtobufMarkets.Market') -> <<"ProtobufMarkets.Market">>;
msg_name_to_fqbin('ProtobufMarkets.Order') -> <<"ProtobufMarkets.Order">>;
msg_name_to_fqbin('ProtobufMarkets.Trade') -> <<"ProtobufMarkets.Trade">>;
msg_name_to_fqbin('ProtobufMarkets.MarketUpdateMessage') ->
    <<"ProtobufMarkets.MarketUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookUpdate') ->
    <<"ProtobufMarkets.OrderBookUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas') ->
    <<"ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookDeltaUpdate') ->
    <<"ProtobufMarkets.OrderBookDeltaUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.OrderBookSpreadUpdate') ->
    <<"ProtobufMarkets.OrderBookSpreadUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.TradesUpdate') ->
    <<"ProtobufMarkets.TradesUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.Interval.OHLC') ->
    <<"ProtobufMarkets.Interval.OHLC">>;
msg_name_to_fqbin('ProtobufMarkets.Interval') ->
    <<"ProtobufMarkets.Interval">>;
msg_name_to_fqbin('ProtobufMarkets.IntervalsUpdate') ->
    <<"ProtobufMarkets.IntervalsUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.SummaryUpdate') ->
    <<"ProtobufMarkets.SummaryUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.SparklineUpdate') ->
    <<"ProtobufMarkets.SparklineUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.Index') -> <<"ProtobufMarkets.Index">>;
msg_name_to_fqbin('ProtobufMarkets.IndexUpdateMessage') ->
    <<"ProtobufMarkets.IndexUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.TickerUpdate') ->
    <<"ProtobufMarkets.TickerUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.Ticker') -> <<"ProtobufMarkets.Ticker">>;
msg_name_to_fqbin('ProtobufMarkets.PairUpdateMessage') ->
    <<"ProtobufMarkets.PairUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.PairVwapUpdate') ->
    <<"ProtobufMarkets.PairVwapUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.PairPerformanceUpdate') ->
    <<"ProtobufMarkets.PairPerformanceUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.PairTrendlineUpdate') ->
    <<"ProtobufMarkets.PairTrendlineUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.AssetUpdateMessage') ->
    <<"ProtobufMarkets.AssetUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.AssetUSDVolumeUpdate') ->
    <<"ProtobufMarkets.AssetUSDVolumeUpdate">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"ProtobufBroker.FundingType">>) ->
    'ProtobufBroker.FundingType';
fqbin_to_enum_name(<<"ProtobufBroker.PrivateOrder.Type">>) ->
    'ProtobufBroker.PrivateOrder.Type';
fqbin_to_enum_name(<<"ProtobufBroker.PrivateOrder.PriceParamType">>) ->
    'ProtobufBroker.PrivateOrder.PriceParamType';
fqbin_to_enum_name(<<"ProtobufStream.AuthenticationResult.Status">>) ->
    'ProtobufStream.AuthenticationResult.Status';
fqbin_to_enum_name(<<"ProtobufClient.APIAuthenticationMessage.Source">>) ->
    'ProtobufClient.APIAuthenticationMessage.Source';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('ProtobufBroker.FundingType') ->
    <<"ProtobufBroker.FundingType">>;
enum_name_to_fqbin('ProtobufBroker.PrivateOrder.Type') ->
    <<"ProtobufBroker.PrivateOrder.Type">>;
enum_name_to_fqbin('ProtobufBroker.PrivateOrder.PriceParamType') ->
    <<"ProtobufBroker.PrivateOrder.PriceParamType">>;
enum_name_to_fqbin('ProtobufStream.AuthenticationResult.Status') ->
    <<"ProtobufStream.AuthenticationResult.Status">>;
enum_name_to_fqbin('ProtobufClient.APIAuthenticationMessage.Source') ->
    <<"ProtobufClient.APIAuthenticationMessage.Source">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'ProtobufBroker'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "broker.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["broker.proto", "private.proto", "stream.proto",
     "client.proto", "market.proto", "index.proto",
     "pair.proto", "asset.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["broker", "private", "stream", "client", "market",
     "index", "pair", "asset"].


get_msg_containment("broker") ->
    ['ProtobufBroker.APIAccessorStatusUpdate',
     'ProtobufBroker.AnonymousSessionStatusUpdate',
     'ProtobufBroker.BalancesUpdate',
     'ProtobufBroker.BrokerRequest',
     'ProtobufBroker.BrokerSessionMessage',
     'ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession',
     'ProtobufBroker.BrokerSessionMessage.Session',
     'ProtobufBroker.BrokerUpdateMessage',
     'ProtobufBroker.CancelOrderRequest',
     'ProtobufBroker.CancelOrderResult',
     'ProtobufBroker.ClosePositionRequest',
     'ProtobufBroker.OrdersUpdate',
     'ProtobufBroker.PermissionsUpdate',
     'ProtobufBroker.PermissionsUpdate.Agreement',
     'ProtobufBroker.PermissionsUpdate.LeverageLevels',
     'ProtobufBroker.PlaceOrderRequest',
     'ProtobufBroker.PlaceOrderResult',
     'ProtobufBroker.PositionsUpdate',
     'ProtobufBroker.ReplaceOrderRequest',
     'ProtobufBroker.RequestResolutionUpdate',
     'ProtobufBroker.SessionStatusUpdate',
     'ProtobufBroker.SyncRequest',
     'ProtobufBroker.TradesUpdate'];
get_msg_containment("private") ->
    ['ProtobufBroker.Balance', 'ProtobufBroker.Balances',
     'ProtobufBroker.PrivateOrder',
     'ProtobufBroker.PrivateOrder.PriceParam',
     'ProtobufBroker.PrivatePosition',
     'ProtobufBroker.PrivateTrade'];
get_msg_containment("stream") ->
    ['ProtobufStream.AuthenticationResult',
     'ProtobufStream.MissedMessages',
     'ProtobufStream.StreamMessage',
     'ProtobufStream.SubscribeError',
     'ProtobufStream.SubscriptionResult',
     'ProtobufStream.SubscriptionStatus',
     'ProtobufStream.UnsubscribeError',
     'ProtobufStream.UnsubscriptionResult'];
get_msg_containment("client") ->
    ['ProtobufClient.APIAuthenticationMessage',
     'ProtobufClient.ClientIdentificationMessage',
     'ProtobufClient.ClientMessage',
     'ProtobufClient.ClientSessionMessage',
     'ProtobufClient.ClientSessionMessage.AnonymousTradingSession',
     'ProtobufClient.ClientSessionMessage.Session',
     'ProtobufClient.ClientSubscribeMessage',
     'ProtobufClient.ClientSubscription',
     'ProtobufClient.ClientUnsubscribeMessage',
     'ProtobufClient.StreamSubscription',
     'ProtobufClient.TradeSessionAuth',
     'ProtobufClient.TradeSubscription',
     'ProtobufClient.WebAuthenticationMessage'];
get_msg_containment("market") ->
    ['ProtobufMarkets.Interval',
     'ProtobufMarkets.Interval.OHLC',
     'ProtobufMarkets.IntervalsUpdate',
     'ProtobufMarkets.Market',
     'ProtobufMarkets.MarketUpdateMessage',
     'ProtobufMarkets.Order',
     'ProtobufMarkets.OrderBookDeltaUpdate',
     'ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas',
     'ProtobufMarkets.OrderBookSpreadUpdate',
     'ProtobufMarkets.OrderBookUpdate',
     'ProtobufMarkets.SparklineUpdate',
     'ProtobufMarkets.SummaryUpdate',
     'ProtobufMarkets.Trade',
     'ProtobufMarkets.TradesUpdate'];
get_msg_containment("index") ->
    ['ProtobufMarkets.Index',
     'ProtobufMarkets.IndexUpdateMessage',
     'ProtobufMarkets.Ticker',
     'ProtobufMarkets.TickerUpdate'];
get_msg_containment("pair") ->
    ['ProtobufMarkets.PairPerformanceUpdate',
     'ProtobufMarkets.PairTrendlineUpdate',
     'ProtobufMarkets.PairUpdateMessage',
     'ProtobufMarkets.PairVwapUpdate'];
get_msg_containment("asset") ->
    ['ProtobufMarkets.AssetUSDVolumeUpdate',
     'ProtobufMarkets.AssetUpdateMessage'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("broker") -> 'ProtobufBroker';
get_pkg_containment("private") -> 'ProtobufBroker';
get_pkg_containment("stream") -> 'ProtobufStream';
get_pkg_containment("client") -> 'ProtobufClient';
get_pkg_containment("market") -> 'ProtobufMarkets';
get_pkg_containment("index") -> 'ProtobufMarkets';
get_pkg_containment("pair") -> 'ProtobufMarkets';
get_pkg_containment("asset") -> 'ProtobufMarkets';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("broker") -> [];
get_service_containment("private") -> [];
get_service_containment("stream") -> [];
get_service_containment("client") -> [];
get_service_containment("market") -> [];
get_service_containment("index") -> [];
get_service_containment("pair") -> [];
get_service_containment("asset") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("broker") -> [];
get_rpc_containment("private") -> [];
get_rpc_containment("stream") -> [];
get_rpc_containment("client") -> [];
get_rpc_containment("market") -> [];
get_rpc_containment("index") -> [];
get_rpc_containment("pair") -> [];
get_rpc_containment("asset") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("broker") -> [];
get_enum_containment("private") ->
    ['ProtobufBroker.FundingType',
     'ProtobufBroker.PrivateOrder.PriceParamType',
     'ProtobufBroker.PrivateOrder.Type'];
get_enum_containment("stream") ->
    ['ProtobufStream.AuthenticationResult.Status'];
get_enum_containment("client") ->
    ['ProtobufClient.APIAuthenticationMessage.Source'];
get_enum_containment("market") -> [];
get_enum_containment("index") -> [];
get_enum_containment("pair") -> [];
get_enum_containment("asset") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Ticker">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Order">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.UnsubscribeError">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.SubscribeError">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivateOrder">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookDeltaUpdate.OrderDeltas">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Interval.OHLC">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.SubscriptionStatus">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.MissedMessages">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.Balances">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PermissionsUpdate.LeverageLevels">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Market">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.UnsubscriptionResult">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.SubscriptionResult">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.AuthenticationResult">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.SyncRequest">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.ReplaceOrderRequest">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PlaceOrderResult">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PlaceOrderRequest">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PermissionsUpdate.Agreement">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.ClosePositionRequest">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.CancelOrderResult">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.CancelOrderRequest">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.BrokerRequest">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.AssetUpdateMessage">>) -> "asset";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.AssetUSDVolumeUpdate">>) -> "asset";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairVwapUpdate">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairUpdateMessage">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairTrendlineUpdate">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairPerformanceUpdate">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.TickerUpdate">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.IndexUpdateMessage">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.TradesUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Trade">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.SummaryUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.SparklineUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookSpreadUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.OrderBookDeltaUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.MarketUpdateMessage">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.IntervalsUpdate">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.WebAuthenticationMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientUnsubscribeMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientSubscribeMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientSessionMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientIdentificationMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.APIAuthenticationMessage">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufStream.StreamMessage">>) -> "stream";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivateTrade">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.Balance">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.TradesUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.SessionStatusUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.RequestResolutionUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PositionsUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PermissionsUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.OrdersUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.BrokerUpdateMessage">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.BrokerSessionMessage">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.BalancesUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.AnonymousSessionStatusUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.APIAccessorStatusUpdate">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Index">>) -> "index";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.TradeSessionAuth">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.Interval">>) -> "market";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivateOrder.PriceParam">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.TradeSubscription">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.StreamSubscription">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientSubscription">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientSessionMessage.Session">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufClient.ClientSessionMessage.AnonymousTradingSession">>) -> "client";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.PrivatePosition">>) -> "private";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.BrokerSessionMessage.Session">>) -> "broker";
get_proto_by_msg_name_as_fqbin(<<"ProtobufBroker.BrokerSessionMessage.AnonymousTradingSession">>) -> "broker";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"ProtobufStream.AuthenticationResult.Status">>) -> "stream";
get_proto_by_enum_name_as_fqbin(<<"ProtobufClient.APIAuthenticationMessage.Source">>) -> "client";
get_proto_by_enum_name_as_fqbin(<<"ProtobufBroker.PrivateOrder.Type">>) -> "private";
get_proto_by_enum_name_as_fqbin(<<"ProtobufBroker.PrivateOrder.PriceParamType">>) -> "private";
get_proto_by_enum_name_as_fqbin(<<"ProtobufBroker.FundingType">>) -> "private";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"ProtobufBroker">>) ->
    ["broker", "private"];
get_protos_by_pkg_name_as_fqbin(<<"ProtobufMarkets">>) ->
    ["asset", "index", "market", "pair"];
get_protos_by_pkg_name_as_fqbin(<<"ProtobufClient">>) -> ["client"];
get_protos_by_pkg_name_as_fqbin(<<"ProtobufStream">>) -> ["stream"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.1".

gpb_version_as_list() ->
    [4,7,1].
