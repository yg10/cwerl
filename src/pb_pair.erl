%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.1
-module(pb_pair).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_pair.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'ProtobufMarkets.PairUpdateMessage'() :: #'ProtobufMarkets.PairUpdateMessage'{}.

-type 'ProtobufMarkets.PairVwapUpdate'() :: #'ProtobufMarkets.PairVwapUpdate'{}.

-type 'ProtobufMarkets.PairPerformanceUpdate'() :: #'ProtobufMarkets.PairPerformanceUpdate'{}.

-type 'ProtobufMarkets.PairTrendlineUpdate'() :: #'ProtobufMarkets.PairTrendlineUpdate'{}.

-export_type(['ProtobufMarkets.PairUpdateMessage'/0, 'ProtobufMarkets.PairVwapUpdate'/0, 'ProtobufMarkets.PairPerformanceUpdate'/0, 'ProtobufMarkets.PairTrendlineUpdate'/0]).

-spec encode_msg(#'ProtobufMarkets.PairUpdateMessage'{} | #'ProtobufMarkets.PairVwapUpdate'{} | #'ProtobufMarkets.PairPerformanceUpdate'{} | #'ProtobufMarkets.PairTrendlineUpdate'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'ProtobufMarkets.PairUpdateMessage'{} | #'ProtobufMarkets.PairVwapUpdate'{} | #'ProtobufMarkets.PairPerformanceUpdate'{} | #'ProtobufMarkets.PairTrendlineUpdate'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'ProtobufMarkets.PairUpdateMessage'{} | #'ProtobufMarkets.PairVwapUpdate'{} | #'ProtobufMarkets.PairPerformanceUpdate'{} | #'ProtobufMarkets.PairTrendlineUpdate'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufMarkets.PairUpdateMessage' ->
	  'encode_msg_ProtobufMarkets.PairUpdateMessage'(id(Msg,
							    TrUserData),
							 TrUserData);
      'ProtobufMarkets.PairVwapUpdate' ->
	  'encode_msg_ProtobufMarkets.PairVwapUpdate'(id(Msg,
							 TrUserData),
						      TrUserData);
      'ProtobufMarkets.PairPerformanceUpdate' ->
	  'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(id(Msg,
								TrUserData),
							     TrUserData);
      'ProtobufMarkets.PairTrendlineUpdate' ->
	  'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(id(Msg,
							      TrUserData),
							   TrUserData)
    end.


'encode_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
					       TrUserData) ->
    'encode_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
						   <<>>, TrUserData).


'encode_msg_ProtobufMarkets.PairUpdateMessage'(#'ProtobufMarkets.PairUpdateMessage'{pair
											=
											F1,
										    'Update'
											=
											F2},
					       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {vwapUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(TrTF2,
									   <<B1/binary,
									     18>>,
									   TrUserData)
		 end;
	     {performanceUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(TrTF2,
										  <<B1/binary,
										    26>>,
										  TrUserData)
		 end;
	     {trendlineUpdate, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   'e_mfield_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(TrTF2,
										<<B1/binary,
										  34>>,
										TrUserData)
		 end
	   end
    end.

'encode_msg_ProtobufMarkets.PairVwapUpdate'(Msg,
					    TrUserData) ->
    'encode_msg_ProtobufMarkets.PairVwapUpdate'(Msg, <<>>,
						TrUserData).


'encode_msg_ProtobufMarkets.PairVwapUpdate'(#'ProtobufMarkets.PairVwapUpdate'{vwap
										  =
										  F1,
									      timestamp
										  =
										  F2},
					    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0.0 -> Bin;
		     true ->
			 e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
						   TrUserData) ->
    'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
						       <<>>, TrUserData).


'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(#'ProtobufMarkets.PairPerformanceUpdate'{window
												=
												F1,
											    performance
												=
												F2},
						   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0.0 -> B1;
		true ->
		    e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
	     end
	   end
    end.

'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
						 TrUserData) ->
    'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
						     <<>>, TrUserData).


'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(#'ProtobufMarkets.PairTrendlineUpdate'{window
											    =
											    F1,
											time
											    =
											    F2,
											price
											    =
											    F3,
											volume
											    =
											    F4},
						 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     case is_empty_string(TrF4) of
	       true -> B3;
	       false ->
		   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	     end
	   end
    end.

'e_mfield_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Msg,
							Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairVwapUpdate'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Msg,
							       Bin,
							       TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
							   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Msg,
							     Bin, TrUserData) ->
    SubBin =
	'encode_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
							 <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('ProtobufMarkets.PairUpdateMessage',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairUpdateMessage'(Bin,
						      TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairVwapUpdate', Bin,
		  TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairVwapUpdate'(Bin,
						   TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairPerformanceUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairPerformanceUpdate'(Bin,
							  TrUserData),
       TrUserData);
decode_msg_2_doit('ProtobufMarkets.PairTrendlineUpdate',
		  Bin, TrUserData) ->
    id('decode_msg_ProtobufMarkets.PairTrendlineUpdate'(Bin,
							TrUserData),
       TrUserData).



'decode_msg_ProtobufMarkets.PairUpdateMessage'(Bin,
					       TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Bin,
							   0, 0,
							   id(0, TrUserData),
							   id(undefined,
							      TrUserData),
							   TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<8,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_pair'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<18,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<26,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<34,
							 Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<>>,
						       0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairUpdateMessage'{pair = F@_1,
					 'Update' = F@_2};
'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(Other,
							  Z1, Z2, F@_1, F@_2,
							  TrUserData).

'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_pair'(Rest,
							   0, 0, F@_1, F@_2,
							   TrUserData);
      18 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Rest,
									0, 0,
									F@_1,
									F@_2,
									TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairUpdateMessage'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairUpdateMessage'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(Rest,
									  0, 0,
									  F@_1,
									  F@_2,
									  TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairUpdateMessage'(Rest,
							       Key bsr 3, 0,
							       F@_1, F@_2,
							       TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairUpdateMessage'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairUpdateMessage'(<<>>,
						      0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairUpdateMessage'{pair = F@_1,
					 'Update' = F@_2}.

'd_field_ProtobufMarkets.PairUpdateMessage_pair'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_pair'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_pair'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, NewFValue,
							   F@_2, TrUserData).

'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_vwapUpdate'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, Prev,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairVwapUpdate'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, F@_1,
							   case Prev of
							     undefined ->
								 id({vwapUpdate,
								     NewFValue},
								    TrUserData);
							     {vwapUpdate,
							      MVPrev} ->
								 id({vwapUpdate,
								     'merge_msg_ProtobufMarkets.PairVwapUpdate'(MVPrev,
														NewFValue,
														TrUserData)},
								    TrUserData);
							     _ ->
								 id({vwapUpdate,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_performanceUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      Prev,
							      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairPerformanceUpdate'(Bs,
										  TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, F@_1,
							   case Prev of
							     undefined ->
								 id({performanceUpdate,
								     NewFValue},
								    TrUserData);
							     {performanceUpdate,
							      MVPrev} ->
								 id({performanceUpdate,
								     'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(MVPrev,
														       NewFValue,
														       TrUserData)},
								    TrUserData);
							     _ ->
								 id({performanceUpdate,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								TrUserData);
'd_field_ProtobufMarkets.PairUpdateMessage_trendlineUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, Prev,
							    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_ProtobufMarkets.PairTrendlineUpdate'(Bs,
										TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(RestF,
							   0, 0, F@_1,
							   case Prev of
							     undefined ->
								 id({trendlineUpdate,
								     NewFValue},
								    TrUserData);
							     {trendlineUpdate,
							      MVPrev} ->
								 id({trendlineUpdate,
								     'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(MVPrev,
														     NewFValue,
														     TrUserData)},
								    TrUserData);
							     _ ->
								 id({trendlineUpdate,
								     NewFValue},
								    TrUserData)
							   end,
							   TrUserData).

'skip_varint_ProtobufMarkets.PairUpdateMessage'(<<1:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'skip_varint_ProtobufMarkets.PairUpdateMessage'(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
'skip_varint_ProtobufMarkets.PairUpdateMessage'(<<0:1,
						  _:7, Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'skip_length_delimited_ProtobufMarkets.PairUpdateMessage'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest2,
							   0, 0, F@_1, F@_2,
							   TrUserData).

'skip_group_ProtobufMarkets.PairUpdateMessage'(Bin,
					       FNum, Z2, F@_1, F@_2,
					       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   0, Z2, F@_1, F@_2,
							   TrUserData).

'skip_32_ProtobufMarkets.PairUpdateMessage'(<<_:32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'skip_64_ProtobufMarkets.PairUpdateMessage'(<<_:64,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairUpdateMessage'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData).

'decode_msg_ProtobufMarkets.PairVwapUpdate'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Bin,
							0, 0,
							id(0.0, TrUserData),
							id(0, TrUserData),
							TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<9,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<16,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<>>,
						    0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairVwapUpdate'{vwap = F@_1,
				      timestamp = F@_2};
'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairVwapUpdate'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairVwapUpdate'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairVwapUpdate'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairVwapUpdate'(Rest, 0, 0,
							 F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairVwapUpdate'(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    #'ProtobufMarkets.PairVwapUpdate'{vwap = F@_1,
				      timestamp = F@_2}.

'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<0:48,
						240, 127, Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id(infinity,
							   TrUserData),
							F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<0:48,
						240, 255, Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id('-infinity',
							   TrUserData),
							F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<_:48,
						15:4, _:4, _:1, 127:7,
						Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id(nan, TrUserData),
							F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_vwap'(<<Value:64/little-float,
						Rest/binary>>,
					      Z1, Z2, _, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2,
							id(Value, TrUserData),
							F@_2, TrUserData).

'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'd_field_ProtobufMarkets.PairVwapUpdate_timestamp'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(RestF,
							0, 0, F@_1, NewFValue,
							TrUserData).

'skip_varint_ProtobufMarkets.PairVwapUpdate'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_ProtobufMarkets.PairVwapUpdate'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'skip_varint_ProtobufMarkets.PairVwapUpdate'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'skip_length_delimited_ProtobufMarkets.PairVwapUpdate'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest2,
							0, 0, F@_1, F@_2,
							TrUserData).

'skip_group_ProtobufMarkets.PairVwapUpdate'(Bin, FNum,
					    Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							0, Z2, F@_1, F@_2,
							TrUserData).

'skip_32_ProtobufMarkets.PairVwapUpdate'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_64_ProtobufMarkets.PairVwapUpdate'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairVwapUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'decode_msg_ProtobufMarkets.PairPerformanceUpdate'(Bin,
						   TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Bin,
							       0, 0,
							       id([],
								  TrUserData),
							       id(0.0,
								  TrUserData),
							       TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<10,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<17,
							     Rest/binary>>,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(Rest,
								Z1, Z2, F@_1,
								F@_2,
								TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<>>,
							   0, 0, F@_1, F@_2,
							   _) ->
    #'ProtobufMarkets.PairPerformanceUpdate'{window = F@_1,
					     performance = F@_2};
'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Other,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Other,
							      Z1, Z2, F@_1,
							      F@_2, TrUserData).

'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							      N + 7,
							      X bsl N + Acc,
							      F@_1, F@_2,
							      TrUserData);
'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F@_1, F@_2,
							  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      17 ->
	  'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairPerformanceUpdate'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(Rest,
									      0,
									      0,
									      F@_1,
									      F@_2,
									      TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairPerformanceUpdate'(Rest,
								   Key bsr 3, 0,
								   F@_1, F@_2,
								   TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairPerformanceUpdate'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(<<>>,
							  0, 0, F@_1, F@_2,
							  _) ->
    #'ProtobufMarkets.PairPerformanceUpdate'{window = F@_1,
					     performance = F@_2}.

'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_window'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F@_2,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(RestF,
							       0, 0, NewFValue,
							       F@_2,
							       TrUserData).

'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<0:48,
							      240, 127,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id(infinity,
								  TrUserData),
							       TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<0:48,
							      240, 255,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id('-infinity',
								  TrUserData),
							       TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<_:48,
							      15:4, _:4, _:1,
							      127:7,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id(nan,
								  TrUserData),
							       TrUserData);
'd_field_ProtobufMarkets.PairPerformanceUpdate_performance'(<<Value:64/little-float,
							      Rest/binary>>,
							    Z1, Z2, F@_1, _,
							    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       id(Value,
								  TrUserData),
							       TrUserData).

'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(<<1:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData);
'skip_varint_ProtobufMarkets.PairPerformanceUpdate'(<<0:1,
						      _:7, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F@_1, F@_2,
								  TrUserData);
'skip_length_delimited_ProtobufMarkets.PairPerformanceUpdate'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F@_1,
							      F@_2,
							      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest2,
							       0, 0, F@_1, F@_2,
							       TrUserData).

'skip_group_ProtobufMarkets.PairPerformanceUpdate'(Bin,
						   FNum, Z2, F@_1, F@_2,
						   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       0, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_32_ProtobufMarkets.PairPerformanceUpdate'(<<_:32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'skip_64_ProtobufMarkets.PairPerformanceUpdate'(<<_:64,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairPerformanceUpdate'(Rest,
							       Z1, Z2, F@_1,
							       F@_2,
							       TrUserData).

'decode_msg_ProtobufMarkets.PairTrendlineUpdate'(Bin,
						 TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Bin,
							     0, 0,
							     id([], TrUserData),
							     id(0, TrUserData),
							     id([], TrUserData),
							     id([], TrUserData),
							     TrUserData).

'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<10,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<16,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<26,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<34,
							   Rest/binary>>,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData);
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<>>,
							 0, 0, F@_1, F@_2, F@_3,
							 F@_4, _) ->
    #'ProtobufMarkets.PairTrendlineUpdate'{window = F@_1,
					   time = F@_2, price = F@_3,
					   volume = F@_4};
'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Other,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4,
							 TrUserData) ->
    'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Other,
							    Z1, Z2, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData).

'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, F@_3, F@_4,
							    TrUserData);
'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							F@_3, F@_4,
							TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      16 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData);
      26 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
      34 ->
	  'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4,
							       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  F@_4,
								  TrUserData);
	    1 ->
		'skip_64_ProtobufMarkets.PairTrendlineUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    2 ->
		'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(Rest,
									    0,
									    0,
									    F@_1,
									    F@_2,
									    F@_3,
									    F@_4,
									    TrUserData);
	    3 ->
		'skip_group_ProtobufMarkets.PairTrendlineUpdate'(Rest,
								 Key bsr 3, 0,
								 F@_1, F@_2,
								 F@_3, F@_4,
								 TrUserData);
	    5 ->
		'skip_32_ProtobufMarkets.PairTrendlineUpdate'(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData)
	  end
    end;
'dg_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(<<>>,
							0, 0, F@_1, F@_2, F@_3,
							F@_4, _) ->
    #'ProtobufMarkets.PairTrendlineUpdate'{window = F@_1,
					   time = F@_2, price = F@_3,
					   volume = F@_4}.

'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_window'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, _, F@_2, F@_3,
						     F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, NewFValue,
							     F@_2, F@_3, F@_4,
							     TrUserData).

'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_time'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _, F@_3, F@_4,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, F@_1,
							     NewFValue, F@_3,
							     F@_4, TrUserData).

'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_price'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, _, F@_4,
						    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, F@_1, F@_2,
							     NewFValue, F@_4,
							     TrUserData).

'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, TrUserData)
    when N < 57 ->
    'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
'd_field_ProtobufMarkets.PairTrendlineUpdate_volume'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(RestF,
							     0, 0, F@_1, F@_2,
							     F@_3, NewFValue,
							     TrUserData).

'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(<<1:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, TrUserData);
'skip_varint_ProtobufMarkets.PairTrendlineUpdate'(<<0:1,
						    _:7, Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  F@_4, TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData)
    when N < 57 ->
    'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(Rest,
								N + 7,
								X bsl N + Acc,
								F@_1, F@_2,
								F@_3, F@_4,
								TrUserData);
'skip_length_delimited_ProtobufMarkets.PairTrendlineUpdate'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F@_1, F@_2,
							    F@_3, F@_4,
							    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest2,
							     0, 0, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_group_ProtobufMarkets.PairTrendlineUpdate'(Bin,
						 FNum, Z2, F@_1, F@_2, F@_3,
						 F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     0, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_32_ProtobufMarkets.PairTrendlineUpdate'(<<_:32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

'skip_64_ProtobufMarkets.PairTrendlineUpdate'(<<_:64,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    'dfp_read_field_def_ProtobufMarkets.PairTrendlineUpdate'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     F@_3, F@_4,
							     TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufMarkets.PairUpdateMessage' ->
	  'merge_msg_ProtobufMarkets.PairUpdateMessage'(Prev, New,
							TrUserData);
      'ProtobufMarkets.PairVwapUpdate' ->
	  'merge_msg_ProtobufMarkets.PairVwapUpdate'(Prev, New,
						     TrUserData);
      'ProtobufMarkets.PairPerformanceUpdate' ->
	  'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(Prev,
							    New, TrUserData);
      'ProtobufMarkets.PairTrendlineUpdate' ->
	  'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(Prev,
							  New, TrUserData)
    end.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairUpdateMessage'/3}).
'merge_msg_ProtobufMarkets.PairUpdateMessage'(#'ProtobufMarkets.PairUpdateMessage'{pair
										       =
										       PFpair,
										   'Update'
										       =
										       PFUpdate},
					      #'ProtobufMarkets.PairUpdateMessage'{pair
										       =
										       NFpair,
										   'Update'
										       =
										       NFUpdate},
					      TrUserData) ->
    #'ProtobufMarkets.PairUpdateMessage'{pair =
					     if NFpair =:= undefined -> PFpair;
						true -> NFpair
					     end,
					 'Update' =
					     case {PFUpdate, NFUpdate} of
					       {{vwapUpdate, OPFUpdate},
						{vwapUpdate, ONFUpdate}} ->
						   {vwapUpdate,
						    'merge_msg_ProtobufMarkets.PairVwapUpdate'(OPFUpdate,
											       ONFUpdate,
											       TrUserData)};
					       {{performanceUpdate, OPFUpdate},
						{performanceUpdate,
						 ONFUpdate}} ->
						   {performanceUpdate,
						    'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(OPFUpdate,
												      ONFUpdate,
												      TrUserData)};
					       {{trendlineUpdate, OPFUpdate},
						{trendlineUpdate, ONFUpdate}} ->
						   {trendlineUpdate,
						    'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(OPFUpdate,
												    ONFUpdate,
												    TrUserData)};
					       {_, undefined} -> PFUpdate;
					       _ -> NFUpdate
					     end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairVwapUpdate'/3}).
'merge_msg_ProtobufMarkets.PairVwapUpdate'(#'ProtobufMarkets.PairVwapUpdate'{vwap
										 =
										 PFvwap,
									     timestamp
										 =
										 PFtimestamp},
					   #'ProtobufMarkets.PairVwapUpdate'{vwap
										 =
										 NFvwap,
									     timestamp
										 =
										 NFtimestamp},
					   _) ->
    #'ProtobufMarkets.PairVwapUpdate'{vwap =
					  if NFvwap =:= undefined -> PFvwap;
					     true -> NFvwap
					  end,
				      timestamp =
					  if NFtimestamp =:= undefined ->
						 PFtimestamp;
					     true -> NFtimestamp
					  end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairPerformanceUpdate'/3}).
'merge_msg_ProtobufMarkets.PairPerformanceUpdate'(#'ProtobufMarkets.PairPerformanceUpdate'{window
											       =
											       PFwindow,
											   performance
											       =
											       PFperformance},
						  #'ProtobufMarkets.PairPerformanceUpdate'{window
											       =
											       NFwindow,
											   performance
											       =
											       NFperformance},
						  _) ->
    #'ProtobufMarkets.PairPerformanceUpdate'{window =
						 if NFwindow =:= undefined ->
							PFwindow;
						    true -> NFwindow
						 end,
					     performance =
						 if NFperformance =:=
						      undefined ->
							PFperformance;
						    true -> NFperformance
						 end}.

-compile({nowarn_unused_function,'merge_msg_ProtobufMarkets.PairTrendlineUpdate'/3}).
'merge_msg_ProtobufMarkets.PairTrendlineUpdate'(#'ProtobufMarkets.PairTrendlineUpdate'{window
											   =
											   PFwindow,
										       time
											   =
											   PFtime,
										       price
											   =
											   PFprice,
										       volume
											   =
											   PFvolume},
						#'ProtobufMarkets.PairTrendlineUpdate'{window
											   =
											   NFwindow,
										       time
											   =
											   NFtime,
										       price
											   =
											   NFprice,
										       volume
											   =
											   NFvolume},
						_) ->
    #'ProtobufMarkets.PairTrendlineUpdate'{window =
					       if NFwindow =:= undefined ->
						      PFwindow;
						  true -> NFwindow
					       end,
					   time =
					       if NFtime =:= undefined ->
						      PFtime;
						  true -> NFtime
					       end,
					   price =
					       if NFprice =:= undefined ->
						      PFprice;
						  true -> NFprice
					       end,
					   volume =
					       if NFvolume =:= undefined ->
						      PFvolume;
						  true -> NFvolume
					       end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'ProtobufMarkets.PairUpdateMessage' ->
	  'v_msg_ProtobufMarkets.PairUpdateMessage'(Msg,
						    [MsgName], TrUserData);
      'ProtobufMarkets.PairVwapUpdate' ->
	  'v_msg_ProtobufMarkets.PairVwapUpdate'(Msg, [MsgName],
						 TrUserData);
      'ProtobufMarkets.PairPerformanceUpdate' ->
	  'v_msg_ProtobufMarkets.PairPerformanceUpdate'(Msg,
							[MsgName], TrUserData);
      'ProtobufMarkets.PairTrendlineUpdate' ->
	  'v_msg_ProtobufMarkets.PairTrendlineUpdate'(Msg,
						      [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairUpdateMessage'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairUpdateMessage'/3}).
'v_msg_ProtobufMarkets.PairUpdateMessage'(#'ProtobufMarkets.PairUpdateMessage'{pair
										   =
										   F1,
									       'Update'
										   =
										   F2},
					  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [pair | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {vwapUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.PairVwapUpdate'(OF2,
						 [vwapUpdate, 'Update' | Path],
						 TrUserData);
      {performanceUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.PairPerformanceUpdate'(OF2,
							[performanceUpdate,
							 'Update'
							 | Path],
							TrUserData);
      {trendlineUpdate, OF2} ->
	  'v_msg_ProtobufMarkets.PairTrendlineUpdate'(OF2,
						      [trendlineUpdate, 'Update'
						       | Path],
						      TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, ['Update' | Path])
    end,
    ok;
'v_msg_ProtobufMarkets.PairUpdateMessage'(X, Path,
					  _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairUpdateMessage'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairVwapUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairVwapUpdate'/3}).
'v_msg_ProtobufMarkets.PairVwapUpdate'(#'ProtobufMarkets.PairVwapUpdate'{vwap
									     =
									     F1,
									 timestamp
									     =
									     F2},
				       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [vwap | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [timestamp | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.PairVwapUpdate'(X, Path,
				       _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairVwapUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairPerformanceUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairPerformanceUpdate'/3}).
'v_msg_ProtobufMarkets.PairPerformanceUpdate'(#'ProtobufMarkets.PairPerformanceUpdate'{window
											   =
											   F1,
										       performance
											   =
											   F2},
					      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [window | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_double(F2, [performance | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.PairPerformanceUpdate'(X, Path,
					      _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairPerformanceUpdate'},
		  X, Path).

-compile({nowarn_unused_function,'v_msg_ProtobufMarkets.PairTrendlineUpdate'/3}).
-dialyzer({nowarn_function,'v_msg_ProtobufMarkets.PairTrendlineUpdate'/3}).
'v_msg_ProtobufMarkets.PairTrendlineUpdate'(#'ProtobufMarkets.PairTrendlineUpdate'{window
										       =
										       F1,
										   time
										       =
										       F2,
										   price
										       =
										       F3,
										   volume
										       =
										       F4},
					    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [window | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, [time | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [price | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [volume | Path], TrUserData)
    end,
    ok;
'v_msg_ProtobufMarkets.PairTrendlineUpdate'(X, Path,
					    _TrUserData) ->
    mk_type_error({expected_msg,
		   'ProtobufMarkets.PairTrendlineUpdate'},
		  X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'ProtobufMarkets.PairUpdateMessage'},
      [#field{name = pair, fnum = 1, rnum = 2, type = uint64,
	      occurrence = optional, opts = []},
       #gpb_oneof{name = 'Update', rnum = 3,
		  fields =
		      [#field{name = vwapUpdate, fnum = 2, rnum = 3,
			      type = {msg, 'ProtobufMarkets.PairVwapUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = performanceUpdate, fnum = 3, rnum = 3,
			      type =
				  {msg,
				   'ProtobufMarkets.PairPerformanceUpdate'},
			      occurrence = optional, opts = []},
		       #field{name = trendlineUpdate, fnum = 4, rnum = 3,
			      type =
				  {msg, 'ProtobufMarkets.PairTrendlineUpdate'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'ProtobufMarkets.PairVwapUpdate'},
      [#field{name = vwap, fnum = 1, rnum = 2, type = double,
	      occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.PairPerformanceUpdate'},
      [#field{name = window, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = performance, fnum = 2, rnum = 3,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'ProtobufMarkets.PairTrendlineUpdate'},
      [#field{name = window, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = time, fnum = 2, rnum = 3, type = int64,
	      occurrence = optional, opts = []},
       #field{name = price, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = volume, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['ProtobufMarkets.PairUpdateMessage',
     'ProtobufMarkets.PairVwapUpdate',
     'ProtobufMarkets.PairPerformanceUpdate',
     'ProtobufMarkets.PairTrendlineUpdate'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['ProtobufMarkets.PairUpdateMessage',
     'ProtobufMarkets.PairVwapUpdate',
     'ProtobufMarkets.PairPerformanceUpdate',
     'ProtobufMarkets.PairTrendlineUpdate'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('ProtobufMarkets.PairUpdateMessage') ->
    [#field{name = pair, fnum = 1, rnum = 2, type = uint64,
	    occurrence = optional, opts = []},
     #gpb_oneof{name = 'Update', rnum = 3,
		fields =
		    [#field{name = vwapUpdate, fnum = 2, rnum = 3,
			    type = {msg, 'ProtobufMarkets.PairVwapUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = performanceUpdate, fnum = 3, rnum = 3,
			    type =
				{msg, 'ProtobufMarkets.PairPerformanceUpdate'},
			    occurrence = optional, opts = []},
		     #field{name = trendlineUpdate, fnum = 4, rnum = 3,
			    type = {msg, 'ProtobufMarkets.PairTrendlineUpdate'},
			    occurrence = optional, opts = []}]}];
find_msg_def('ProtobufMarkets.PairVwapUpdate') ->
    [#field{name = vwap, fnum = 1, rnum = 2, type = double,
	    occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.PairPerformanceUpdate') ->
    [#field{name = window, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = performance, fnum = 2, rnum = 3,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('ProtobufMarkets.PairTrendlineUpdate') ->
    [#field{name = window, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = time, fnum = 2, rnum = 3, type = int64,
	    occurrence = optional, opts = []},
     #field{name = price, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = volume, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ProtobufMarkets.PairUpdateMessage">>) ->
    'ProtobufMarkets.PairUpdateMessage';
fqbin_to_msg_name(<<"ProtobufMarkets.PairVwapUpdate">>) ->
    'ProtobufMarkets.PairVwapUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.PairPerformanceUpdate">>) ->
    'ProtobufMarkets.PairPerformanceUpdate';
fqbin_to_msg_name(<<"ProtobufMarkets.PairTrendlineUpdate">>) ->
    'ProtobufMarkets.PairTrendlineUpdate';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('ProtobufMarkets.PairUpdateMessage') ->
    <<"ProtobufMarkets.PairUpdateMessage">>;
msg_name_to_fqbin('ProtobufMarkets.PairVwapUpdate') ->
    <<"ProtobufMarkets.PairVwapUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.PairPerformanceUpdate') ->
    <<"ProtobufMarkets.PairPerformanceUpdate">>;
msg_name_to_fqbin('ProtobufMarkets.PairTrendlineUpdate') ->
    <<"ProtobufMarkets.PairTrendlineUpdate">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'ProtobufMarkets'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "pair.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["pair.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["pair"].


get_msg_containment("pair") ->
    ['ProtobufMarkets.PairPerformanceUpdate',
     'ProtobufMarkets.PairTrendlineUpdate',
     'ProtobufMarkets.PairUpdateMessage',
     'ProtobufMarkets.PairVwapUpdate'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("pair") -> 'ProtobufMarkets';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("pair") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("pair") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("pair") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairVwapUpdate">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairUpdateMessage">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairTrendlineUpdate">>) -> "pair";
get_proto_by_msg_name_as_fqbin(<<"ProtobufMarkets.PairPerformanceUpdate">>) -> "pair";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"ProtobufMarkets">>) -> ["pair"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.1".

gpb_version_as_list() ->
    [4,7,1].
